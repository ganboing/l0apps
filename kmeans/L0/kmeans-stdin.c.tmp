# 1 "kmeans-stdin.c"
# 1 "<command-line>"
# 1 "kmeans-stdin.c"
# 1 "kmeans-common.h" 1
# 10 "kmeans-common.h"
# 1 "libi0/stdio.h" 1



# 1 "libi0/stddef.h" 1




# 1 "libi0/stdint.h" 1
# 6 "libi0/stddef.h" 2
# 19 "libi0/stddef.h"
register long reg1;
register long reg2;
register long reg3;
register long reg4;
# 218 "libi0/stddef.h"
long get_my_task_id();



long get_new_task_id();



void task_id_to_ec_range(long id, long *base, long *len);
# 5 "libi0/stdio.h" 2
# 1 "libi0/math.h" 1




long ipow(long base, long exp);
double exp(double x);
double sqrt(double x);
# 6 "libi0/stdio.h" 2
# 15 "libi0/stdio.h"
void output_char(long c);
# 41 "libi0/stdio.h"
void output_q(long n);



void output_q_digits(long n, long d);



void output_q_hex(long n);


void output_id();


void output_char_str(char* s, long sl);


void output_str(char* s);
# 69 "libi0/stdio.h"
char input_char();





long input_q();



long input_line(char *buf, long maxlen, long *len);
# 89 "libi0/stdio.h"
long input_long(long *result);







void output_double_binary(double d);

void output_double(double d);
# 110 "libi0/stdio.h"
long input_double(double *result);

void output_double(double d);
# 123 "libi0/stdio.h"
long input_double(double *result);
# 11 "kmeans-common.h" 2
# 1 "libi0/stddef.h" 1
# 12 "kmeans-common.h" 2
# 1 "libi0/stdint.h" 1
# 13 "kmeans-common.h" 2
# 83 "kmeans-common.h"
standalone long x[(10)];
standalone long y[(10)];
standalone long z[(10)];
standalone long w[(10)];
standalone long ci[(10)];

standalone long cx[(2)];
standalone long cy[(2)];
standalone long cz[(2)];
standalone long cw[(2)];







standalone long lcx[((2)+512)*(10)/(10)];
standalone long lcy[((2)+512)*(10)/(10)];
standalone long lcz[((2)+512)*(10)/(10)];
standalone long lcw[((2)+512)*(10)/(10)];
standalone long lcn[((2)+512)*(10)/(10)];




standalone long trigger[((10)/(10)+1)*512];


standalone long iter;

register long reg1;
register long reg2;
register long reg3;
register long reg4;




void start_iteration();

void srand(long seed)
{
    if (seed == 0) {
        seed = 1;
    }

    *((long *)0x300000000) = seed;
    return;
}

long rand()
{
    long r;

    r = *((long *)0x300000000);
    r = r * 0xfef3f6f4f3f2f1;
    *((long *)0x300000000) = r;
    return r;
}
# 157 "kmeans-common.h"
void _output_centroids(long with_point_num)
{
    long i;
    long *npt;
    npt = (long *)(0x300000000 + (2) * 8 * 4);
    output_q((2));
    output_char(' ');
    output_char('c');
    output_char('e');
    output_char('n');
    output_char('t');
    output_char('r');
    output_char('o');
    output_char('i');
    output_char('d');
    output_char('s');
    output_char(':');
    output_char((10));
    for(i = 0; i < (2); i = i + 1)
    {
        output_q(cx[i]);
        output_char(' ');
        output_q(cy[i]);
        output_char(' ');
        output_q(cz[i]);
        output_char(' ');
        output_q(cw[i]);
        if (with_point_num == 1) {
            output_char('/');
            output_q(npt[i]);
        }
        output_char((10));
    }
    output_char((10));

    return;
}

void output_centroids_with_point_num()
{
    _output_centroids(1);
    return;
}


void output_centroids()
{
    _output_centroids(0);
    return;
}

void kmeans_finish()
{
# 223 "kmeans-common.h"
    output_centroids();

    return;
}

void on_recluster_finished(long expected_iter)
{
    long i;
    long j;
    long *tlcx;
    long *tlcy;
    long *tlcz;
    long *tlcw;
    long *tlcn;

    long n_parts;

    long *sumx;
    long *sumy;
    long *sumz;
    long *sumw;
    long *npt;





    if (expected_iter < iter) {

        abortd;
    }

    if (expected_iter > iter) {


        abort;
    }

    for(i = 0; i < (10)/(10) * 512; i = i + 512)
    {
        if(trigger[i] != 2)
        {
            abort;
        }
    }




    sumx = (long *)(0x300000000);
    sumy = (long *)(0x300000000 + (2) * 8);
    sumz = (long *)(0x300000000 + (2) * 8 * 2);
    sumw = (long *)(0x300000000 + (2) * 8 * 3);
    npt = (long *)(0x300000000 + (2) * 8 * 4);

    for(i = 0; i < (2); i = i + 1)
    {
        sumx[i] = 0;
        sumy[i] = 0;
        sumz[i] = 0;
        sumw[i] = 0;
        npt[i] = 0;
    }


    n_parts = (10) / (10);
    for (j = 0; j < n_parts; j = j + 1) {
        tlcx = &lcx[((2)+512)*j];
        tlcy = &lcy[((2)+512)*j];
        tlcz = &lcz[((2)+512)*j];
        tlcw = &lcw[((2)+512)*j];
        tlcn = &lcn[((2)+512)*j];
 for (i = 0; i < (2); i = i + 1)
 {
     sumx[i] = sumx[i] + tlcx[i];
     sumy[i] = sumy[i] + tlcy[i];
     sumz[i] = sumz[i] + tlcz[i];
     sumw[i] = sumw[i] + tlcw[i];
     npt[i] = npt[i] + tlcn[i];
        }
    }

    for(i = 0; i < (2); i = i + 1)
    {
        if (npt[i] != 0) {
            cx[i] = sumx[i] / npt[i];
            cy[i] = sumy[i] / npt[i];
            cz[i] = sumz[i] / npt[i];
            cw[i] = sumw[i] / npt[i];
        }
        else {

            cx[i] = 0x7FFFFFFFFFFFFFF;
            cy[i] = 0x7FFFFFFFFFFFFFF;
            cz[i] = 0x7FFFFFFFFFFFFFF;
            cw[i] = 0x7FFFFFFFFFFFFFF;
        }
    }


    output_char('i');
    output_char('t');
    output_char('e');
    output_char('r');
    output_char(':');
    output_q(iter);
    output_char((10));
# 340 "kmeans-common.h"
    iter = iter + 1;

    if (iter < (6)) {
        start_iteration();
    }
    else {
        kmeans_finish();
    }
# 356 "kmeans-common.h"
    commitd;

}

void recluster_runner(long start, long end)
{
    long i, j, mini;
    long mind, d;
    long xt, yt, zt, wt;
    long partid;

    long *mylcx;
    long *mylcy;
    long *mylcz;
    long *mylcw;
    long *mylcn;





    partid = start / (10);

    mylcx = &lcx[((2)+512)*partid];
    mylcy = &lcy[((2)+512)*partid];
    mylcz = &lcz[((2)+512)*partid];
    mylcw = &lcw[((2)+512)*partid];
    mylcn = &lcn[((2)+512)*partid];

    for (i = 0; i < (2); i = i + 1) {
        mylcx[i] = 0;
        mylcy[i] = 0;
        mylcz[i] = 0;
        mylcw[i] = 0;
        mylcn[i] = 0;
    }

    for(i = start; i < end; i = i + 1)
    {






        xt = x[i];
        yt = y[i];
        zt = z[i];
        wt = w[i];

        j = 0;

        reg1 = (xt) - (cx[j]) ; reg2 = (yt) - (cy[j]) ; reg3 = (zt) - (cz[j]) ; reg4 = (wt) - (cw[j]) ; *(&d) = reg1*reg1 + reg2*reg2 + reg3*reg3 + reg4*reg4;

        mind = d;
        mini = j;

        for(j = 1; j < (2); j = j + 1)
        {

            reg1 = (xt) - (cx[j]) ; reg2 = (yt) - (cy[j]) ; reg3 = (zt) - (cz[j]) ; reg4 = (wt) - (cw[j]) ; *(&d) = reg1*reg1 + reg2*reg2 + reg3*reg3 + reg4*reg4;

            if(d < mind)
            {
                mind = d;
                mini = j;
            }
        }
        mylcn[mini] = mylcn[mini] + 1;
        mylcx[mini] = mylcx[mini] + xt;
        mylcy[mini] = mylcy[mini] + yt;
        mylcz[mini] = mylcz[mini] + zt;
        mylcw[mini] = mylcw[mini] + wt;






    }
    trigger[start/(10)*512] = 2;
    commitd;
}

void start_iteration()
{
    long i;
    long tmp1;
    long tmp2;




    for(i = 0; i < (10); i = i + (10))
    {

        trigger[i/(10)*512] = 0;


        tmp1 = ((2)+512)*i/(10);
        tmp2 = tmp1 + (2) + 512;


        runner

            recluster_runner(i, i + (10))



            using x[i, , i + (10)], y[i, , i + (10)], z[i, , i + (10)], w[i, , i + (10)], ci[i, , i + (10)], cx[0, , (2)], cy[0, , (2)], cz[0, , (2)], cw[0, , (2)], trigger[i/(10)*512, , (i/(10)+1)*512]







 , lcx[tmp1,, tmp2], lcy[tmp1,, tmp2], lcz[tmp1,, tmp2], lcw[tmp1,, tmp2], lcn[tmp1,, tmp2]

 ;
    }
    runner

        on_recluster_finished(iter)



        using iter, cx[0, , (2)], cy[0, , (2)], cz[0, , (2)], cw[0, , (2)]
# 493 "kmeans-common.h"
        , lcx[0,, ((2)+512)*(10)/(10)], lcy[0,, ((2)+512)*(10)/(10)], lcz[0,, ((2)+512)*(10)/(10)], lcw[0,, ((2)+512)*(10)/(10)], lcn[0,, ((2)+512)*(10)/(10)]



        watching trigger[0, , ((10)/(10)+1)*512]
        ;
    return;
}

void on_init1_finished()
{
    long i;
    for(i = 0; i < (10)/(10) * 512; i = i + 512)
    {
        if(trigger[i] != 1)
        {
            abort;
        }
    }


    trigger[0] = 3;

    for(i = 0; i < (2); i = i + 1)
    {






        cx[i] = x[i];
        cy[i] = y[i];
        cz[i] = z[i];
        cw[i] = w[i];

    }


    iter = 0;
# 546 "kmeans-common.h"
    start_iteration();

    commitd;
}

void init_runner(long start, long end)
{
    long i;
    long t;
# 586 "kmeans-common.h"
    srand(1);


    for(i = 0; i < start; i = i + 1)
    {
     t = input_q();
     t = input_q();
     t = input_q();
     t = input_q();
    }


    for(i = start; i < end; i = i + 1)
    {

        x[i] = input_q();




        y[i] = input_q();




        z[i] = input_q();




        w[i] = input_q();
# 627 "kmeans-common.h"
    }

    trigger[start/(10)*512] = 1;
    commit;
}

void init_runner_stdin(long start, long end)
{
    long i;
    long t;

    for(i = 0; i < start; i = i + 1)
    {
     t = input_q();
     t = input_q();
     t = input_q();
     t = input_q();
    }

    for(i = start; i < end; i = i + 1)
    {
        x[i] = input_q();




        y[i] = input_q();




        z[i] = input_q();




        w[i] = input_q();




    }

    for(i = start; i < end; i = i + 1) {
        trigger[i/(10)*512] = 1;
    }

    commit;
}


void init0()
{
    long i;




    for(i = 0; i < (10); i = i + (10))
    {
        trigger[i/(10)*512] = 0;
        runner init_runner(i, i + (10))
            using x[i, , i + (10)], y[i, , i + (10)], z[i, , i + (10)], w[i, , i + (10)], trigger[i/(10)*512, , (i/(10)+1)*512]



 ;
    }

    runner on_init1_finished()
        using cx[0, , (2)], cy[0, , (2)], cz[0, , (2)], cw[0, , (2)], x[0, , (2)], y[0, , (2)], z[0, , (2)], w[0, , (2)], trigger[0, , (10)], iter





        watching trigger[0, , ((10)/(10)+1)*512];

    commit;
}
# 2 "kmeans-stdin.c" 2


void init0_stdin()
{
    long i;

    for(i = 0; i < (10); i = i + (10))
    {
        trigger[i/(10)*512] = 0;
    }

    runner init_runner_stdin(0, (10))
            using x[0,, (10)], y[0,, (10)], z[0,, (10)], w[0,, (10)], trigger[0/(10)*512, , ((10)/(10)+1)*512]
    ;

    runner on_init1_finished()
        using cx[0, , (2)], cy[0, , (2)], cz[0, , (2)], cw[0, , (2)], x[0, , (2)], y[0, , (2)], z[0, , (2)], w[0, , (2)], trigger[0, , (10)], iter
        watching trigger[0, , ((10)/(10)+1)*512];

    commit;
}


void main()
{
# 36 "kmeans-stdin.c"
    runner init0_stdin() using trigger[0, , ((10)/(10)+1)*512];

    commit;
}
