invoking "cc0 -c kmeans-stdin-to-pmem.c -o kmeans-stdin-to-pmem.o -g"
WARNING: It is recommended to use .c0 instead of .c as the source file extension for c0 programs.
temp file is: kmeans-stdin-to-pmem.c.tmp
Preprocessing with cmd "cpp -nostdinc --sysroot . -I/home/progman/workspace/d-thinker/libi0/libi0 kmeans-stdin-to-pmem.c -o kmeans-stdin-to-pmem.c.tmp"
--------------------------------------
parsing...
Calling altlr3CommonTokenStreamSourceNew...
Called altlr3CommonTokenStreamSourceNew...
Parse: calling translation_unit...
Parse: cleanup
finished Parse
--------------------------------------
ConstantPropagation...
--------------------------------------
ConstantPropagation...
--------------------------------------
codeDom Dump:
*************************************
FUNCTION: srand
RETURN: void
PARAMETERS:
    NAME: seed, TYPE: int64
BODY:
{
        branch
        (seed == 0x0):1:
                        {
                (seed = 0x1)
            }
        default:
                        {
            }

    ((*0x300000000) = seed)
        return

}
FUNCTION: rand
RETURN: int64
PARAMETERS:
BODY:
{
    (r = (*0x300000000))
    (r = (r * 0xfef3f6f4f3f2f1):5)
    ((*0x300000000) = r)
        return r

}
FUNCTION: _output_centroids
RETURN: void
PARAMETERS:
    NAME: with_point_num, TYPE: int64
BODY:
{
    (npt = 0x300000040)
    output_q(0x2)
    output_char(0x20)
    output_char(0x63)
    output_char(0x65)
    output_char(0x6e)
    output_char(0x74)
    output_char(0x72)
    output_char(0x6f)
    output_char(0x69)
    output_char(0x64)
    output_char(0x73)
    output_char(0x3a)
    output_char(0xa)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x2):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        output_q(cx[i])
        output_char(0x20)
        output_q(cy[i])
        output_char(0x20)
        output_q(cz[i])
        output_char(0x20)
        output_q(cw[i])
                branch
            (with_point_num == 0x1):1:
                                {
                    output_char(0x2f)
                    output_q(npt[i])
                }
            default:
                                {
                }

        output_char(0xa)
    }


    output_char(0xa)
        return

}
FUNCTION: output_centroids_with_point_num
RETURN: void
PARAMETERS:
BODY:
{
    _output_centroids(0x1)
        return

}
FUNCTION: output_centroids
RETURN: void
PARAMETERS:
BODY:
{
    _output_centroids(0x0)
        return

}
FUNCTION: kmeans_finish
RETURN: void
PARAMETERS:
BODY:
{
    output_centroids()
        return

}
FUNCTION: on_recluster_finished
RETURN: void
PARAMETERS:
    NAME: expected_iter, TYPE: int64
BODY:
{
        branch
        (expected_iter < iter):1:
                        {
                abortd

            }
        default:
                        {
            }

        branch
        (expected_iter > iter):1:
                        {
                abort

            }
        default:
                        {
            }

        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x200):1
    INCR
(i = (i + 0x200):5)
    BODY
    {
                branch
            (trigger[i] != 0x2):1:
                                {
                    abort

                }
            default:
                                {
                }

    }


    (sumx = 0x300000000)
    (sumy = 0x300000010)
    (sumz = 0x300000020)
    (sumw = 0x300000030)
    (npt = 0x300000040)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x2):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (sumx[i] = 0x0)
        (sumy[i] = 0x0)
        (sumz[i] = 0x0)
        (sumw[i] = 0x0)
        (npt[i] = 0x0)
    }


    (n_parts = 0x1)
        
LOOP
    INIT
(j = 0x0)
    COND
(j < n_parts):1
    INCR
(j = (j + 0x1):5)
    BODY
    {
        (tlcx = (&lcx[(0x202 * j):5]))
        (tlcy = (&lcy[(0x202 * j):5]))
        (tlcz = (&lcz[(0x202 * j):5]))
        (tlcw = (&lcw[(0x202 * j):5]))
        (tlcn = (&lcn[(0x202 * j):5]))
                
LOOP
        INIT
(i = 0x0)
        COND
(i < 0x2):1
        INCR
(i = (i + 0x1):5)
        BODY
        {
            (sumx[i] = (sumx[i] + tlcx[i]):5)
            (sumy[i] = (sumy[i] + tlcy[i]):5)
            (sumz[i] = (sumz[i] + tlcz[i]):5)
            (sumw[i] = (sumw[i] + tlcw[i]):5)
            (npt[i] = (npt[i] + tlcn[i]):5)
        }


    }


        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x2):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
                branch
            (npt[i] != 0x0):1:
                                {
                    (cx[i] = (sumx[i] / npt[i]):5)
                    (cy[i] = (sumy[i] / npt[i]):5)
                    (cz[i] = (sumz[i] / npt[i]):5)
                    (cw[i] = (sumw[i] / npt[i]):5)
                }
            default:
                                {
                    (cx[i] = 0x7ffffffffffffff)
                    (cy[i] = 0x7ffffffffffffff)
                    (cz[i] = 0x7ffffffffffffff)
                    (cw[i] = 0x7ffffffffffffff)
                }

    }


    output_char(0x69)
    output_char(0x74)
    output_char(0x65)
    output_char(0x72)
    output_char(0x3a)
    output_q(iter)
    output_char(0xa)
    (iter = (iter + 0x1):5)
        branch
        (iter < 0x6):1:
                        {
                start_iteration()
            }
        default:
                        {
                kmeans_finish()
            }

    commitd

}
FUNCTION: recluster_runner
RETURN: void
PARAMETERS:
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
BODY:
{
    (partid = (start / 0xa):5)
    (mylcx = (&lcx[(0x202 * partid):5]))
    (mylcy = (&lcy[(0x202 * partid):5]))
    (mylcz = (&lcz[(0x202 * partid):5]))
    (mylcw = (&lcw[(0x202 * partid):5]))
    (mylcn = (&lcn[(0x202 * partid):5]))
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x2):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (mylcx[i] = 0x0)
        (mylcy[i] = 0x0)
        (mylcz[i] = 0x0)
        (mylcw[i] = 0x0)
        (mylcn[i] = 0x0)
    }


        
LOOP
    INIT
(i = start)
    COND
(i < end):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (xt = x[i])
        (yt = y[i])
        (zt = z[i])
        (wt = w[i])
        (j = 0x0)
        (reg1 = (xt - cx[j]):5)
        (reg2 = (yt - cy[j]):5)
        (reg3 = (zt - cz[j]):5)
        (reg4 = (wt - cw[j]):5)
        ((*(&d)) = ((((reg1 * reg1):5 + (reg2 * reg2):5):5 + (reg3 * reg3):5):5 + (reg4 * reg4):5):5)
        (mind = d)
        (mini = j)
                
LOOP
        INIT
(j = 0x1)
        COND
(j < 0x2):1
        INCR
(j = (j + 0x1):5)
        BODY
        {
            (reg1 = (xt - cx[j]):5)
            (reg2 = (yt - cy[j]):5)
            (reg3 = (zt - cz[j]):5)
            (reg4 = (wt - cw[j]):5)
            ((*(&d)) = ((((reg1 * reg1):5 + (reg2 * reg2):5):5 + (reg3 * reg3):5):5 + (reg4 * reg4):5):5)
                        branch
                (d < mind):1:
                                        {
                        (mind = d)
                        (mini = j)
                    }
                default:
                                        {
                    }

        }


        (mylcn[mini] = (mylcn[mini] + 0x1):5)
        (mylcx[mini] = (mylcx[mini] + xt):5)
        (mylcy[mini] = (mylcy[mini] + yt):5)
        (mylcz[mini] = (mylcz[mini] + zt):5)
        (mylcw[mini] = (mylcw[mini] + wt):5)
    }


    (trigger[((start / 0xa):5 * 0x200):5] = 0x2)
    commitd

}
FUNCTION: start_iteration
RETURN: void
PARAMETERS:
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0xa):1
    INCR
(i = (i + 0xa):5)
    BODY
    {
        (trigger[((i / 0xa):5 * 0x200):5] = 0x0)
        (tmp1 = ((0x202 * i):5 / 0xa):5)
        (tmp2 = ((tmp1 + 0x2):5 + 0x200):5)
        runner recluster_runner(i, (i + 0xa):5) watching () using (x[i,, (i + 0xa):5], y[i,, (i + 0xa):5], z[i,, (i + 0xa):5], w[i,, (i + 0xa):5], ci[i,, (i + 0xa):5], cx[0x0,, 0x2], cy[0x0,, 0x2], cz[0x0,, 0x2], cw[0x0,, 0x2], trigger[((i / 0xa):5 * 0x200):5,, (((i / 0xa):5 + 0x1):5 * 0x200):5], lcx[tmp1,, tmp2], lcy[tmp1,, tmp2], lcz[tmp1,, tmp2], lcw[tmp1,, tmp2], lcn[tmp1,, tmp2]) in ()
    }


    runner on_recluster_finished(iter) watching (trigger[0x0,, (((0xa / 0xa):5 + 0x1):5 * 0x200):5]) using (iter, cx[0x0,, 0x2], cy[0x0,, 0x2], cz[0x0,, 0x2], cw[0x0,, 0x2], lcx[0x0,, (((0x2 + 0x200):5 * 0xa):5 / 0xa):5], lcy[0x0,, (((0x2 + 0x200):5 * 0xa):5 / 0xa):5], lcz[0x0,, (((0x2 + 0x200):5 * 0xa):5 / 0xa):5], lcw[0x0,, (((0x2 + 0x200):5 * 0xa):5 / 0xa):5], lcn[0x0,, (((0x2 + 0x200):5 * 0xa):5 / 0xa):5]) in ()
        return

}
FUNCTION: on_init1_finished
RETURN: void
PARAMETERS:
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x200):1
    INCR
(i = (i + 0x200):5)
    BODY
    {
                branch
            (trigger[i] != 0x1):1:
                                {
                    abort

                }
            default:
                                {
                }

    }


    (trigger[0x0] = 0x3)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x2):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (cx[i] = x[i])
        (cy[i] = y[i])
        (cz[i] = z[i])
        (cw[i] = w[i])
    }


    (iter = 0x0)
    start_iteration()
    commitd

}
FUNCTION: init_runner
RETURN: void
PARAMETERS:
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
BODY:
{
    srand(0x1)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < start):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (t = input_q())
        (t = input_q())
        (t = input_q())
        (t = input_q())
    }


        
LOOP
    INIT
(i = start)
    COND
(i < end):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (x[i] = input_q())
        (y[i] = input_q())
        (z[i] = input_q())
        (w[i] = input_q())
    }


    (trigger[((start / 0xa):5 * 0x200):5] = 0x1)
    commit

}
FUNCTION: init_runner_stdin
RETURN: void
PARAMETERS:
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < start):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (t = input_q())
        (t = input_q())
        (t = input_q())
        (t = input_q())
    }


        
LOOP
    INIT
(i = start)
    COND
(i < end):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (x[i] = input_q())
        (y[i] = input_q())
        (z[i] = input_q())
        (w[i] = input_q())
    }


        
LOOP
    INIT
(i = start)
    COND
(i < end):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (trigger[((i / 0xa):5 * 0x200):5] = 0x1)
    }


    commit

}
FUNCTION: init0
RETURN: void
PARAMETERS:
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0xa):1
    INCR
(i = (i + 0xa):5)
    BODY
    {
        (trigger[((i / 0xa):5 * 0x200):5] = 0x0)
        runner init_runner(i, (i + 0xa):5) watching () using (x[i,, (i + 0xa):5], y[i,, (i + 0xa):5], z[i,, (i + 0xa):5], w[i,, (i + 0xa):5], trigger[((i / 0xa):5 * 0x200):5,, (((i / 0xa):5 + 0x1):5 * 0x200):5]) in ()
    }


    runner on_init1_finished() watching (trigger[0x0,, (((0xa / 0xa):5 + 0x1):5 * 0x200):5]) using (cx[0x0,, 0x2], cy[0x0,, 0x2], cz[0x0,, 0x2], cw[0x0,, 0x2], x[0x0,, 0x2], y[0x0,, 0x2], z[0x0,, 0x2], w[0x0,, 0x2], trigger[0x0,, 0xa], iter) in ()
    commit

}
FUNCTION: shuffle_runner
RETURN: void
PARAMETERS:
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
BODY:
{
    (partid = (start / 0xa):5)
        
LOOP
    INIT
(i = start)
    COND
(i < end):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (xt = x[i])
        (yt = y[i])
        (zt = z[i])
        (wt = w[i])
        (pmem_in[(0x4 * i):5] = xt)
        (pmem_in[((0x4 * i):5 + 0x1):5] = yt)
        (pmem_in[((0x4 * i):5 + 0x2):5] = zt)
        (pmem_in[((0x4 * i):5 + 0x3):5] = wt)
    }


    (trigger[((start / 0xa):5 * 0x200):5] = 0x2)
    commitd

}
FUNCTION: start_shuffle
RETURN: void
PARAMETERS:
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0xa):1
    INCR
(i = (i + 0xa):5)
    BODY
    {
        (trigger[((i / 0xa):5 * 0x200):5] = 0x0)
        (tmp1 = ((0x202 * i):5 / 0xa):5)
        (tmp2 = ((tmp1 + 0x2):5 + 0x200):5)
        runner shuffle_runner(i, (i + 0xa):5) watching () using (x[i,, (i + 0xa):5], y[i,, (i + 0xa):5], z[i,, (i + 0xa):5], w[i,, (i + 0xa):5], ci[i,, (i + 0xa):5], cx[0x0,, 0x2], cy[0x0,, 0x2], cz[0x0,, 0x2], cw[0x0,, 0x2], trigger[((i / 0xa):5 * 0x200):5,, (((i / 0xa):5 + 0x1):5 * 0x200):5], pmem_in, pmem_in[(0x4 * i):5,, (0x4 * (i + 0xa):5):5], lcx[tmp1,, tmp2], lcy[tmp1,, tmp2], lcz[tmp1,, tmp2], lcw[tmp1,, tmp2], lcn[tmp1,, tmp2]) in ()
    }


        return

}
FUNCTION: on_init1_finished_stdin_only
RETURN: void
PARAMETERS:
BODY:
{
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0x200):1
    INCR
(i = (i + 0x200):5)
    BODY
    {
                branch
            (trigger[i] != 0x1):1:
                                {
                    abort

                }
            default:
                                {
                }

    }


    (trigger[0x0] = 0x3)
    start_shuffle()
    commitd

}
FUNCTION: init0_stdin_only
RETURN: void
PARAMETERS:
BODY:
{
    (pmem_in = 0x40000000000)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < 0xa):1
    INCR
(i = (i + 0xa):5)
    BODY
    {
        (trigger[((i / 0xa):5 * 0x200):5] = 0x0)
    }


    runner init_runner_stdin(0x0, 0xa) watching () using (x[0x0,, 0xa], y[0x0,, 0xa], z[0x0,, 0xa], w[0x0,, 0xa], trigger[((0x0 / 0xa):5 * 0x200):5,, (((0xa / 0xa):5 + 0x1):5 * 0x200):5], pmem_in) in ()
    runner on_init1_finished_stdin_only() watching (trigger[0x0,, (((0xa / 0xa):5 + 0x1):5 * 0x200):5]) using (cx[0x0,, 0x2], cy[0x0,, 0x2], cz[0x0,, 0x2], cw[0x0,, 0x2], x[0x0,, 0x2], y[0x0,, 0x2], z[0x0,, 0x2], w[0x0,, 0x2], trigger[0x0,, 0xa], iter, pmem_in) in ()
    commit

}
FUNCTION: main
RETURN: void
PARAMETERS:
BODY:
{
    runner init0_stdin_only() watching () using (trigger[0x0,, (((0xa / 0xa):5 + 0x1):5 * 0x200):5], pmem_in) in ()
    commit

}
*************************************
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
Optimizing: function START
Optimizing: bnz __temp_1$0x25a30c0, __temp_2$0x25a30c0
Optimizing: br __temp_0$0x25a30c0
Optimizing: __temp_2$0x25a30c0:
Optimizing: mov seed$0x25a2e80, 0x1:i8
Optimizing: __temp_0$0x25a30c0:
Optimizing: sti 0x300000000:i, seed$0x25a2e80
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov r$0x25a8da0, __temp_3$0x25a8da0
Ah ha! I got you! mov after conv instructions -->Good to optimize.
Optimized: ldi r$0x25a8da0, 0x300000000:i
Optimized: nop
Optimizing: mul __temp_4$0x25a8da0, r$0x25a8da0, 0xFEF3F6F4F3F2F1:i8
Optimizing: mov r$0x25a8da0, __temp_4$0x25a8da0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: mul r$0x25a8da0, r$0x25a8da0, 0xFEF3F6F4F3F2F1:i8
Optimized: nop
Optimizing: sti 0x300000000:i, r$0x25a8da0
Optimized: Deleted 2 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mul r$0x25a8da0, r$0x25a8da0, 0xFEF3F6F4F3F2F1:i8
Optimizing: sti 0x300000000:i, r$0x25a8da0
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: call output_q$0x2556d40, <missing>, 0x2:i8
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x63:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x65:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x6E:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x74:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x72:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x6F:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x69:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x64:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x73:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x3A:i1
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: mov i$0x25cc860, 0x0:i8
Optimizing: __temp_5$0x25cc860:
Optimizing: clt __temp_8$0x25cc860, i$0x25cc860, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_8$0x25cc860, __temp_7$0x25cc860
Optimized: ble 0x2:i8, i$0x25cc860, __temp_7$0x25cc860
Optimizing: nop
Optimizing: ldelem __temp_9$0x25d23e0, cx$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_9$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_10$0x25d23e0, cy$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_10$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_11$0x25d23e0, cz$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_11$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_12$0x25d23e0, cw$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_12$0x25d23e0
Optimizing: ceq __temp_14$0x25d23e0, with_point_num$0x25cc630, 0x1:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_14$0x25d23e0, __temp_15$0x25d23e0
Optimized: beq with_point_num$0x25cc630, 0x1:i8, __temp_15$0x25d23e0
Optimizing: nop
Optimizing: br __temp_13$0x25d23e0
Optimizing: __temp_15$0x25d23e0:
Optimizing: call output_char$0x2556d40, <missing>, 0x2F:i1
Optimizing: ldelem __temp_16$0x25d4df0, npt$0x25cc860, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_16$0x25d4df0
Optimizing: __temp_13$0x25d23e0:
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: __temp_6$0x25cc860:
Optimizing: add __temp_17$0x25cc860, i$0x25cc860, 0x1:i8
Optimizing: mov i$0x25cc860, __temp_17$0x25cc860
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x25cc860, i$0x25cc860, 0x1:i8
Optimized: nop
Optimizing: br __temp_5$0x25cc860
Optimizing: __temp_7$0x25cc860:
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimized: Deleted 3 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: call output_q$0x2556d40, <missing>, 0x2:i8
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x63:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x65:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x6E:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x74:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x72:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x6F:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x69:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x64:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x73:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x3A:i1
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: mov i$0x25cc860, 0x0:i8
Optimizing: __temp_5$0x25cc860:
Optimizing: ble 0x2:i8, i$0x25cc860, __temp_7$0x25cc860
Optimizing: ldelem __temp_9$0x25d23e0, cx$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_9$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_10$0x25d23e0, cy$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_10$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_11$0x25d23e0, cz$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_11$0x25d23e0
Optimizing: call output_char$0x2556d40, <missing>, 0x20:i1
Optimizing: ldelem __temp_12$0x25d23e0, cw$0x2556d40, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_12$0x25d23e0
Optimizing: beq with_point_num$0x25cc630, 0x1:i8, __temp_15$0x25d23e0
Optimizing: br __temp_13$0x25d23e0
Optimizing: __temp_15$0x25d23e0:
Optimizing: call output_char$0x2556d40, <missing>, 0x2F:i1
Optimizing: ldelem __temp_16$0x25d4df0, npt$0x25cc860, i$0x25cc860
Optimizing: call output_q$0x2556d40, <missing>, __temp_16$0x25d4df0
Optimizing: __temp_13$0x25d23e0:
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: __temp_6$0x25cc860:
Optimizing: add i$0x25cc860, i$0x25cc860, 0x1:i8
Optimizing: br __temp_5$0x25cc860
Optimizing: __temp_7$0x25cc860:
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_19$0x262c300, __temp_20$0x262c300
Optimizing: br __temp_18$0x262c300
Optimizing: __temp_20$0x262c300:
Optimizing: asm "exit:ad"
Optimizing: __temp_18$0x262c300:
Optimizing: cgt __temp_22$0x262c300, expected_iter$0x262c0e0, iter$0x2556d40
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_22$0x262c300, __temp_23$0x262c300
Optimized: blt iter$0x2556d40, expected_iter$0x262c0e0, __temp_23$0x262c300
Optimizing: nop
Optimizing: br __temp_21$0x262c300
Optimizing: __temp_23$0x262c300:
Optimizing: asm "exit:a"
Optimizing: __temp_21$0x262c300:
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_24$0x262c300:
Optimizing: clt __temp_27$0x262c300, i$0x262c300, 0x200:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_27$0x262c300, __temp_26$0x262c300
Optimized: ble 0x200:i8, i$0x262c300, __temp_26$0x262c300
Optimizing: nop
Optimizing: ldelem __temp_29$0x2631030, trigger$0x2556d40, i$0x262c300
Optimizing: cne __temp_30$0x2631030, __temp_29$0x2631030, 0x2:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_30$0x2631030, __temp_31$0x2631030
Optimized: bne __temp_29$0x2631030, 0x2:i8, __temp_31$0x2631030
Optimizing: nop
Optimizing: br __temp_28$0x2631030
Optimizing: __temp_31$0x2631030:
Optimizing: asm "exit:a"
Optimizing: __temp_28$0x2631030:
Optimizing: __temp_25$0x262c300:
Optimizing: add __temp_32$0x262c300, i$0x262c300, 0x200:i8
Optimizing: mov i$0x262c300, __temp_32$0x262c300
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x262c300, i$0x262c300, 0x200:i8
Optimized: nop
Optimizing: br __temp_24$0x262c300
Optimizing: __temp_26$0x262c300:
Optimizing: mov sumx$0x262c300, 0x300000000:i
Optimizing: mov sumy$0x262c300, 0x300000010:i
Optimizing: mov sumz$0x262c300, 0x300000020:i
Optimizing: mov sumw$0x262c300, 0x300000030:i
Optimizing: mov npt$0x262c300, 0x300000040:i
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_33$0x262c300:
Optimizing: clt __temp_36$0x262c300, i$0x262c300, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_36$0x262c300, __temp_35$0x262c300
Optimized: ble 0x2:i8, i$0x262c300, __temp_35$0x262c300
Optimizing: nop
Optimizing: stelem sumx$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumy$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumz$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumw$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem npt$0x262c300, i$0x262c300, 0x0:i8
Optimizing: __temp_34$0x262c300:
Optimizing: add __temp_37$0x262c300, i$0x262c300, 0x1:i8
Optimizing: mov i$0x262c300, __temp_37$0x262c300
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x262c300, i$0x262c300, 0x1:i8
Optimized: nop
Optimizing: br __temp_33$0x262c300
Optimizing: __temp_35$0x262c300:
Optimizing: mov n_parts$0x262c300, 0x1:i8
Optimizing: mov j$0x262c300, 0x0:i8
Optimizing: __temp_38$0x262c300:
Optimizing: clt __temp_41$0x262c300, j$0x262c300, n_parts$0x262c300
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_41$0x262c300, __temp_40$0x262c300
Optimized: ble n_parts$0x262c300, j$0x262c300, __temp_40$0x262c300
Optimizing: nop
Optimizing: mul __temp_43$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema __temp_42$0x2638e50, lcx$0x2556d40, __temp_43$0x2638e50
Optimizing: mov tlcx$0x262c300, __temp_42$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema tlcx$0x262c300, lcx$0x2556d40, __temp_43$0x2638e50
Optimized: nop
Optimizing: mul __temp_45$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema __temp_44$0x2638e50, lcy$0x2556d40, __temp_45$0x2638e50
Optimizing: mov tlcy$0x262c300, __temp_44$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema tlcy$0x262c300, lcy$0x2556d40, __temp_45$0x2638e50
Optimized: nop
Optimizing: mul __temp_47$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema __temp_46$0x2638e50, lcz$0x2556d40, __temp_47$0x2638e50
Optimizing: mov tlcz$0x262c300, __temp_46$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema tlcz$0x262c300, lcz$0x2556d40, __temp_47$0x2638e50
Optimized: nop
Optimizing: mul __temp_49$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema __temp_48$0x2638e50, lcw$0x2556d40, __temp_49$0x2638e50
Optimizing: mov tlcw$0x262c300, __temp_48$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema tlcw$0x262c300, lcw$0x2556d40, __temp_49$0x2638e50
Optimized: nop
Optimizing: mul __temp_51$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema __temp_50$0x2638e50, lcn$0x2556d40, __temp_51$0x2638e50
Optimizing: mov tlcn$0x262c300, __temp_50$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema tlcn$0x262c300, lcn$0x2556d40, __temp_51$0x2638e50
Optimized: nop
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_52$0x2638e50:
Optimizing: clt __temp_55$0x2638e50, i$0x262c300, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_55$0x2638e50, __temp_54$0x2638e50
Optimized: ble 0x2:i8, i$0x262c300, __temp_54$0x2638e50
Optimizing: nop
Optimizing: ldelem __temp_56$0x263d5a0, sumx$0x262c300, i$0x262c300
Optimizing: ldelem __temp_57$0x263d5a0, tlcx$0x262c300, i$0x262c300
Optimizing: add __temp_58$0x263d5a0, __temp_56$0x263d5a0, __temp_57$0x263d5a0
Optimizing: stelem sumx$0x262c300, i$0x262c300, __temp_58$0x263d5a0
Optimizing: ldelem __temp_59$0x263d5a0, sumy$0x262c300, i$0x262c300
Optimizing: ldelem __temp_60$0x263d5a0, tlcy$0x262c300, i$0x262c300
Optimizing: add __temp_61$0x263d5a0, __temp_59$0x263d5a0, __temp_60$0x263d5a0
Optimizing: stelem sumy$0x262c300, i$0x262c300, __temp_61$0x263d5a0
Optimizing: ldelem __temp_62$0x263d5a0, sumz$0x262c300, i$0x262c300
Optimizing: ldelem __temp_63$0x263d5a0, tlcz$0x262c300, i$0x262c300
Optimizing: add __temp_64$0x263d5a0, __temp_62$0x263d5a0, __temp_63$0x263d5a0
Optimizing: stelem sumz$0x262c300, i$0x262c300, __temp_64$0x263d5a0
Optimizing: ldelem __temp_65$0x263d5a0, sumw$0x262c300, i$0x262c300
Optimizing: ldelem __temp_66$0x263d5a0, tlcw$0x262c300, i$0x262c300
Optimizing: add __temp_67$0x263d5a0, __temp_65$0x263d5a0, __temp_66$0x263d5a0
Optimizing: stelem sumw$0x262c300, i$0x262c300, __temp_67$0x263d5a0
Optimizing: ldelem __temp_68$0x263d5a0, npt$0x262c300, i$0x262c300
Optimizing: ldelem __temp_69$0x263d5a0, tlcn$0x262c300, i$0x262c300
Optimizing: add __temp_70$0x263d5a0, __temp_68$0x263d5a0, __temp_69$0x263d5a0
Optimizing: stelem npt$0x262c300, i$0x262c300, __temp_70$0x263d5a0
Optimizing: __temp_53$0x2638e50:
Optimizing: add __temp_71$0x2638e50, i$0x262c300, 0x1:i8
Optimizing: mov i$0x262c300, __temp_71$0x2638e50
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x262c300, i$0x262c300, 0x1:i8
Optimized: nop
Optimizing: br __temp_52$0x2638e50
Optimizing: __temp_54$0x2638e50:
Optimizing: __temp_39$0x262c300:
Optimizing: add __temp_72$0x262c300, j$0x262c300, 0x1:i8
Optimizing: mov j$0x262c300, __temp_72$0x262c300
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add j$0x262c300, j$0x262c300, 0x1:i8
Optimized: nop
Optimizing: br __temp_38$0x262c300
Optimizing: __temp_40$0x262c300:
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_73$0x262c300:
Optimizing: clt __temp_76$0x262c300, i$0x262c300, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_76$0x262c300, __temp_75$0x262c300
Optimized: ble 0x2:i8, i$0x262c300, __temp_75$0x262c300
Optimizing: nop
Optimizing: ldelem __temp_78$0x2643c60, npt$0x262c300, i$0x262c300
Optimizing: cne __temp_79$0x2643c60, __temp_78$0x2643c60, 0x0:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_79$0x2643c60, __temp_80$0x2643c60
Optimized: bne __temp_78$0x2643c60, 0x0:i8, __temp_80$0x2643c60
Optimizing: nop
Optimizing: stelem cx$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cy$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cz$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cw$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: br __temp_77$0x2643c60
Optimizing: __temp_80$0x2643c60:
Optimizing: ldelem __temp_81$0x2644340, sumx$0x262c300, i$0x262c300
Optimizing: ldelem __temp_82$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_83$0x2644340, __temp_81$0x2644340, __temp_82$0x2644340
Optimizing: stelem cx$0x2556d40, i$0x262c300, __temp_83$0x2644340
Optimizing: ldelem __temp_84$0x2644340, sumy$0x262c300, i$0x262c300
Optimizing: ldelem __temp_85$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_86$0x2644340, __temp_84$0x2644340, __temp_85$0x2644340
Optimizing: stelem cy$0x2556d40, i$0x262c300, __temp_86$0x2644340
Optimizing: ldelem __temp_87$0x2644340, sumz$0x262c300, i$0x262c300
Optimizing: ldelem __temp_88$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_89$0x2644340, __temp_87$0x2644340, __temp_88$0x2644340
Optimizing: stelem cz$0x2556d40, i$0x262c300, __temp_89$0x2644340
Optimizing: ldelem __temp_90$0x2644340, sumw$0x262c300, i$0x262c300
Optimizing: ldelem __temp_91$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_92$0x2644340, __temp_90$0x2644340, __temp_91$0x2644340
Optimizing: stelem cw$0x2556d40, i$0x262c300, __temp_92$0x2644340
Optimizing: __temp_77$0x2643c60:
Optimizing: __temp_74$0x262c300:
Optimizing: add __temp_93$0x262c300, i$0x262c300, 0x1:i8
Optimizing: mov i$0x262c300, __temp_93$0x262c300
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x262c300, i$0x262c300, 0x1:i8
Optimized: nop
Optimizing: br __temp_73$0x262c300
Optimizing: __temp_75$0x262c300:
Optimizing: call output_char$0x2556d40, <missing>, 0x69:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x74:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x65:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x72:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x3A:i1
Optimizing: call output_q$0x2556d40, <missing>, iter$0x2556d40
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: add __temp_94$0x262c300, iter$0x2556d40, 0x1:i8
Optimizing: mov iter$0x2556d40, __temp_94$0x262c300
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add iter$0x2556d40, iter$0x2556d40, 0x1:i8
Optimized: nop
Optimizing: clt __temp_96$0x262c300, iter$0x2556d40, 0x6:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_96$0x262c300, __temp_97$0x262c300
Optimized: blt iter$0x2556d40, 0x6:i8, __temp_97$0x262c300
Optimizing: nop
Optimizing: call kmeans_finish$0x2556d40, <missing>
Optimizing: br __temp_95$0x262c300
Optimizing: __temp_97$0x262c300:
Optimizing: call start_iteration$0x2556d40, <missing>
Optimizing: __temp_95$0x262c300:
Optimized: Deleted 20 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_19$0x262c300, __temp_20$0x262c300
Optimizing: br __temp_18$0x262c300
Optimizing: __temp_20$0x262c300:
Optimizing: asm "exit:ad"
Optimizing: __temp_18$0x262c300:
Optimizing: blt iter$0x2556d40, expected_iter$0x262c0e0, __temp_23$0x262c300
Optimizing: br __temp_21$0x262c300
Optimizing: __temp_23$0x262c300:
Optimizing: asm "exit:a"
Optimizing: __temp_21$0x262c300:
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_24$0x262c300:
Optimizing: ble 0x200:i8, i$0x262c300, __temp_26$0x262c300
Optimizing: ldelem __temp_29$0x2631030, trigger$0x2556d40, i$0x262c300
Optimizing: bne __temp_29$0x2631030, 0x2:i8, __temp_31$0x2631030
Optimizing: br __temp_28$0x2631030
Optimizing: __temp_31$0x2631030:
Optimizing: asm "exit:a"
Optimizing: __temp_28$0x2631030:
Optimizing: __temp_25$0x262c300:
Optimizing: add i$0x262c300, i$0x262c300, 0x200:i8
Optimizing: br __temp_24$0x262c300
Optimizing: __temp_26$0x262c300:
Optimizing: mov sumx$0x262c300, 0x300000000:i
Optimizing: mov sumy$0x262c300, 0x300000010:i
Optimizing: mov sumz$0x262c300, 0x300000020:i
Optimizing: mov sumw$0x262c300, 0x300000030:i
Optimizing: mov npt$0x262c300, 0x300000040:i
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_33$0x262c300:
Optimizing: ble 0x2:i8, i$0x262c300, __temp_35$0x262c300
Optimizing: stelem sumx$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumy$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumz$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem sumw$0x262c300, i$0x262c300, 0x0:i8
Optimizing: stelem npt$0x262c300, i$0x262c300, 0x0:i8
Optimizing: __temp_34$0x262c300:
Optimizing: add i$0x262c300, i$0x262c300, 0x1:i8
Optimizing: br __temp_33$0x262c300
Optimizing: __temp_35$0x262c300:
Optimizing: mov n_parts$0x262c300, 0x1:i8
Optimizing: mov j$0x262c300, 0x0:i8
Optimizing: __temp_38$0x262c300:
Optimizing: ble n_parts$0x262c300, j$0x262c300, __temp_40$0x262c300
Optimizing: mul __temp_43$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema tlcx$0x262c300, lcx$0x2556d40, __temp_43$0x2638e50
Optimizing: mul __temp_45$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema tlcy$0x262c300, lcy$0x2556d40, __temp_45$0x2638e50
Optimizing: mul __temp_47$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema tlcz$0x262c300, lcz$0x2556d40, __temp_47$0x2638e50
Optimizing: mul __temp_49$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema tlcw$0x262c300, lcw$0x2556d40, __temp_49$0x2638e50
Optimizing: mul __temp_51$0x2638e50, 0x202:i8, j$0x262c300
Optimizing: ldelema tlcn$0x262c300, lcn$0x2556d40, __temp_51$0x2638e50
Optimizing: mov i$0x262c300, 0x0:i8
Sadly not okay to optimize.
Optimizing: __temp_52$0x2638e50:
Optimizing: ble 0x2:i8, i$0x262c300, __temp_54$0x2638e50
Optimizing: ldelem __temp_56$0x263d5a0, sumx$0x262c300, i$0x262c300
Optimizing: ldelem __temp_57$0x263d5a0, tlcx$0x262c300, i$0x262c300
Optimizing: add __temp_58$0x263d5a0, __temp_56$0x263d5a0, __temp_57$0x263d5a0
Optimizing: stelem sumx$0x262c300, i$0x262c300, __temp_58$0x263d5a0
Optimizing: ldelem __temp_59$0x263d5a0, sumy$0x262c300, i$0x262c300
Optimizing: ldelem __temp_60$0x263d5a0, tlcy$0x262c300, i$0x262c300
Optimizing: add __temp_61$0x263d5a0, __temp_59$0x263d5a0, __temp_60$0x263d5a0
Optimizing: stelem sumy$0x262c300, i$0x262c300, __temp_61$0x263d5a0
Optimizing: ldelem __temp_62$0x263d5a0, sumz$0x262c300, i$0x262c300
Optimizing: ldelem __temp_63$0x263d5a0, tlcz$0x262c300, i$0x262c300
Optimizing: add __temp_64$0x263d5a0, __temp_62$0x263d5a0, __temp_63$0x263d5a0
Optimizing: stelem sumz$0x262c300, i$0x262c300, __temp_64$0x263d5a0
Optimizing: ldelem __temp_65$0x263d5a0, sumw$0x262c300, i$0x262c300
Optimizing: ldelem __temp_66$0x263d5a0, tlcw$0x262c300, i$0x262c300
Optimizing: add __temp_67$0x263d5a0, __temp_65$0x263d5a0, __temp_66$0x263d5a0
Optimizing: stelem sumw$0x262c300, i$0x262c300, __temp_67$0x263d5a0
Optimizing: ldelem __temp_68$0x263d5a0, npt$0x262c300, i$0x262c300
Optimizing: ldelem __temp_69$0x263d5a0, tlcn$0x262c300, i$0x262c300
Optimizing: add __temp_70$0x263d5a0, __temp_68$0x263d5a0, __temp_69$0x263d5a0
Optimizing: stelem npt$0x262c300, i$0x262c300, __temp_70$0x263d5a0
Optimizing: __temp_53$0x2638e50:
Optimizing: add i$0x262c300, i$0x262c300, 0x1:i8
Optimizing: br __temp_52$0x2638e50
Optimizing: __temp_54$0x2638e50:
Optimizing: __temp_39$0x262c300:
Optimizing: add j$0x262c300, j$0x262c300, 0x1:i8
Optimizing: br __temp_38$0x262c300
Optimizing: __temp_40$0x262c300:
Optimizing: mov i$0x262c300, 0x0:i8
Optimizing: __temp_73$0x262c300:
Optimizing: ble 0x2:i8, i$0x262c300, __temp_75$0x262c300
Optimizing: ldelem __temp_78$0x2643c60, npt$0x262c300, i$0x262c300
Optimizing: bne __temp_78$0x2643c60, 0x0:i8, __temp_80$0x2643c60
Optimizing: stelem cx$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cy$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cz$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: stelem cw$0x2556d40, i$0x262c300, 0x7FFFFFFFFFFFFFF:i8
Optimizing: br __temp_77$0x2643c60
Optimizing: __temp_80$0x2643c60:
Optimizing: ldelem __temp_81$0x2644340, sumx$0x262c300, i$0x262c300
Optimizing: ldelem __temp_82$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_83$0x2644340, __temp_81$0x2644340, __temp_82$0x2644340
Optimizing: stelem cx$0x2556d40, i$0x262c300, __temp_83$0x2644340
Optimizing: ldelem __temp_84$0x2644340, sumy$0x262c300, i$0x262c300
Optimizing: ldelem __temp_85$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_86$0x2644340, __temp_84$0x2644340, __temp_85$0x2644340
Optimizing: stelem cy$0x2556d40, i$0x262c300, __temp_86$0x2644340
Optimizing: ldelem __temp_87$0x2644340, sumz$0x262c300, i$0x262c300
Optimizing: ldelem __temp_88$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_89$0x2644340, __temp_87$0x2644340, __temp_88$0x2644340
Optimizing: stelem cz$0x2556d40, i$0x262c300, __temp_89$0x2644340
Optimizing: ldelem __temp_90$0x2644340, sumw$0x262c300, i$0x262c300
Optimizing: ldelem __temp_91$0x2644340, npt$0x262c300, i$0x262c300
Optimizing: div __temp_92$0x2644340, __temp_90$0x2644340, __temp_91$0x2644340
Optimizing: stelem cw$0x2556d40, i$0x262c300, __temp_92$0x2644340
Optimizing: __temp_77$0x2643c60:
Optimizing: __temp_74$0x262c300:
Optimizing: add i$0x262c300, i$0x262c300, 0x1:i8
Optimizing: br __temp_73$0x262c300
Optimizing: __temp_75$0x262c300:
Optimizing: call output_char$0x2556d40, <missing>, 0x69:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x74:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x65:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x72:i1
Optimizing: call output_char$0x2556d40, <missing>, 0x3A:i1
Optimizing: call output_q$0x2556d40, <missing>, iter$0x2556d40
Optimizing: call output_char$0x2556d40, <missing>, 0xA:i8
Optimizing: add iter$0x2556d40, iter$0x2556d40, 0x1:i8
Optimizing: blt iter$0x2556d40, 0x6:i8, __temp_97$0x262c300
Optimizing: call kmeans_finish$0x2556d40, <missing>
Optimizing: br __temp_95$0x262c300
Optimizing: __temp_97$0x262c300:
Optimizing: call start_iteration$0x2556d40, <missing>
Optimizing: __temp_95$0x262c300:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov partid$0x268f420, __temp_98$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: div partid$0x268f420, start$0x268f180, 0xA:i8
Optimized: nop
Optimizing: mul __temp_100$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema __temp_99$0x268f420, lcx$0x2556d40, __temp_100$0x268f420
Optimizing: mov mylcx$0x268f420, __temp_99$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema mylcx$0x268f420, lcx$0x2556d40, __temp_100$0x268f420
Optimized: nop
Optimizing: mul __temp_102$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema __temp_101$0x268f420, lcy$0x2556d40, __temp_102$0x268f420
Optimizing: mov mylcy$0x268f420, __temp_101$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema mylcy$0x268f420, lcy$0x2556d40, __temp_102$0x268f420
Optimized: nop
Optimizing: mul __temp_104$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema __temp_103$0x268f420, lcz$0x2556d40, __temp_104$0x268f420
Optimizing: mov mylcz$0x268f420, __temp_103$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema mylcz$0x268f420, lcz$0x2556d40, __temp_104$0x268f420
Optimized: nop
Optimizing: mul __temp_106$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema __temp_105$0x268f420, lcw$0x2556d40, __temp_106$0x268f420
Optimizing: mov mylcw$0x268f420, __temp_105$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema mylcw$0x268f420, lcw$0x2556d40, __temp_106$0x268f420
Optimized: nop
Optimizing: mul __temp_108$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema __temp_107$0x268f420, lcn$0x2556d40, __temp_108$0x268f420
Optimizing: mov mylcn$0x268f420, __temp_107$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelema mylcn$0x268f420, lcn$0x2556d40, __temp_108$0x268f420
Optimized: nop
Optimizing: mov i$0x268f420, 0x0:i8
Optimizing: __temp_109$0x268f420:
Optimizing: clt __temp_112$0x268f420, i$0x268f420, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_112$0x268f420, __temp_111$0x268f420
Optimized: ble 0x2:i8, i$0x268f420, __temp_111$0x268f420
Optimizing: nop
Optimizing: stelem mylcx$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcy$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcz$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcw$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcn$0x268f420, i$0x268f420, 0x0:i8
Optimizing: __temp_110$0x268f420:
Optimizing: add __temp_113$0x268f420, i$0x268f420, 0x1:i8
Optimizing: mov i$0x268f420, __temp_113$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x268f420, i$0x268f420, 0x1:i8
Optimized: nop
Optimizing: br __temp_109$0x268f420
Optimizing: __temp_111$0x268f420:
Optimizing: mov i$0x268f420, start$0x268f180
Optimizing: __temp_114$0x268f420:
Optimizing: clt __temp_117$0x268f420, i$0x268f420, end$0x268f180
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_117$0x268f420, __temp_116$0x268f420
Optimized: ble end$0x268f180, i$0x268f420, __temp_116$0x268f420
Optimizing: nop
Optimizing: ldelem __temp_118$0x2699800, x$0x2556d40, i$0x268f420
Optimizing: mov xt$0x268f420, __temp_118$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem xt$0x268f420, x$0x2556d40, i$0x268f420
Optimized: nop
Optimizing: ldelem __temp_119$0x2699800, y$0x2556d40, i$0x268f420
Optimizing: mov yt$0x268f420, __temp_119$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem yt$0x268f420, y$0x2556d40, i$0x268f420
Optimized: nop
Optimizing: ldelem __temp_120$0x2699800, z$0x2556d40, i$0x268f420
Optimizing: mov zt$0x268f420, __temp_120$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem zt$0x268f420, z$0x2556d40, i$0x268f420
Optimized: nop
Optimizing: ldelem __temp_121$0x2699800, w$0x2556d40, i$0x268f420
Optimizing: mov wt$0x268f420, __temp_121$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem wt$0x268f420, w$0x2556d40, i$0x268f420
Optimized: nop
Optimizing: mov j$0x268f420, 0x0:i8
Optimizing: ldelem __temp_122$0x2699800, cx$0x2556d40, j$0x268f420
Optimizing: sub __temp_123$0x2699800, xt$0x268f420, __temp_122$0x2699800
Optimizing: mov reg1$0x2556d40, __temp_123$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg1$0x2556d40, xt$0x268f420, __temp_122$0x2699800
Optimized: nop
Optimizing: ldelem __temp_124$0x2699800, cy$0x2556d40, j$0x268f420
Optimizing: sub __temp_125$0x2699800, yt$0x268f420, __temp_124$0x2699800
Optimizing: mov reg2$0x2556d40, __temp_125$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg2$0x2556d40, yt$0x268f420, __temp_124$0x2699800
Optimized: nop
Optimizing: ldelem __temp_126$0x2699800, cz$0x2556d40, j$0x268f420
Optimizing: sub __temp_127$0x2699800, zt$0x268f420, __temp_126$0x2699800
Optimizing: mov reg3$0x2556d40, __temp_127$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg3$0x2556d40, zt$0x268f420, __temp_126$0x2699800
Optimized: nop
Optimizing: ldelem __temp_128$0x2699800, cw$0x2556d40, j$0x268f420
Optimizing: sub __temp_129$0x2699800, wt$0x268f420, __temp_128$0x2699800
Optimizing: mov reg4$0x2556d40, __temp_129$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg4$0x2556d40, wt$0x268f420, __temp_128$0x2699800
Optimized: nop
Optimizing: mul __temp_130$0x2699800, reg1$0x2556d40, reg1$0x2556d40
Optimizing: mul __temp_131$0x2699800, reg2$0x2556d40, reg2$0x2556d40
Optimizing: add __temp_132$0x2699800, __temp_130$0x2699800, __temp_131$0x2699800
Optimizing: mul __temp_133$0x2699800, reg3$0x2556d40, reg3$0x2556d40
Optimizing: add __temp_134$0x2699800, __temp_132$0x2699800, __temp_133$0x2699800
Optimizing: mul __temp_135$0x2699800, reg4$0x2556d40, reg4$0x2556d40
Optimizing: add __temp_136$0x2699800, __temp_134$0x2699800, __temp_135$0x2699800
Optimizing: lda __temp_137$0x2699800, d$0x268f420
Optimizing: sti __temp_137$0x2699800, __temp_136$0x2699800
Optimizing: mov mind$0x268f420, d$0x268f420
Optimizing: mov mini$0x268f420, j$0x268f420
Optimizing: mov j$0x268f420, 0x1:i8
Optimizing: __temp_138$0x2699800:
Optimizing: clt __temp_141$0x2699800, j$0x268f420, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_141$0x2699800, __temp_140$0x2699800
Optimized: ble 0x2:i8, j$0x268f420, __temp_140$0x2699800
Optimizing: nop
Optimizing: ldelem __temp_142$0x269fb60, cx$0x2556d40, j$0x268f420
Optimizing: sub __temp_143$0x269fb60, xt$0x268f420, __temp_142$0x269fb60
Optimizing: mov reg1$0x2556d40, __temp_143$0x269fb60
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg1$0x2556d40, xt$0x268f420, __temp_142$0x269fb60
Optimized: nop
Optimizing: ldelem __temp_144$0x269fb60, cy$0x2556d40, j$0x268f420
Optimizing: sub __temp_145$0x269fb60, yt$0x268f420, __temp_144$0x269fb60
Optimizing: mov reg2$0x2556d40, __temp_145$0x269fb60
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg2$0x2556d40, yt$0x268f420, __temp_144$0x269fb60
Optimized: nop
Optimizing: ldelem __temp_146$0x269fb60, cz$0x2556d40, j$0x268f420
Optimizing: sub __temp_147$0x269fb60, zt$0x268f420, __temp_146$0x269fb60
Optimizing: mov reg3$0x2556d40, __temp_147$0x269fb60
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg3$0x2556d40, zt$0x268f420, __temp_146$0x269fb60
Optimized: nop
Optimizing: ldelem __temp_148$0x269fb60, cw$0x2556d40, j$0x268f420
Optimizing: sub __temp_149$0x269fb60, wt$0x268f420, __temp_148$0x269fb60
Optimizing: mov reg4$0x2556d40, __temp_149$0x269fb60
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub reg4$0x2556d40, wt$0x268f420, __temp_148$0x269fb60
Optimized: nop
Optimizing: mul __temp_150$0x269fb60, reg1$0x2556d40, reg1$0x2556d40
Optimizing: mul __temp_151$0x269fb60, reg2$0x2556d40, reg2$0x2556d40
Optimizing: add __temp_152$0x269fb60, __temp_150$0x269fb60, __temp_151$0x269fb60
Optimizing: mul __temp_153$0x269fb60, reg3$0x2556d40, reg3$0x2556d40
Optimizing: add __temp_154$0x269fb60, __temp_152$0x269fb60, __temp_153$0x269fb60
Optimizing: mul __temp_155$0x269fb60, reg4$0x2556d40, reg4$0x2556d40
Optimizing: add __temp_156$0x269fb60, __temp_154$0x269fb60, __temp_155$0x269fb60
Optimizing: lda __temp_157$0x269fb60, d$0x268f420
Optimizing: sti __temp_157$0x269fb60, __temp_156$0x269fb60
Optimizing: clt __temp_159$0x269fb60, d$0x268f420, mind$0x268f420
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_159$0x269fb60, __temp_160$0x269fb60
Optimized: blt d$0x268f420, mind$0x268f420, __temp_160$0x269fb60
Optimizing: nop
Optimizing: br __temp_158$0x269fb60
Optimizing: __temp_160$0x269fb60:
Optimizing: mov mind$0x268f420, d$0x268f420
Optimizing: mov mini$0x268f420, j$0x268f420
Optimizing: __temp_158$0x269fb60:
Optimizing: __temp_139$0x2699800:
Optimizing: add __temp_161$0x2699800, j$0x268f420, 0x1:i8
Optimizing: mov j$0x268f420, __temp_161$0x2699800
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add j$0x268f420, j$0x268f420, 0x1:i8
Optimized: nop
Optimizing: br __temp_138$0x2699800
Optimizing: __temp_140$0x2699800:
Optimizing: ldelem __temp_162$0x2699800, mylcn$0x268f420, mini$0x268f420
Optimizing: add __temp_163$0x2699800, __temp_162$0x2699800, 0x1:i8
Optimizing: stelem mylcn$0x268f420, mini$0x268f420, __temp_163$0x2699800
Optimizing: ldelem __temp_164$0x2699800, mylcx$0x268f420, mini$0x268f420
Optimizing: add __temp_165$0x2699800, __temp_164$0x2699800, xt$0x268f420
Optimizing: stelem mylcx$0x268f420, mini$0x268f420, __temp_165$0x2699800
Optimizing: ldelem __temp_166$0x2699800, mylcy$0x268f420, mini$0x268f420
Optimizing: add __temp_167$0x2699800, __temp_166$0x2699800, yt$0x268f420
Optimizing: stelem mylcy$0x268f420, mini$0x268f420, __temp_167$0x2699800
Optimizing: ldelem __temp_168$0x2699800, mylcz$0x268f420, mini$0x268f420
Optimizing: add __temp_169$0x2699800, __temp_168$0x2699800, zt$0x268f420
Optimizing: stelem mylcz$0x268f420, mini$0x268f420, __temp_169$0x2699800
Optimizing: ldelem __temp_170$0x2699800, mylcw$0x268f420, mini$0x268f420
Optimizing: add __temp_171$0x2699800, __temp_170$0x2699800, wt$0x268f420
Optimizing: stelem mylcw$0x268f420, mini$0x268f420, __temp_171$0x2699800
Optimizing: __temp_115$0x268f420:
Optimizing: add __temp_172$0x268f420, i$0x268f420, 0x1:i8
Optimizing: mov i$0x268f420, __temp_172$0x268f420
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x268f420, i$0x268f420, 0x1:i8
Optimized: nop
Optimizing: br __temp_114$0x268f420
Optimizing: __temp_116$0x268f420:
Optimizing: div __temp_173$0x268f420, start$0x268f180, 0xA:i8
Optimizing: mul __temp_174$0x268f420, __temp_173$0x268f420, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_174$0x268f420, 0x2:i8
Optimized: Deleted 25 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mul __temp_100$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema mylcx$0x268f420, lcx$0x2556d40, __temp_100$0x268f420
Optimizing: mul __temp_102$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema mylcy$0x268f420, lcy$0x2556d40, __temp_102$0x268f420
Optimizing: mul __temp_104$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema mylcz$0x268f420, lcz$0x2556d40, __temp_104$0x268f420
Optimizing: mul __temp_106$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema mylcw$0x268f420, lcw$0x2556d40, __temp_106$0x268f420
Optimizing: mul __temp_108$0x268f420, 0x202:i8, partid$0x268f420
Optimizing: ldelema mylcn$0x268f420, lcn$0x2556d40, __temp_108$0x268f420
Optimizing: mov i$0x268f420, 0x0:i8
Sadly not okay to optimize.
Optimizing: __temp_109$0x268f420:
Optimizing: ble 0x2:i8, i$0x268f420, __temp_111$0x268f420
Optimizing: stelem mylcx$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcy$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcz$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcw$0x268f420, i$0x268f420, 0x0:i8
Optimizing: stelem mylcn$0x268f420, i$0x268f420, 0x0:i8
Optimizing: __temp_110$0x268f420:
Optimizing: add i$0x268f420, i$0x268f420, 0x1:i8
Optimizing: br __temp_109$0x268f420
Optimizing: __temp_111$0x268f420:
Optimizing: mov i$0x268f420, start$0x268f180
Optimizing: __temp_114$0x268f420:
Optimizing: ble end$0x268f180, i$0x268f420, __temp_116$0x268f420
Optimizing: ldelem xt$0x268f420, x$0x2556d40, i$0x268f420
Optimizing: ldelem yt$0x268f420, y$0x2556d40, i$0x268f420
Optimizing: ldelem zt$0x268f420, z$0x2556d40, i$0x268f420
Optimizing: ldelem wt$0x268f420, w$0x2556d40, i$0x268f420
Optimizing: mov j$0x268f420, 0x0:i8
Sadly not okay to optimize.
Optimizing: ldelem __temp_122$0x2699800, cx$0x2556d40, j$0x268f420
Optimizing: sub reg1$0x2556d40, xt$0x268f420, __temp_122$0x2699800
Optimizing: ldelem __temp_124$0x2699800, cy$0x2556d40, j$0x268f420
Optimizing: sub reg2$0x2556d40, yt$0x268f420, __temp_124$0x2699800
Optimizing: ldelem __temp_126$0x2699800, cz$0x2556d40, j$0x268f420
Optimizing: sub reg3$0x2556d40, zt$0x268f420, __temp_126$0x2699800
Optimizing: ldelem __temp_128$0x2699800, cw$0x2556d40, j$0x268f420
Optimizing: sub reg4$0x2556d40, wt$0x268f420, __temp_128$0x2699800
Optimizing: mul __temp_130$0x2699800, reg1$0x2556d40, reg1$0x2556d40
Optimizing: mul __temp_131$0x2699800, reg2$0x2556d40, reg2$0x2556d40
Optimizing: add __temp_132$0x2699800, __temp_130$0x2699800, __temp_131$0x2699800
Optimizing: mul __temp_133$0x2699800, reg3$0x2556d40, reg3$0x2556d40
Optimizing: add __temp_134$0x2699800, __temp_132$0x2699800, __temp_133$0x2699800
Optimizing: mul __temp_135$0x2699800, reg4$0x2556d40, reg4$0x2556d40
Optimizing: add __temp_136$0x2699800, __temp_134$0x2699800, __temp_135$0x2699800
Optimizing: lda __temp_137$0x2699800, d$0x268f420
Optimizing: sti __temp_137$0x2699800, __temp_136$0x2699800
Optimizing: mov mind$0x268f420, d$0x268f420
Optimizing: mov mini$0x268f420, j$0x268f420
Optimizing: mov j$0x268f420, 0x1:i8
Optimizing: __temp_138$0x2699800:
Optimizing: ble 0x2:i8, j$0x268f420, __temp_140$0x2699800
Optimizing: ldelem __temp_142$0x269fb60, cx$0x2556d40, j$0x268f420
Optimizing: sub reg1$0x2556d40, xt$0x268f420, __temp_142$0x269fb60
Optimizing: ldelem __temp_144$0x269fb60, cy$0x2556d40, j$0x268f420
Optimizing: sub reg2$0x2556d40, yt$0x268f420, __temp_144$0x269fb60
Optimizing: ldelem __temp_146$0x269fb60, cz$0x2556d40, j$0x268f420
Optimizing: sub reg3$0x2556d40, zt$0x268f420, __temp_146$0x269fb60
Optimizing: ldelem __temp_148$0x269fb60, cw$0x2556d40, j$0x268f420
Optimizing: sub reg4$0x2556d40, wt$0x268f420, __temp_148$0x269fb60
Optimizing: mul __temp_150$0x269fb60, reg1$0x2556d40, reg1$0x2556d40
Optimizing: mul __temp_151$0x269fb60, reg2$0x2556d40, reg2$0x2556d40
Optimizing: add __temp_152$0x269fb60, __temp_150$0x269fb60, __temp_151$0x269fb60
Optimizing: mul __temp_153$0x269fb60, reg3$0x2556d40, reg3$0x2556d40
Optimizing: add __temp_154$0x269fb60, __temp_152$0x269fb60, __temp_153$0x269fb60
Optimizing: mul __temp_155$0x269fb60, reg4$0x2556d40, reg4$0x2556d40
Optimizing: add __temp_156$0x269fb60, __temp_154$0x269fb60, __temp_155$0x269fb60
Optimizing: lda __temp_157$0x269fb60, d$0x268f420
Optimizing: sti __temp_157$0x269fb60, __temp_156$0x269fb60
Optimizing: blt d$0x268f420, mind$0x268f420, __temp_160$0x269fb60
Optimizing: br __temp_158$0x269fb60
Optimizing: __temp_160$0x269fb60:
Optimizing: mov mind$0x268f420, d$0x268f420
Optimizing: mov mini$0x268f420, j$0x268f420
Optimizing: __temp_158$0x269fb60:
Optimizing: __temp_139$0x2699800:
Optimizing: add j$0x268f420, j$0x268f420, 0x1:i8
Optimizing: br __temp_138$0x2699800
Optimizing: __temp_140$0x2699800:
Optimizing: ldelem __temp_162$0x2699800, mylcn$0x268f420, mini$0x268f420
Optimizing: add __temp_163$0x2699800, __temp_162$0x2699800, 0x1:i8
Optimizing: stelem mylcn$0x268f420, mini$0x268f420, __temp_163$0x2699800
Optimizing: ldelem __temp_164$0x2699800, mylcx$0x268f420, mini$0x268f420
Optimizing: add __temp_165$0x2699800, __temp_164$0x2699800, xt$0x268f420
Optimizing: stelem mylcx$0x268f420, mini$0x268f420, __temp_165$0x2699800
Optimizing: ldelem __temp_166$0x2699800, mylcy$0x268f420, mini$0x268f420
Optimizing: add __temp_167$0x2699800, __temp_166$0x2699800, yt$0x268f420
Optimizing: stelem mylcy$0x268f420, mini$0x268f420, __temp_167$0x2699800
Optimizing: ldelem __temp_168$0x2699800, mylcz$0x268f420, mini$0x268f420
Optimizing: add __temp_169$0x2699800, __temp_168$0x2699800, zt$0x268f420
Optimizing: stelem mylcz$0x268f420, mini$0x268f420, __temp_169$0x2699800
Optimizing: ldelem __temp_170$0x2699800, mylcw$0x268f420, mini$0x268f420
Optimizing: add __temp_171$0x2699800, __temp_170$0x2699800, wt$0x268f420
Optimizing: stelem mylcw$0x268f420, mini$0x268f420, __temp_171$0x2699800
Optimizing: __temp_115$0x268f420:
Optimizing: add i$0x268f420, i$0x268f420, 0x1:i8
Optimizing: br __temp_114$0x268f420
Optimizing: __temp_116$0x268f420:
Optimizing: div __temp_173$0x268f420, start$0x268f180, 0xA:i8
Optimizing: mul __temp_174$0x268f420, __temp_173$0x268f420, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_174$0x268f420, 0x2:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_175$0x26e7a40:
Optimizing: clt __temp_178$0x26e7a40, i$0x26e7a40, 0xA:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_178$0x26e7a40, __temp_177$0x26e7a40
Optimized: ble 0xA:i8, i$0x26e7a40, __temp_177$0x26e7a40
Optimizing: nop
Optimizing: div __temp_179$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: mul __temp_180$0x26e9440, __temp_179$0x26e9440, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_180$0x26e9440, 0x0:i8
Optimizing: mul __temp_181$0x26e9440, 0x202:i8, i$0x26e7a40
Optimizing: div __temp_182$0x26e9440, __temp_181$0x26e9440, 0xA:i8
Optimizing: mov tmp1$0x26e7a40, __temp_182$0x26e9440
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: div tmp1$0x26e7a40, __temp_181$0x26e9440, 0xA:i8
Optimized: nop
Optimizing: add __temp_183$0x26e9440, tmp1$0x26e7a40, 0x2:i8
Optimizing: add __temp_184$0x26e9440, __temp_183$0x26e9440, 0x200:i8
Optimizing: mov tmp2$0x26e7a40, __temp_184$0x26e9440
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add tmp2$0x26e7a40, __temp_183$0x26e9440, 0x200:i8
Optimized: nop
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xf:msq, 0x200001010:msq"
Optimizing: add __temp_190$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_188$0x26e9440, x$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_189$0x26e9440, __temp_190$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_189$0x26e9440, 0x8:i, __temp_189$0x26e9440
Optimizing: sti 0x200001018:i, __temp_188$0x26e9440
Optimizing: sti 0x200001020:i, __temp_189$0x26e9440
Optimizing: add __temp_193$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_191$0x26e9440, y$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_192$0x26e9440, __temp_193$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_192$0x26e9440, 0x8:i, __temp_192$0x26e9440
Optimizing: sti 0x200001028:i, __temp_191$0x26e9440
Optimizing: sti 0x200001030:i, __temp_192$0x26e9440
Optimizing: add __temp_196$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_194$0x26e9440, z$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_195$0x26e9440, __temp_196$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_195$0x26e9440, 0x8:i, __temp_195$0x26e9440
Optimizing: sti 0x200001038:i, __temp_194$0x26e9440
Optimizing: sti 0x200001040:i, __temp_195$0x26e9440
Optimizing: add __temp_199$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_197$0x26e9440, w$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_198$0x26e9440, __temp_199$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_198$0x26e9440, 0x8:i, __temp_198$0x26e9440
Optimizing: sti 0x200001048:i, __temp_197$0x26e9440
Optimizing: sti 0x200001050:i, __temp_198$0x26e9440
Optimizing: add __temp_202$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_200$0x26e9440, ci$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_201$0x26e9440, __temp_202$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_201$0x26e9440, 0x8:i, __temp_201$0x26e9440
Optimizing: sti 0x200001058:i, __temp_200$0x26e9440
Optimizing: sti 0x200001060:i, __temp_201$0x26e9440
Optimizing: ldelema __temp_203$0x26e9440, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_204$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_204$0x26e9440, 0x8:i, __temp_204$0x26e9440
Optimizing: sti 0x200001068:i, __temp_203$0x26e9440
Optimizing: sti 0x200001070:i, __temp_204$0x26e9440
Optimizing: ldelema __temp_205$0x26e9440, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_206$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_206$0x26e9440, 0x8:i, __temp_206$0x26e9440
Optimizing: sti 0x200001078:i, __temp_205$0x26e9440
Optimizing: sti 0x200001080:i, __temp_206$0x26e9440
Optimizing: ldelema __temp_207$0x26e9440, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_208$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_208$0x26e9440, 0x8:i, __temp_208$0x26e9440
Optimizing: sti 0x200001088:i, __temp_207$0x26e9440
Optimizing: sti 0x200001090:i, __temp_208$0x26e9440
Optimizing: ldelema __temp_209$0x26e9440, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_210$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_210$0x26e9440, 0x8:i, __temp_210$0x26e9440
Optimizing: sti 0x200001098:i, __temp_209$0x26e9440
Optimizing: sti 0x2000010A0:i, __temp_210$0x26e9440
Optimizing: div __temp_213$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: mul __temp_214$0x26e9440, __temp_213$0x26e9440, 0x200:i8
Optimizing: div __temp_215$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: add __temp_216$0x26e9440, __temp_215$0x26e9440, 0x1:i8
Optimizing: mul __temp_217$0x26e9440, __temp_216$0x26e9440, 0x200:i8
Optimizing: ldelema __temp_211$0x26e9440, trigger$0x2556d40, __temp_214$0x26e9440
Optimizing: sub __temp_212$0x26e9440, __temp_217$0x26e9440, __temp_214$0x26e9440
Optimizing: mul __temp_212$0x26e9440, 0x8:i, __temp_212$0x26e9440
Optimizing: sti 0x2000010A8:i, __temp_211$0x26e9440
Optimizing: sti 0x2000010B0:i, __temp_212$0x26e9440
Optimizing: ldelema __temp_218$0x26e9440, lcx$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_219$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_219$0x26e9440, 0x8:i, __temp_219$0x26e9440
Optimizing: sti 0x2000010B8:i, __temp_218$0x26e9440
Optimizing: sti 0x2000010C0:i, __temp_219$0x26e9440
Optimizing: ldelema __temp_220$0x26e9440, lcy$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_221$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_221$0x26e9440, 0x8:i, __temp_221$0x26e9440
Optimizing: sti 0x2000010C8:i, __temp_220$0x26e9440
Optimizing: sti 0x2000010D0:i, __temp_221$0x26e9440
Optimizing: ldelema __temp_222$0x26e9440, lcz$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_223$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_223$0x26e9440, 0x8:i, __temp_223$0x26e9440
Optimizing: sti 0x2000010D8:i, __temp_222$0x26e9440
Optimizing: sti 0x2000010E0:i, __temp_223$0x26e9440
Optimizing: ldelema __temp_224$0x26e9440, lcw$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_225$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_225$0x26e9440, 0x8:i, __temp_225$0x26e9440
Optimizing: sti 0x2000010E8:i, __temp_224$0x26e9440
Optimizing: sti 0x2000010F0:i, __temp_225$0x26e9440
Optimizing: ldelema __temp_226$0x26e9440, lcn$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_227$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_227$0x26e9440, 0x8:i, __temp_227$0x26e9440
Optimizing: sti 0x2000010F8:i, __temp_226$0x26e9440
Optimizing: sti 0x200001100:i, __temp_227$0x26e9440
Optimizing: asm "mov $0x0:msq, 0x200001108:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001110:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001118:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001120:msq"
Optimizing: asm "mov $0x200001108:msq, 0x200001128:msq"
Optimizing: asm "mov $0x200001110:msq, 0x200001130:msq"
Optimizing: asm "newr 0x200001118, 0x200001120, 0x200001128, 0x200001130"
Optimizing: ldi __temp_185$0x26e9440, 0x100000400:i
Optimizing: ldi __temp_186$0x26e9440, 0x100000408:i
Optimizing: add __temp_187$0x26e9440, __temp_185$0x26e9440, __temp_186$0x26e9440
Optimizing: lda __temp_228$0x26e9440, recluster_runner$0x2556d40
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, __temp_228$0x26e9440
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, 0x10:i8
Optimizing: add __temp_229$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, __temp_229$0x26e9440
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, i$0x26e7a40
Optimizing: __temp_176$0x26e7a40:
Optimizing: add __temp_230$0x26e7a40, i$0x26e7a40, 0xA:i8
Optimizing: mov i$0x26e7a40, __temp_230$0x26e7a40
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x26e7a40, i$0x26e7a40, 0xA:i8
Optimized: nop
Optimizing: br __temp_175$0x26e7a40
Optimizing: __temp_177$0x26e7a40:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xa:msq, 0x200001010:msq"
Optimizing: lda __temp_234$0x26e7a40, iter$0x2556d40
Optimizing: mov __temp_235$0x26e7a40, 0x8:i
Optimizing: sti 0x200001018:i, __temp_234$0x26e7a40
Optimizing: sti 0x200001020:i, __temp_235$0x26e7a40
Optimizing: ldelema __temp_236$0x26e7a40, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_237$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_237$0x26e7a40, 0x8:i, __temp_237$0x26e7a40
Optimizing: sti 0x200001028:i, __temp_236$0x26e7a40
Optimizing: sti 0x200001030:i, __temp_237$0x26e7a40
Optimizing: ldelema __temp_238$0x26e7a40, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_239$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_239$0x26e7a40, 0x8:i, __temp_239$0x26e7a40
Optimizing: sti 0x200001038:i, __temp_238$0x26e7a40
Optimizing: sti 0x200001040:i, __temp_239$0x26e7a40
Optimizing: ldelema __temp_240$0x26e7a40, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_241$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_241$0x26e7a40, 0x8:i, __temp_241$0x26e7a40
Optimizing: sti 0x200001048:i, __temp_240$0x26e7a40
Optimizing: sti 0x200001050:i, __temp_241$0x26e7a40
Optimizing: ldelema __temp_242$0x26e7a40, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_243$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_243$0x26e7a40, 0x8:i, __temp_243$0x26e7a40
Optimizing: sti 0x200001058:i, __temp_242$0x26e7a40
Optimizing: sti 0x200001060:i, __temp_243$0x26e7a40
Optimizing: add __temp_246$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_247$0x26e7a40, __temp_246$0x26e7a40, 0xA:i8
Optimizing: div __temp_248$0x26e7a40, __temp_247$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_244$0x26e7a40, lcx$0x2556d40, 0x0:i8
Optimizing: sub __temp_245$0x26e7a40, __temp_248$0x26e7a40, 0x0:i8
Optimizing: mul __temp_245$0x26e7a40, 0x8:i, __temp_245$0x26e7a40
Optimizing: sti 0x200001068:i, __temp_244$0x26e7a40
Optimizing: sti 0x200001070:i, __temp_245$0x26e7a40
Optimizing: add __temp_251$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_252$0x26e7a40, __temp_251$0x26e7a40, 0xA:i8
Optimizing: div __temp_253$0x26e7a40, __temp_252$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_249$0x26e7a40, lcy$0x2556d40, 0x0:i8
Optimizing: sub __temp_250$0x26e7a40, __temp_253$0x26e7a40, 0x0:i8
Optimizing: mul __temp_250$0x26e7a40, 0x8:i, __temp_250$0x26e7a40
Optimizing: sti 0x200001078:i, __temp_249$0x26e7a40
Optimizing: sti 0x200001080:i, __temp_250$0x26e7a40
Optimizing: add __temp_256$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_257$0x26e7a40, __temp_256$0x26e7a40, 0xA:i8
Optimizing: div __temp_258$0x26e7a40, __temp_257$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_254$0x26e7a40, lcz$0x2556d40, 0x0:i8
Optimizing: sub __temp_255$0x26e7a40, __temp_258$0x26e7a40, 0x0:i8
Optimizing: mul __temp_255$0x26e7a40, 0x8:i, __temp_255$0x26e7a40
Optimizing: sti 0x200001088:i, __temp_254$0x26e7a40
Optimizing: sti 0x200001090:i, __temp_255$0x26e7a40
Optimizing: add __temp_261$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_262$0x26e7a40, __temp_261$0x26e7a40, 0xA:i8
Optimizing: div __temp_263$0x26e7a40, __temp_262$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_259$0x26e7a40, lcw$0x2556d40, 0x0:i8
Optimizing: sub __temp_260$0x26e7a40, __temp_263$0x26e7a40, 0x0:i8
Optimizing: mul __temp_260$0x26e7a40, 0x8:i, __temp_260$0x26e7a40
Optimizing: sti 0x200001098:i, __temp_259$0x26e7a40
Optimizing: sti 0x2000010A0:i, __temp_260$0x26e7a40
Optimizing: add __temp_266$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_267$0x26e7a40, __temp_266$0x26e7a40, 0xA:i8
Optimizing: div __temp_268$0x26e7a40, __temp_267$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_264$0x26e7a40, lcn$0x2556d40, 0x0:i8
Optimizing: sub __temp_265$0x26e7a40, __temp_268$0x26e7a40, 0x0:i8
Optimizing: mul __temp_265$0x26e7a40, 0x8:i, __temp_265$0x26e7a40
Optimizing: sti 0x2000010A8:i, __temp_264$0x26e7a40
Optimizing: sti 0x2000010B0:i, __temp_265$0x26e7a40
Optimizing: asm "mov $0x1:msq, 0x2000010b8:msq"
Optimizing: div __temp_271$0x26e7a40, 0xA:i8, 0xA:i8
Optimizing: add __temp_272$0x26e7a40, __temp_271$0x26e7a40, 0x1:i8
Optimizing: mul __temp_273$0x26e7a40, __temp_272$0x26e7a40, 0x200:i8
Optimizing: ldelema __temp_269$0x26e7a40, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_270$0x26e7a40, __temp_273$0x26e7a40, 0x0:i8
Optimizing: mul __temp_270$0x26e7a40, 0x8:i, __temp_270$0x26e7a40
Optimizing: sti 0x2000010C0:i, __temp_269$0x26e7a40
Optimizing: sti 0x2000010C8:i, __temp_270$0x26e7a40
Optimizing: asm "mov $__newr0:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x2000010d0:msq, 0x2000010f0:msq"
Optimizing: asm "newr 0x2000010d8, 0x2000010e0, 0x2000010e8, 0x2000010f0"
Optimizing: ldi __temp_231$0x26e7a40, 0x100000400:i
Optimizing: ldi __temp_232$0x26e7a40, 0x100000408:i
Optimizing: add __temp_233$0x26e7a40, __temp_231$0x26e7a40, __temp_232$0x26e7a40
Optimizing: lda __temp_274$0x26e7a40, on_recluster_finished$0x2556d40
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, __temp_274$0x26e7a40
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, 0x8:i8
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, iter$0x2556d40
Optimized: Deleted 4 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_175$0x26e7a40:
Optimizing: ble 0xA:i8, i$0x26e7a40, __temp_177$0x26e7a40
Optimizing: div __temp_179$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: mul __temp_180$0x26e9440, __temp_179$0x26e9440, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_180$0x26e9440, 0x0:i8
Optimizing: mul __temp_181$0x26e9440, 0x202:i8, i$0x26e7a40
Optimizing: div tmp1$0x26e7a40, __temp_181$0x26e9440, 0xA:i8
Optimizing: add __temp_183$0x26e9440, tmp1$0x26e7a40, 0x2:i8
Optimizing: add tmp2$0x26e7a40, __temp_183$0x26e9440, 0x200:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xf:msq, 0x200001010:msq"
Optimizing: add __temp_190$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_188$0x26e9440, x$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_189$0x26e9440, __temp_190$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_189$0x26e9440, 0x8:i, __temp_189$0x26e9440
Optimizing: sti 0x200001018:i, __temp_188$0x26e9440
Optimizing: sti 0x200001020:i, __temp_189$0x26e9440
Optimizing: add __temp_193$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_191$0x26e9440, y$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_192$0x26e9440, __temp_193$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_192$0x26e9440, 0x8:i, __temp_192$0x26e9440
Optimizing: sti 0x200001028:i, __temp_191$0x26e9440
Optimizing: sti 0x200001030:i, __temp_192$0x26e9440
Optimizing: add __temp_196$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_194$0x26e9440, z$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_195$0x26e9440, __temp_196$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_195$0x26e9440, 0x8:i, __temp_195$0x26e9440
Optimizing: sti 0x200001038:i, __temp_194$0x26e9440
Optimizing: sti 0x200001040:i, __temp_195$0x26e9440
Optimizing: add __temp_199$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_197$0x26e9440, w$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_198$0x26e9440, __temp_199$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_198$0x26e9440, 0x8:i, __temp_198$0x26e9440
Optimizing: sti 0x200001048:i, __temp_197$0x26e9440
Optimizing: sti 0x200001050:i, __temp_198$0x26e9440
Optimizing: add __temp_202$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_200$0x26e9440, ci$0x2556d40, i$0x26e7a40
Optimizing: sub __temp_201$0x26e9440, __temp_202$0x26e9440, i$0x26e7a40
Optimizing: mul __temp_201$0x26e9440, 0x8:i, __temp_201$0x26e9440
Optimizing: sti 0x200001058:i, __temp_200$0x26e9440
Optimizing: sti 0x200001060:i, __temp_201$0x26e9440
Optimizing: ldelema __temp_203$0x26e9440, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_204$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_204$0x26e9440, 0x8:i, __temp_204$0x26e9440
Optimizing: sti 0x200001068:i, __temp_203$0x26e9440
Optimizing: sti 0x200001070:i, __temp_204$0x26e9440
Optimizing: ldelema __temp_205$0x26e9440, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_206$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_206$0x26e9440, 0x8:i, __temp_206$0x26e9440
Optimizing: sti 0x200001078:i, __temp_205$0x26e9440
Optimizing: sti 0x200001080:i, __temp_206$0x26e9440
Optimizing: ldelema __temp_207$0x26e9440, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_208$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_208$0x26e9440, 0x8:i, __temp_208$0x26e9440
Optimizing: sti 0x200001088:i, __temp_207$0x26e9440
Optimizing: sti 0x200001090:i, __temp_208$0x26e9440
Optimizing: ldelema __temp_209$0x26e9440, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_210$0x26e9440, 0x2:i8, 0x0:i8
Optimizing: mul __temp_210$0x26e9440, 0x8:i, __temp_210$0x26e9440
Optimizing: sti 0x200001098:i, __temp_209$0x26e9440
Optimizing: sti 0x2000010A0:i, __temp_210$0x26e9440
Optimizing: div __temp_213$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: mul __temp_214$0x26e9440, __temp_213$0x26e9440, 0x200:i8
Optimizing: div __temp_215$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: add __temp_216$0x26e9440, __temp_215$0x26e9440, 0x1:i8
Optimizing: mul __temp_217$0x26e9440, __temp_216$0x26e9440, 0x200:i8
Optimizing: ldelema __temp_211$0x26e9440, trigger$0x2556d40, __temp_214$0x26e9440
Optimizing: sub __temp_212$0x26e9440, __temp_217$0x26e9440, __temp_214$0x26e9440
Optimizing: mul __temp_212$0x26e9440, 0x8:i, __temp_212$0x26e9440
Optimizing: sti 0x2000010A8:i, __temp_211$0x26e9440
Optimizing: sti 0x2000010B0:i, __temp_212$0x26e9440
Optimizing: ldelema __temp_218$0x26e9440, lcx$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_219$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_219$0x26e9440, 0x8:i, __temp_219$0x26e9440
Optimizing: sti 0x2000010B8:i, __temp_218$0x26e9440
Optimizing: sti 0x2000010C0:i, __temp_219$0x26e9440
Optimizing: ldelema __temp_220$0x26e9440, lcy$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_221$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_221$0x26e9440, 0x8:i, __temp_221$0x26e9440
Optimizing: sti 0x2000010C8:i, __temp_220$0x26e9440
Optimizing: sti 0x2000010D0:i, __temp_221$0x26e9440
Optimizing: ldelema __temp_222$0x26e9440, lcz$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_223$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_223$0x26e9440, 0x8:i, __temp_223$0x26e9440
Optimizing: sti 0x2000010D8:i, __temp_222$0x26e9440
Optimizing: sti 0x2000010E0:i, __temp_223$0x26e9440
Optimizing: ldelema __temp_224$0x26e9440, lcw$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_225$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_225$0x26e9440, 0x8:i, __temp_225$0x26e9440
Optimizing: sti 0x2000010E8:i, __temp_224$0x26e9440
Optimizing: sti 0x2000010F0:i, __temp_225$0x26e9440
Optimizing: ldelema __temp_226$0x26e9440, lcn$0x2556d40, tmp1$0x26e7a40
Optimizing: sub __temp_227$0x26e9440, tmp2$0x26e7a40, tmp1$0x26e7a40
Optimizing: mul __temp_227$0x26e9440, 0x8:i, __temp_227$0x26e9440
Optimizing: sti 0x2000010F8:i, __temp_226$0x26e9440
Optimizing: sti 0x200001100:i, __temp_227$0x26e9440
Optimizing: asm "mov $0x0:msq, 0x200001108:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001110:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001118:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001120:msq"
Optimizing: asm "mov $0x200001108:msq, 0x200001128:msq"
Optimizing: asm "mov $0x200001110:msq, 0x200001130:msq"
Optimizing: asm "newr 0x200001118, 0x200001120, 0x200001128, 0x200001130"
Optimizing: ldi __temp_185$0x26e9440, 0x100000400:i
Optimizing: ldi __temp_186$0x26e9440, 0x100000408:i
Optimizing: add __temp_187$0x26e9440, __temp_185$0x26e9440, __temp_186$0x26e9440
Optimizing: lda __temp_228$0x26e9440, recluster_runner$0x2556d40
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, __temp_228$0x26e9440
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, 0x10:i8
Optimizing: add __temp_229$0x26e9440, i$0x26e7a40, 0xA:i8
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, __temp_229$0x26e9440
Optimizing: sub __temp_187$0x26e9440, __temp_187$0x26e9440, 0x8:i8
Optimizing: sti __temp_187$0x26e9440, i$0x26e7a40
Optimizing: __temp_176$0x26e7a40:
Optimizing: add i$0x26e7a40, i$0x26e7a40, 0xA:i8
Optimizing: br __temp_175$0x26e7a40
Optimizing: __temp_177$0x26e7a40:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xa:msq, 0x200001010:msq"
Optimizing: lda __temp_234$0x26e7a40, iter$0x2556d40
Optimizing: mov __temp_235$0x26e7a40, 0x8:i
Optimizing: sti 0x200001018:i, __temp_234$0x26e7a40
Optimizing: sti 0x200001020:i, __temp_235$0x26e7a40
Optimizing: ldelema __temp_236$0x26e7a40, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_237$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_237$0x26e7a40, 0x8:i, __temp_237$0x26e7a40
Optimizing: sti 0x200001028:i, __temp_236$0x26e7a40
Optimizing: sti 0x200001030:i, __temp_237$0x26e7a40
Optimizing: ldelema __temp_238$0x26e7a40, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_239$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_239$0x26e7a40, 0x8:i, __temp_239$0x26e7a40
Optimizing: sti 0x200001038:i, __temp_238$0x26e7a40
Optimizing: sti 0x200001040:i, __temp_239$0x26e7a40
Optimizing: ldelema __temp_240$0x26e7a40, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_241$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_241$0x26e7a40, 0x8:i, __temp_241$0x26e7a40
Optimizing: sti 0x200001048:i, __temp_240$0x26e7a40
Optimizing: sti 0x200001050:i, __temp_241$0x26e7a40
Optimizing: ldelema __temp_242$0x26e7a40, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_243$0x26e7a40, 0x2:i8, 0x0:i8
Optimizing: mul __temp_243$0x26e7a40, 0x8:i, __temp_243$0x26e7a40
Optimizing: sti 0x200001058:i, __temp_242$0x26e7a40
Optimizing: sti 0x200001060:i, __temp_243$0x26e7a40
Optimizing: add __temp_246$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_247$0x26e7a40, __temp_246$0x26e7a40, 0xA:i8
Optimizing: div __temp_248$0x26e7a40, __temp_247$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_244$0x26e7a40, lcx$0x2556d40, 0x0:i8
Optimizing: sub __temp_245$0x26e7a40, __temp_248$0x26e7a40, 0x0:i8
Optimizing: mul __temp_245$0x26e7a40, 0x8:i, __temp_245$0x26e7a40
Optimizing: sti 0x200001068:i, __temp_244$0x26e7a40
Optimizing: sti 0x200001070:i, __temp_245$0x26e7a40
Optimizing: add __temp_251$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_252$0x26e7a40, __temp_251$0x26e7a40, 0xA:i8
Optimizing: div __temp_253$0x26e7a40, __temp_252$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_249$0x26e7a40, lcy$0x2556d40, 0x0:i8
Optimizing: sub __temp_250$0x26e7a40, __temp_253$0x26e7a40, 0x0:i8
Optimizing: mul __temp_250$0x26e7a40, 0x8:i, __temp_250$0x26e7a40
Optimizing: sti 0x200001078:i, __temp_249$0x26e7a40
Optimizing: sti 0x200001080:i, __temp_250$0x26e7a40
Optimizing: add __temp_256$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_257$0x26e7a40, __temp_256$0x26e7a40, 0xA:i8
Optimizing: div __temp_258$0x26e7a40, __temp_257$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_254$0x26e7a40, lcz$0x2556d40, 0x0:i8
Optimizing: sub __temp_255$0x26e7a40, __temp_258$0x26e7a40, 0x0:i8
Optimizing: mul __temp_255$0x26e7a40, 0x8:i, __temp_255$0x26e7a40
Optimizing: sti 0x200001088:i, __temp_254$0x26e7a40
Optimizing: sti 0x200001090:i, __temp_255$0x26e7a40
Optimizing: add __temp_261$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_262$0x26e7a40, __temp_261$0x26e7a40, 0xA:i8
Optimizing: div __temp_263$0x26e7a40, __temp_262$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_259$0x26e7a40, lcw$0x2556d40, 0x0:i8
Optimizing: sub __temp_260$0x26e7a40, __temp_263$0x26e7a40, 0x0:i8
Optimizing: mul __temp_260$0x26e7a40, 0x8:i, __temp_260$0x26e7a40
Optimizing: sti 0x200001098:i, __temp_259$0x26e7a40
Optimizing: sti 0x2000010A0:i, __temp_260$0x26e7a40
Optimizing: add __temp_266$0x26e7a40, 0x2:i8, 0x200:i8
Optimizing: mul __temp_267$0x26e7a40, __temp_266$0x26e7a40, 0xA:i8
Optimizing: div __temp_268$0x26e7a40, __temp_267$0x26e7a40, 0xA:i8
Optimizing: ldelema __temp_264$0x26e7a40, lcn$0x2556d40, 0x0:i8
Optimizing: sub __temp_265$0x26e7a40, __temp_268$0x26e7a40, 0x0:i8
Optimizing: mul __temp_265$0x26e7a40, 0x8:i, __temp_265$0x26e7a40
Optimizing: sti 0x2000010A8:i, __temp_264$0x26e7a40
Optimizing: sti 0x2000010B0:i, __temp_265$0x26e7a40
Optimizing: asm "mov $0x1:msq, 0x2000010b8:msq"
Optimizing: div __temp_271$0x26e7a40, 0xA:i8, 0xA:i8
Optimizing: add __temp_272$0x26e7a40, __temp_271$0x26e7a40, 0x1:i8
Optimizing: mul __temp_273$0x26e7a40, __temp_272$0x26e7a40, 0x200:i8
Optimizing: ldelema __temp_269$0x26e7a40, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_270$0x26e7a40, __temp_273$0x26e7a40, 0x0:i8
Optimizing: mul __temp_270$0x26e7a40, 0x8:i, __temp_270$0x26e7a40
Optimizing: sti 0x2000010C0:i, __temp_269$0x26e7a40
Optimizing: sti 0x2000010C8:i, __temp_270$0x26e7a40
Optimizing: asm "mov $__newr0:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x2000010d0:msq, 0x2000010f0:msq"
Optimizing: asm "newr 0x2000010d8, 0x2000010e0, 0x2000010e8, 0x2000010f0"
Optimizing: ldi __temp_231$0x26e7a40, 0x100000400:i
Optimizing: ldi __temp_232$0x26e7a40, 0x100000408:i
Optimizing: add __temp_233$0x26e7a40, __temp_231$0x26e7a40, __temp_232$0x26e7a40
Optimizing: lda __temp_274$0x26e7a40, on_recluster_finished$0x2556d40
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, __temp_274$0x26e7a40
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, 0x8:i8
Optimizing: sub __temp_233$0x26e7a40, __temp_233$0x26e7a40, 0x8:i8
Optimizing: sti __temp_233$0x26e7a40, iter$0x2556d40
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_275$0x2708610:
Optimizing: clt __temp_278$0x2708610, i$0x2708610, 0x200:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_278$0x2708610, __temp_277$0x2708610
Optimized: ble 0x200:i8, i$0x2708610, __temp_277$0x2708610
Optimizing: nop
Optimizing: ldelem __temp_280$0x2709cf0, trigger$0x2556d40, i$0x2708610
Optimizing: cne __temp_281$0x2709cf0, __temp_280$0x2709cf0, 0x1:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_281$0x2709cf0, __temp_282$0x2709cf0
Optimized: bne __temp_280$0x2709cf0, 0x1:i8, __temp_282$0x2709cf0
Optimizing: nop
Optimizing: br __temp_279$0x2709cf0
Optimizing: __temp_282$0x2709cf0:
Optimizing: asm "exit:a"
Optimizing: __temp_279$0x2709cf0:
Optimizing: __temp_276$0x2708610:
Optimizing: add __temp_283$0x2708610, i$0x2708610, 0x200:i8
Optimizing: mov i$0x2708610, __temp_283$0x2708610
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2708610, i$0x2708610, 0x200:i8
Optimized: nop
Optimizing: br __temp_275$0x2708610
Optimizing: __temp_277$0x2708610:
Optimizing: stelem trigger$0x2556d40, 0x0:i8, 0x3:i8
Optimizing: mov i$0x2708610, 0x0:i8
Optimizing: __temp_284$0x2708610:
Optimizing: clt __temp_287$0x2708610, i$0x2708610, 0x2:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_287$0x2708610, __temp_286$0x2708610
Optimized: ble 0x2:i8, i$0x2708610, __temp_286$0x2708610
Optimizing: nop
Optimizing: ldelem __temp_288$0x270bb90, x$0x2556d40, i$0x2708610
Optimizing: stelem cx$0x2556d40, i$0x2708610, __temp_288$0x270bb90
Optimizing: ldelem __temp_289$0x270bb90, y$0x2556d40, i$0x2708610
Optimizing: stelem cy$0x2556d40, i$0x2708610, __temp_289$0x270bb90
Optimizing: ldelem __temp_290$0x270bb90, z$0x2556d40, i$0x2708610
Optimizing: stelem cz$0x2556d40, i$0x2708610, __temp_290$0x270bb90
Optimizing: ldelem __temp_291$0x270bb90, w$0x2556d40, i$0x2708610
Optimizing: stelem cw$0x2556d40, i$0x2708610, __temp_291$0x270bb90
Optimizing: __temp_285$0x2708610:
Optimizing: add __temp_292$0x2708610, i$0x2708610, 0x1:i8
Optimizing: mov i$0x2708610, __temp_292$0x2708610
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2708610, i$0x2708610, 0x1:i8
Optimized: nop
Optimizing: br __temp_284$0x2708610
Optimizing: __temp_286$0x2708610:
Optimizing: mov iter$0x2556d40, 0x0:i8
Optimizing: call start_iteration$0x2556d40, <missing>
Optimized: Deleted 5 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_275$0x2708610:
Optimizing: ble 0x200:i8, i$0x2708610, __temp_277$0x2708610
Optimizing: ldelem __temp_280$0x2709cf0, trigger$0x2556d40, i$0x2708610
Optimizing: bne __temp_280$0x2709cf0, 0x1:i8, __temp_282$0x2709cf0
Optimizing: br __temp_279$0x2709cf0
Optimizing: __temp_282$0x2709cf0:
Optimizing: asm "exit:a"
Optimizing: __temp_279$0x2709cf0:
Optimizing: __temp_276$0x2708610:
Optimizing: add i$0x2708610, i$0x2708610, 0x200:i8
Optimizing: br __temp_275$0x2708610
Optimizing: __temp_277$0x2708610:
Optimizing: stelem trigger$0x2556d40, 0x0:i8, 0x3:i8
Optimizing: mov i$0x2708610, 0x0:i8
Optimizing: __temp_284$0x2708610:
Optimizing: ble 0x2:i8, i$0x2708610, __temp_286$0x2708610
Optimizing: ldelem __temp_288$0x270bb90, x$0x2556d40, i$0x2708610
Optimizing: stelem cx$0x2556d40, i$0x2708610, __temp_288$0x270bb90
Optimizing: ldelem __temp_289$0x270bb90, y$0x2556d40, i$0x2708610
Optimizing: stelem cy$0x2556d40, i$0x2708610, __temp_289$0x270bb90
Optimizing: ldelem __temp_290$0x270bb90, z$0x2556d40, i$0x2708610
Optimizing: stelem cz$0x2556d40, i$0x2708610, __temp_290$0x270bb90
Optimizing: ldelem __temp_291$0x270bb90, w$0x2556d40, i$0x2708610
Optimizing: stelem cw$0x2556d40, i$0x2708610, __temp_291$0x270bb90
Optimizing: __temp_285$0x2708610:
Optimizing: add i$0x2708610, i$0x2708610, 0x1:i8
Optimizing: br __temp_284$0x2708610
Optimizing: __temp_286$0x2708610:
Optimizing: mov iter$0x2556d40, 0x0:i8
Optimizing: call start_iteration$0x2556d40, <missing>
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov i$0x2721880, 0x0:i8
Optimizing: __temp_293$0x2721880:
Optimizing: clt __temp_296$0x2721880, i$0x2721880, start$0x27215e0
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_296$0x2721880, __temp_295$0x2721880
Optimized: ble start$0x27215e0, i$0x2721880, __temp_295$0x2721880
Optimizing: nop
Optimizing: call input_q$0x2556d40, __temp_297$0x27233c0
Optimizing: mov t$0x2721880, __temp_297$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_298$0x27233c0
Optimizing: mov t$0x2721880, __temp_298$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_299$0x27233c0
Optimizing: mov t$0x2721880, __temp_299$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_300$0x27233c0
Optimizing: mov t$0x2721880, __temp_300$0x27233c0
Optimizing: __temp_294$0x2721880:
Optimizing: add __temp_301$0x2721880, i$0x2721880, 0x1:i8
Optimizing: mov i$0x2721880, __temp_301$0x2721880
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2721880, i$0x2721880, 0x1:i8
Optimized: nop
Optimizing: br __temp_293$0x2721880
Optimizing: __temp_295$0x2721880:
Optimizing: mov i$0x2721880, start$0x27215e0
Optimizing: __temp_302$0x2721880:
Optimizing: clt __temp_305$0x2721880, i$0x2721880, end$0x27215e0
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_305$0x2721880, __temp_304$0x2721880
Optimized: ble end$0x27215e0, i$0x2721880, __temp_304$0x2721880
Optimizing: nop
Optimizing: call input_q$0x2556d40, __temp_306$0x2725230
Optimizing: stelem x$0x2556d40, i$0x2721880, __temp_306$0x2725230
Optimizing: call input_q$0x2556d40, __temp_307$0x2725230
Optimizing: stelem y$0x2556d40, i$0x2721880, __temp_307$0x2725230
Optimizing: call input_q$0x2556d40, __temp_308$0x2725230
Optimizing: stelem z$0x2556d40, i$0x2721880, __temp_308$0x2725230
Optimizing: call input_q$0x2556d40, __temp_309$0x2725230
Optimizing: stelem w$0x2556d40, i$0x2721880, __temp_309$0x2725230
Optimizing: __temp_303$0x2721880:
Optimizing: add __temp_310$0x2721880, i$0x2721880, 0x1:i8
Optimizing: mov i$0x2721880, __temp_310$0x2721880
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2721880, i$0x2721880, 0x1:i8
Optimized: nop
Optimizing: br __temp_302$0x2721880
Optimizing: __temp_304$0x2721880:
Optimizing: div __temp_311$0x2721880, start$0x27215e0, 0xA:i8
Optimizing: mul __temp_312$0x2721880, __temp_311$0x2721880, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_312$0x2721880, 0x1:i8
Optimized: Deleted 4 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov i$0x2721880, 0x0:i8
Optimizing: __temp_293$0x2721880:
Optimizing: ble start$0x27215e0, i$0x2721880, __temp_295$0x2721880
Optimizing: call input_q$0x2556d40, __temp_297$0x27233c0
Optimizing: mov t$0x2721880, __temp_297$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_298$0x27233c0
Optimizing: mov t$0x2721880, __temp_298$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_299$0x27233c0
Optimizing: mov t$0x2721880, __temp_299$0x27233c0
Optimizing: call input_q$0x2556d40, __temp_300$0x27233c0
Optimizing: mov t$0x2721880, __temp_300$0x27233c0
Optimizing: __temp_294$0x2721880:
Optimizing: add i$0x2721880, i$0x2721880, 0x1:i8
Optimizing: br __temp_293$0x2721880
Optimizing: __temp_295$0x2721880:
Optimizing: mov i$0x2721880, start$0x27215e0
Optimizing: __temp_302$0x2721880:
Optimizing: ble end$0x27215e0, i$0x2721880, __temp_304$0x2721880
Optimizing: call input_q$0x2556d40, __temp_306$0x2725230
Optimizing: stelem x$0x2556d40, i$0x2721880, __temp_306$0x2725230
Optimizing: call input_q$0x2556d40, __temp_307$0x2725230
Optimizing: stelem y$0x2556d40, i$0x2721880, __temp_307$0x2725230
Optimizing: call input_q$0x2556d40, __temp_308$0x2725230
Optimizing: stelem z$0x2556d40, i$0x2721880, __temp_308$0x2725230
Optimizing: call input_q$0x2556d40, __temp_309$0x2725230
Optimizing: stelem w$0x2556d40, i$0x2721880, __temp_309$0x2725230
Optimizing: __temp_303$0x2721880:
Optimizing: add i$0x2721880, i$0x2721880, 0x1:i8
Optimizing: br __temp_302$0x2721880
Optimizing: __temp_304$0x2721880:
Optimizing: div __temp_311$0x2721880, start$0x27215e0, 0xA:i8
Optimizing: mul __temp_312$0x2721880, __temp_311$0x2721880, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_312$0x2721880, 0x1:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_313$0x2738010:
Optimizing: clt __temp_316$0x2738010, i$0x2738010, start$0x2737d70
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_316$0x2738010, __temp_315$0x2738010
Optimized: ble start$0x2737d70, i$0x2738010, __temp_315$0x2738010
Optimizing: nop
Optimizing: call input_q$0x2556d40, __temp_317$0x27395f0
Optimizing: mov t$0x2738010, __temp_317$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_318$0x27395f0
Optimizing: mov t$0x2738010, __temp_318$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_319$0x27395f0
Optimizing: mov t$0x2738010, __temp_319$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_320$0x27395f0
Optimizing: mov t$0x2738010, __temp_320$0x27395f0
Optimizing: __temp_314$0x2738010:
Optimizing: add __temp_321$0x2738010, i$0x2738010, 0x1:i8
Optimizing: mov i$0x2738010, __temp_321$0x2738010
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2738010, i$0x2738010, 0x1:i8
Optimized: nop
Optimizing: br __temp_313$0x2738010
Optimizing: __temp_315$0x2738010:
Optimizing: mov i$0x2738010, start$0x2737d70
Optimizing: __temp_322$0x2738010:
Optimizing: clt __temp_325$0x2738010, i$0x2738010, end$0x2737d70
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_325$0x2738010, __temp_324$0x2738010
Optimized: ble end$0x2737d70, i$0x2738010, __temp_324$0x2738010
Optimizing: nop
Optimizing: call input_q$0x2556d40, __temp_326$0x273b480
Optimizing: stelem x$0x2556d40, i$0x2738010, __temp_326$0x273b480
Optimizing: call input_q$0x2556d40, __temp_327$0x273b480
Optimizing: stelem y$0x2556d40, i$0x2738010, __temp_327$0x273b480
Optimizing: call input_q$0x2556d40, __temp_328$0x273b480
Optimizing: stelem z$0x2556d40, i$0x2738010, __temp_328$0x273b480
Optimizing: call input_q$0x2556d40, __temp_329$0x273b480
Optimizing: stelem w$0x2556d40, i$0x2738010, __temp_329$0x273b480
Optimizing: __temp_323$0x2738010:
Optimizing: add __temp_330$0x2738010, i$0x2738010, 0x1:i8
Optimizing: mov i$0x2738010, __temp_330$0x2738010
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2738010, i$0x2738010, 0x1:i8
Optimized: nop
Optimizing: br __temp_322$0x2738010
Optimizing: __temp_324$0x2738010:
Optimizing: mov i$0x2738010, start$0x2737d70
Optimizing: __temp_331$0x2738010:
Optimizing: clt __temp_334$0x2738010, i$0x2738010, end$0x2737d70
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_334$0x2738010, __temp_333$0x2738010
Optimized: ble end$0x2737d70, i$0x2738010, __temp_333$0x2738010
Optimizing: nop
Optimizing: div __temp_335$0x273da50, i$0x2738010, 0xA:i8
Optimizing: mul __temp_336$0x273da50, __temp_335$0x273da50, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_336$0x273da50, 0x1:i8
Optimizing: __temp_332$0x2738010:
Optimizing: add __temp_337$0x2738010, i$0x2738010, 0x1:i8
Optimizing: mov i$0x2738010, __temp_337$0x2738010
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2738010, i$0x2738010, 0x1:i8
Optimized: nop
Optimizing: br __temp_331$0x2738010
Optimizing: __temp_333$0x2738010:
Optimized: Deleted 6 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_313$0x2738010:
Optimizing: ble start$0x2737d70, i$0x2738010, __temp_315$0x2738010
Optimizing: call input_q$0x2556d40, __temp_317$0x27395f0
Optimizing: mov t$0x2738010, __temp_317$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_318$0x27395f0
Optimizing: mov t$0x2738010, __temp_318$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_319$0x27395f0
Optimizing: mov t$0x2738010, __temp_319$0x27395f0
Optimizing: call input_q$0x2556d40, __temp_320$0x27395f0
Optimizing: mov t$0x2738010, __temp_320$0x27395f0
Optimizing: __temp_314$0x2738010:
Optimizing: add i$0x2738010, i$0x2738010, 0x1:i8
Optimizing: br __temp_313$0x2738010
Optimizing: __temp_315$0x2738010:
Optimizing: mov i$0x2738010, start$0x2737d70
Optimizing: __temp_322$0x2738010:
Optimizing: ble end$0x2737d70, i$0x2738010, __temp_324$0x2738010
Optimizing: call input_q$0x2556d40, __temp_326$0x273b480
Optimizing: stelem x$0x2556d40, i$0x2738010, __temp_326$0x273b480
Optimizing: call input_q$0x2556d40, __temp_327$0x273b480
Optimizing: stelem y$0x2556d40, i$0x2738010, __temp_327$0x273b480
Optimizing: call input_q$0x2556d40, __temp_328$0x273b480
Optimizing: stelem z$0x2556d40, i$0x2738010, __temp_328$0x273b480
Optimizing: call input_q$0x2556d40, __temp_329$0x273b480
Optimizing: stelem w$0x2556d40, i$0x2738010, __temp_329$0x273b480
Optimizing: __temp_323$0x2738010:
Optimizing: add i$0x2738010, i$0x2738010, 0x1:i8
Optimizing: br __temp_322$0x2738010
Optimizing: __temp_324$0x2738010:
Optimizing: mov i$0x2738010, start$0x2737d70
Optimizing: __temp_331$0x2738010:
Optimizing: ble end$0x2737d70, i$0x2738010, __temp_333$0x2738010
Optimizing: div __temp_335$0x273da50, i$0x2738010, 0xA:i8
Optimizing: mul __temp_336$0x273da50, __temp_335$0x273da50, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_336$0x273da50, 0x1:i8
Optimizing: __temp_332$0x2738010:
Optimizing: add i$0x2738010, i$0x2738010, 0x1:i8
Optimizing: br __temp_331$0x2738010
Optimizing: __temp_333$0x2738010:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_338$0x2762d20:
Optimizing: clt __temp_341$0x2762d20, i$0x2762d20, 0xA:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_341$0x2762d20, __temp_340$0x2762d20
Optimized: ble 0xA:i8, i$0x2762d20, __temp_340$0x2762d20
Optimizing: nop
Optimizing: div __temp_342$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: mul __temp_343$0x2763f90, __temp_342$0x2763f90, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_343$0x2763f90, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x5:msq, 0x200001010:msq"
Optimizing: add __temp_349$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_347$0x2763f90, x$0x2556d40, i$0x2762d20
Optimizing: sub __temp_348$0x2763f90, __temp_349$0x2763f90, i$0x2762d20
Optimizing: mul __temp_348$0x2763f90, 0x8:i, __temp_348$0x2763f90
Optimizing: sti 0x200001018:i, __temp_347$0x2763f90
Optimizing: sti 0x200001020:i, __temp_348$0x2763f90
Optimizing: add __temp_352$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_350$0x2763f90, y$0x2556d40, i$0x2762d20
Optimizing: sub __temp_351$0x2763f90, __temp_352$0x2763f90, i$0x2762d20
Optimizing: mul __temp_351$0x2763f90, 0x8:i, __temp_351$0x2763f90
Optimizing: sti 0x200001028:i, __temp_350$0x2763f90
Optimizing: sti 0x200001030:i, __temp_351$0x2763f90
Optimizing: add __temp_355$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_353$0x2763f90, z$0x2556d40, i$0x2762d20
Optimizing: sub __temp_354$0x2763f90, __temp_355$0x2763f90, i$0x2762d20
Optimizing: mul __temp_354$0x2763f90, 0x8:i, __temp_354$0x2763f90
Optimizing: sti 0x200001038:i, __temp_353$0x2763f90
Optimizing: sti 0x200001040:i, __temp_354$0x2763f90
Optimizing: add __temp_358$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_356$0x2763f90, w$0x2556d40, i$0x2762d20
Optimizing: sub __temp_357$0x2763f90, __temp_358$0x2763f90, i$0x2762d20
Optimizing: mul __temp_357$0x2763f90, 0x8:i, __temp_357$0x2763f90
Optimizing: sti 0x200001048:i, __temp_356$0x2763f90
Optimizing: sti 0x200001050:i, __temp_357$0x2763f90
Optimizing: div __temp_361$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: mul __temp_362$0x2763f90, __temp_361$0x2763f90, 0x200:i8
Optimizing: div __temp_363$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: add __temp_364$0x2763f90, __temp_363$0x2763f90, 0x1:i8
Optimizing: mul __temp_365$0x2763f90, __temp_364$0x2763f90, 0x200:i8
Optimizing: ldelema __temp_359$0x2763f90, trigger$0x2556d40, __temp_362$0x2763f90
Optimizing: sub __temp_360$0x2763f90, __temp_365$0x2763f90, __temp_362$0x2763f90
Optimizing: mul __temp_360$0x2763f90, 0x8:i, __temp_360$0x2763f90
Optimizing: sti 0x200001058:i, __temp_359$0x2763f90
Optimizing: sti 0x200001060:i, __temp_360$0x2763f90
Optimizing: asm "mov $0x0:msq, 0x200001068:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001070:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001078:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001080:msq"
Optimizing: asm "mov $0x200001068:msq, 0x200001088:msq"
Optimizing: asm "mov $0x200001070:msq, 0x200001090:msq"
Optimizing: asm "newr 0x200001078, 0x200001080, 0x200001088, 0x200001090"
Optimizing: ldi __temp_344$0x2763f90, 0x100000400:i
Optimizing: ldi __temp_345$0x2763f90, 0x100000408:i
Optimizing: add __temp_346$0x2763f90, __temp_344$0x2763f90, __temp_345$0x2763f90
Optimizing: lda __temp_366$0x2763f90, init_runner$0x2556d40
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, __temp_366$0x2763f90
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, 0x10:i8
Optimizing: add __temp_367$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, __temp_367$0x2763f90
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, i$0x2762d20
Optimizing: __temp_339$0x2762d20:
Optimizing: add __temp_368$0x2762d20, i$0x2762d20, 0xA:i8
Optimizing: mov i$0x2762d20, __temp_368$0x2762d20
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x2762d20, i$0x2762d20, 0xA:i8
Optimized: nop
Optimizing: br __temp_338$0x2762d20
Optimizing: __temp_340$0x2762d20:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xa:msq, 0x200001010:msq"
Optimizing: ldelema __temp_372$0x2762d20, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_373$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_373$0x2762d20, 0x8:i, __temp_373$0x2762d20
Optimizing: sti 0x200001018:i, __temp_372$0x2762d20
Optimizing: sti 0x200001020:i, __temp_373$0x2762d20
Optimizing: ldelema __temp_374$0x2762d20, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_375$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_375$0x2762d20, 0x8:i, __temp_375$0x2762d20
Optimizing: sti 0x200001028:i, __temp_374$0x2762d20
Optimizing: sti 0x200001030:i, __temp_375$0x2762d20
Optimizing: ldelema __temp_376$0x2762d20, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_377$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_377$0x2762d20, 0x8:i, __temp_377$0x2762d20
Optimizing: sti 0x200001038:i, __temp_376$0x2762d20
Optimizing: sti 0x200001040:i, __temp_377$0x2762d20
Optimizing: ldelema __temp_378$0x2762d20, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_379$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_379$0x2762d20, 0x8:i, __temp_379$0x2762d20
Optimizing: sti 0x200001048:i, __temp_378$0x2762d20
Optimizing: sti 0x200001050:i, __temp_379$0x2762d20
Optimizing: ldelema __temp_380$0x2762d20, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_381$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_381$0x2762d20, 0x8:i, __temp_381$0x2762d20
Optimizing: sti 0x200001058:i, __temp_380$0x2762d20
Optimizing: sti 0x200001060:i, __temp_381$0x2762d20
Optimizing: ldelema __temp_382$0x2762d20, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_383$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_383$0x2762d20, 0x8:i, __temp_383$0x2762d20
Optimizing: sti 0x200001068:i, __temp_382$0x2762d20
Optimizing: sti 0x200001070:i, __temp_383$0x2762d20
Optimizing: ldelema __temp_384$0x2762d20, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_385$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_385$0x2762d20, 0x8:i, __temp_385$0x2762d20
Optimizing: sti 0x200001078:i, __temp_384$0x2762d20
Optimizing: sti 0x200001080:i, __temp_385$0x2762d20
Optimizing: ldelema __temp_386$0x2762d20, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_387$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_387$0x2762d20, 0x8:i, __temp_387$0x2762d20
Optimizing: sti 0x200001088:i, __temp_386$0x2762d20
Optimizing: sti 0x200001090:i, __temp_387$0x2762d20
Optimizing: ldelema __temp_388$0x2762d20, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_389$0x2762d20, 0xA:i8, 0x0:i8
Optimizing: mul __temp_389$0x2762d20, 0x8:i, __temp_389$0x2762d20
Optimizing: sti 0x200001098:i, __temp_388$0x2762d20
Optimizing: sti 0x2000010A0:i, __temp_389$0x2762d20
Optimizing: lda __temp_390$0x2762d20, iter$0x2556d40
Optimizing: mov __temp_391$0x2762d20, 0x8:i
Optimizing: sti 0x2000010A8:i, __temp_390$0x2762d20
Optimizing: sti 0x2000010B0:i, __temp_391$0x2762d20
Optimizing: asm "mov $0x1:msq, 0x2000010b8:msq"
Optimizing: div __temp_394$0x2762d20, 0xA:i8, 0xA:i8
Optimizing: add __temp_395$0x2762d20, __temp_394$0x2762d20, 0x1:i8
Optimizing: mul __temp_396$0x2762d20, __temp_395$0x2762d20, 0x200:i8
Optimizing: ldelema __temp_392$0x2762d20, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_393$0x2762d20, __temp_396$0x2762d20, 0x0:i8
Optimizing: mul __temp_393$0x2762d20, 0x8:i, __temp_393$0x2762d20
Optimizing: sti 0x2000010C0:i, __temp_392$0x2762d20
Optimizing: sti 0x2000010C8:i, __temp_393$0x2762d20
Optimizing: asm "mov $__newr0:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x2000010d0:msq, 0x2000010f0:msq"
Optimizing: asm "newr 0x2000010d8, 0x2000010e0, 0x2000010e8, 0x2000010f0"
Optimizing: ldi __temp_369$0x2762d20, 0x100000400:i
Optimizing: ldi __temp_370$0x2762d20, 0x100000408:i
Optimizing: add __temp_371$0x2762d20, __temp_369$0x2762d20, __temp_370$0x2762d20
Optimizing: lda __temp_397$0x2762d20, on_init1_finished$0x2556d40
Optimizing: sub __temp_371$0x2762d20, __temp_371$0x2762d20, 0x8:i8
Optimizing: sti __temp_371$0x2762d20, __temp_397$0x2762d20
Optimizing: sub __temp_371$0x2762d20, __temp_371$0x2762d20, 0x8:i8
Optimizing: sti __temp_371$0x2762d20, 0x0:i8
Optimized: Deleted 2 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_338$0x2762d20:
Optimizing: ble 0xA:i8, i$0x2762d20, __temp_340$0x2762d20
Optimizing: div __temp_342$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: mul __temp_343$0x2763f90, __temp_342$0x2763f90, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_343$0x2763f90, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x5:msq, 0x200001010:msq"
Optimizing: add __temp_349$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_347$0x2763f90, x$0x2556d40, i$0x2762d20
Optimizing: sub __temp_348$0x2763f90, __temp_349$0x2763f90, i$0x2762d20
Optimizing: mul __temp_348$0x2763f90, 0x8:i, __temp_348$0x2763f90
Optimizing: sti 0x200001018:i, __temp_347$0x2763f90
Optimizing: sti 0x200001020:i, __temp_348$0x2763f90
Optimizing: add __temp_352$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_350$0x2763f90, y$0x2556d40, i$0x2762d20
Optimizing: sub __temp_351$0x2763f90, __temp_352$0x2763f90, i$0x2762d20
Optimizing: mul __temp_351$0x2763f90, 0x8:i, __temp_351$0x2763f90
Optimizing: sti 0x200001028:i, __temp_350$0x2763f90
Optimizing: sti 0x200001030:i, __temp_351$0x2763f90
Optimizing: add __temp_355$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_353$0x2763f90, z$0x2556d40, i$0x2762d20
Optimizing: sub __temp_354$0x2763f90, __temp_355$0x2763f90, i$0x2762d20
Optimizing: mul __temp_354$0x2763f90, 0x8:i, __temp_354$0x2763f90
Optimizing: sti 0x200001038:i, __temp_353$0x2763f90
Optimizing: sti 0x200001040:i, __temp_354$0x2763f90
Optimizing: add __temp_358$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: ldelema __temp_356$0x2763f90, w$0x2556d40, i$0x2762d20
Optimizing: sub __temp_357$0x2763f90, __temp_358$0x2763f90, i$0x2762d20
Optimizing: mul __temp_357$0x2763f90, 0x8:i, __temp_357$0x2763f90
Optimizing: sti 0x200001048:i, __temp_356$0x2763f90
Optimizing: sti 0x200001050:i, __temp_357$0x2763f90
Optimizing: div __temp_361$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: mul __temp_362$0x2763f90, __temp_361$0x2763f90, 0x200:i8
Optimizing: div __temp_363$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: add __temp_364$0x2763f90, __temp_363$0x2763f90, 0x1:i8
Optimizing: mul __temp_365$0x2763f90, __temp_364$0x2763f90, 0x200:i8
Optimizing: ldelema __temp_359$0x2763f90, trigger$0x2556d40, __temp_362$0x2763f90
Optimizing: sub __temp_360$0x2763f90, __temp_365$0x2763f90, __temp_362$0x2763f90
Optimizing: mul __temp_360$0x2763f90, 0x8:i, __temp_360$0x2763f90
Optimizing: sti 0x200001058:i, __temp_359$0x2763f90
Optimizing: sti 0x200001060:i, __temp_360$0x2763f90
Optimizing: asm "mov $0x0:msq, 0x200001068:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001070:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001078:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001080:msq"
Optimizing: asm "mov $0x200001068:msq, 0x200001088:msq"
Optimizing: asm "mov $0x200001070:msq, 0x200001090:msq"
Optimizing: asm "newr 0x200001078, 0x200001080, 0x200001088, 0x200001090"
Optimizing: ldi __temp_344$0x2763f90, 0x100000400:i
Optimizing: ldi __temp_345$0x2763f90, 0x100000408:i
Optimizing: add __temp_346$0x2763f90, __temp_344$0x2763f90, __temp_345$0x2763f90
Optimizing: lda __temp_366$0x2763f90, init_runner$0x2556d40
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, __temp_366$0x2763f90
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, 0x10:i8
Optimizing: add __temp_367$0x2763f90, i$0x2762d20, 0xA:i8
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, __temp_367$0x2763f90
Optimizing: sub __temp_346$0x2763f90, __temp_346$0x2763f90, 0x8:i8
Optimizing: sti __temp_346$0x2763f90, i$0x2762d20
Optimizing: __temp_339$0x2762d20:
Optimizing: add i$0x2762d20, i$0x2762d20, 0xA:i8
Optimizing: br __temp_338$0x2762d20
Optimizing: __temp_340$0x2762d20:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xa:msq, 0x200001010:msq"
Optimizing: ldelema __temp_372$0x2762d20, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_373$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_373$0x2762d20, 0x8:i, __temp_373$0x2762d20
Optimizing: sti 0x200001018:i, __temp_372$0x2762d20
Optimizing: sti 0x200001020:i, __temp_373$0x2762d20
Optimizing: ldelema __temp_374$0x2762d20, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_375$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_375$0x2762d20, 0x8:i, __temp_375$0x2762d20
Optimizing: sti 0x200001028:i, __temp_374$0x2762d20
Optimizing: sti 0x200001030:i, __temp_375$0x2762d20
Optimizing: ldelema __temp_376$0x2762d20, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_377$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_377$0x2762d20, 0x8:i, __temp_377$0x2762d20
Optimizing: sti 0x200001038:i, __temp_376$0x2762d20
Optimizing: sti 0x200001040:i, __temp_377$0x2762d20
Optimizing: ldelema __temp_378$0x2762d20, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_379$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_379$0x2762d20, 0x8:i, __temp_379$0x2762d20
Optimizing: sti 0x200001048:i, __temp_378$0x2762d20
Optimizing: sti 0x200001050:i, __temp_379$0x2762d20
Optimizing: ldelema __temp_380$0x2762d20, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_381$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_381$0x2762d20, 0x8:i, __temp_381$0x2762d20
Optimizing: sti 0x200001058:i, __temp_380$0x2762d20
Optimizing: sti 0x200001060:i, __temp_381$0x2762d20
Optimizing: ldelema __temp_382$0x2762d20, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_383$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_383$0x2762d20, 0x8:i, __temp_383$0x2762d20
Optimizing: sti 0x200001068:i, __temp_382$0x2762d20
Optimizing: sti 0x200001070:i, __temp_383$0x2762d20
Optimizing: ldelema __temp_384$0x2762d20, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_385$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_385$0x2762d20, 0x8:i, __temp_385$0x2762d20
Optimizing: sti 0x200001078:i, __temp_384$0x2762d20
Optimizing: sti 0x200001080:i, __temp_385$0x2762d20
Optimizing: ldelema __temp_386$0x2762d20, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_387$0x2762d20, 0x2:i8, 0x0:i8
Optimizing: mul __temp_387$0x2762d20, 0x8:i, __temp_387$0x2762d20
Optimizing: sti 0x200001088:i, __temp_386$0x2762d20
Optimizing: sti 0x200001090:i, __temp_387$0x2762d20
Optimizing: ldelema __temp_388$0x2762d20, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_389$0x2762d20, 0xA:i8, 0x0:i8
Optimizing: mul __temp_389$0x2762d20, 0x8:i, __temp_389$0x2762d20
Optimizing: sti 0x200001098:i, __temp_388$0x2762d20
Optimizing: sti 0x2000010A0:i, __temp_389$0x2762d20
Optimizing: lda __temp_390$0x2762d20, iter$0x2556d40
Optimizing: mov __temp_391$0x2762d20, 0x8:i
Optimizing: sti 0x2000010A8:i, __temp_390$0x2762d20
Optimizing: sti 0x2000010B0:i, __temp_391$0x2762d20
Optimizing: asm "mov $0x1:msq, 0x2000010b8:msq"
Optimizing: div __temp_394$0x2762d20, 0xA:i8, 0xA:i8
Optimizing: add __temp_395$0x2762d20, __temp_394$0x2762d20, 0x1:i8
Optimizing: mul __temp_396$0x2762d20, __temp_395$0x2762d20, 0x200:i8
Optimizing: ldelema __temp_392$0x2762d20, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_393$0x2762d20, __temp_396$0x2762d20, 0x0:i8
Optimizing: mul __temp_393$0x2762d20, 0x8:i, __temp_393$0x2762d20
Optimizing: sti 0x2000010C0:i, __temp_392$0x2762d20
Optimizing: sti 0x2000010C8:i, __temp_393$0x2762d20
Optimizing: asm "mov $__newr0:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x2000010d0:msq, 0x2000010f0:msq"
Optimizing: asm "newr 0x2000010d8, 0x2000010e0, 0x2000010e8, 0x2000010f0"
Optimizing: ldi __temp_369$0x2762d20, 0x100000400:i
Optimizing: ldi __temp_370$0x2762d20, 0x100000408:i
Optimizing: add __temp_371$0x2762d20, __temp_369$0x2762d20, __temp_370$0x2762d20
Optimizing: lda __temp_397$0x2762d20, on_init1_finished$0x2556d40
Optimizing: sub __temp_371$0x2762d20, __temp_371$0x2762d20, 0x8:i8
Optimizing: sti __temp_371$0x2762d20, __temp_397$0x2762d20
Optimizing: sub __temp_371$0x2762d20, __temp_371$0x2762d20, 0x8:i8
Optimizing: sti __temp_371$0x2762d20, 0x0:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov partid$0x277de40, __temp_398$0x277de40
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: div partid$0x277de40, start$0x277dba0, 0xA:i8
Optimized: nop
Optimizing: mov i$0x277de40, start$0x277dba0
Optimizing: __temp_399$0x277de40:
Optimizing: clt __temp_402$0x277de40, i$0x277de40, end$0x277dba0
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_402$0x277de40, __temp_401$0x277de40
Optimized: ble end$0x277dba0, i$0x277de40, __temp_401$0x277de40
Optimizing: nop
Optimizing: ldelem __temp_403$0x27811b0, x$0x2556d40, i$0x277de40
Optimizing: mov xt$0x277de40, __temp_403$0x27811b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem xt$0x277de40, x$0x2556d40, i$0x277de40
Optimized: nop
Optimizing: ldelem __temp_404$0x27811b0, y$0x2556d40, i$0x277de40
Optimizing: mov yt$0x277de40, __temp_404$0x27811b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem yt$0x277de40, y$0x2556d40, i$0x277de40
Optimized: nop
Optimizing: ldelem __temp_405$0x27811b0, z$0x2556d40, i$0x277de40
Optimizing: mov zt$0x277de40, __temp_405$0x27811b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem zt$0x277de40, z$0x2556d40, i$0x277de40
Optimized: nop
Optimizing: ldelem __temp_406$0x27811b0, w$0x2556d40, i$0x277de40
Optimizing: mov wt$0x277de40, __temp_406$0x27811b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem wt$0x277de40, w$0x2556d40, i$0x277de40
Optimized: nop
Optimizing: mul __temp_407$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: stelem pmem_in$0x2556d40, __temp_407$0x27811b0, xt$0x277de40
Optimizing: mul __temp_408$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_409$0x27811b0, __temp_408$0x27811b0, 0x1:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_409$0x27811b0, yt$0x277de40
Optimizing: mul __temp_410$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_411$0x27811b0, __temp_410$0x27811b0, 0x2:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_411$0x27811b0, zt$0x277de40
Optimizing: mul __temp_412$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_413$0x27811b0, __temp_412$0x27811b0, 0x3:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_413$0x27811b0, wt$0x277de40
Optimizing: __temp_400$0x277de40:
Optimizing: add __temp_414$0x277de40, i$0x277de40, 0x1:i8
Optimizing: mov i$0x277de40, __temp_414$0x277de40
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x277de40, i$0x277de40, 0x1:i8
Optimized: nop
Optimizing: br __temp_399$0x277de40
Optimizing: __temp_401$0x277de40:
Optimizing: div __temp_415$0x277de40, start$0x277dba0, 0xA:i8
Optimizing: mul __temp_416$0x277de40, __temp_415$0x277de40, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_416$0x277de40, 0x2:i8
Optimized: Deleted 7 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov i$0x277de40, start$0x277dba0
Sadly not okay to optimize.
Optimizing: __temp_399$0x277de40:
Optimizing: ble end$0x277dba0, i$0x277de40, __temp_401$0x277de40
Optimizing: ldelem xt$0x277de40, x$0x2556d40, i$0x277de40
Optimizing: ldelem yt$0x277de40, y$0x2556d40, i$0x277de40
Optimizing: ldelem zt$0x277de40, z$0x2556d40, i$0x277de40
Optimizing: ldelem wt$0x277de40, w$0x2556d40, i$0x277de40
Optimizing: mul __temp_407$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: stelem pmem_in$0x2556d40, __temp_407$0x27811b0, xt$0x277de40
Optimizing: mul __temp_408$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_409$0x27811b0, __temp_408$0x27811b0, 0x1:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_409$0x27811b0, yt$0x277de40
Optimizing: mul __temp_410$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_411$0x27811b0, __temp_410$0x27811b0, 0x2:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_411$0x27811b0, zt$0x277de40
Optimizing: mul __temp_412$0x27811b0, 0x4:i8, i$0x277de40
Optimizing: add __temp_413$0x27811b0, __temp_412$0x27811b0, 0x3:i8
Optimizing: stelem pmem_in$0x2556d40, __temp_413$0x27811b0, wt$0x277de40
Optimizing: __temp_400$0x277de40:
Optimizing: add i$0x277de40, i$0x277de40, 0x1:i8
Optimizing: br __temp_399$0x277de40
Optimizing: __temp_401$0x277de40:
Optimizing: div __temp_415$0x277de40, start$0x277dba0, 0xA:i8
Optimizing: mul __temp_416$0x277de40, __temp_415$0x277de40, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_416$0x277de40, 0x2:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_417$0x27acef0:
Optimizing: clt __temp_420$0x27acef0, i$0x27acef0, 0xA:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_420$0x27acef0, __temp_419$0x27acef0
Optimized: ble 0xA:i8, i$0x27acef0, __temp_419$0x27acef0
Optimizing: nop
Optimizing: div __temp_421$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_422$0x27ae940, __temp_421$0x27ae940, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_422$0x27ae940, 0x0:i8
Optimizing: mul __temp_423$0x27ae940, 0x202:i8, i$0x27acef0
Optimizing: div __temp_424$0x27ae940, __temp_423$0x27ae940, 0xA:i8
Optimizing: mov tmp1$0x27acef0, __temp_424$0x27ae940
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: div tmp1$0x27acef0, __temp_423$0x27ae940, 0xA:i8
Optimized: nop
Optimizing: add __temp_425$0x27ae940, tmp1$0x27acef0, 0x2:i8
Optimizing: add __temp_426$0x27ae940, __temp_425$0x27ae940, 0x200:i8
Optimizing: mov tmp2$0x27acef0, __temp_426$0x27ae940
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add tmp2$0x27acef0, __temp_425$0x27ae940, 0x200:i8
Optimized: nop
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x11:msq, 0x200001010:msq"
Optimizing: add __temp_432$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_430$0x27ae940, x$0x2556d40, i$0x27acef0
Optimizing: sub __temp_431$0x27ae940, __temp_432$0x27ae940, i$0x27acef0
Optimizing: mul __temp_431$0x27ae940, 0x8:i, __temp_431$0x27ae940
Optimizing: sti 0x200001018:i, __temp_430$0x27ae940
Optimizing: sti 0x200001020:i, __temp_431$0x27ae940
Optimizing: add __temp_435$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_433$0x27ae940, y$0x2556d40, i$0x27acef0
Optimizing: sub __temp_434$0x27ae940, __temp_435$0x27ae940, i$0x27acef0
Optimizing: mul __temp_434$0x27ae940, 0x8:i, __temp_434$0x27ae940
Optimizing: sti 0x200001028:i, __temp_433$0x27ae940
Optimizing: sti 0x200001030:i, __temp_434$0x27ae940
Optimizing: add __temp_438$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_436$0x27ae940, z$0x2556d40, i$0x27acef0
Optimizing: sub __temp_437$0x27ae940, __temp_438$0x27ae940, i$0x27acef0
Optimizing: mul __temp_437$0x27ae940, 0x8:i, __temp_437$0x27ae940
Optimizing: sti 0x200001038:i, __temp_436$0x27ae940
Optimizing: sti 0x200001040:i, __temp_437$0x27ae940
Optimizing: add __temp_441$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_439$0x27ae940, w$0x2556d40, i$0x27acef0
Optimizing: sub __temp_440$0x27ae940, __temp_441$0x27ae940, i$0x27acef0
Optimizing: mul __temp_440$0x27ae940, 0x8:i, __temp_440$0x27ae940
Optimizing: sti 0x200001048:i, __temp_439$0x27ae940
Optimizing: sti 0x200001050:i, __temp_440$0x27ae940
Optimizing: add __temp_444$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_442$0x27ae940, ci$0x2556d40, i$0x27acef0
Optimizing: sub __temp_443$0x27ae940, __temp_444$0x27ae940, i$0x27acef0
Optimizing: mul __temp_443$0x27ae940, 0x8:i, __temp_443$0x27ae940
Optimizing: sti 0x200001058:i, __temp_442$0x27ae940
Optimizing: sti 0x200001060:i, __temp_443$0x27ae940
Optimizing: ldelema __temp_445$0x27ae940, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_446$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_446$0x27ae940, 0x8:i, __temp_446$0x27ae940
Optimizing: sti 0x200001068:i, __temp_445$0x27ae940
Optimizing: sti 0x200001070:i, __temp_446$0x27ae940
Optimizing: ldelema __temp_447$0x27ae940, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_448$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_448$0x27ae940, 0x8:i, __temp_448$0x27ae940
Optimizing: sti 0x200001078:i, __temp_447$0x27ae940
Optimizing: sti 0x200001080:i, __temp_448$0x27ae940
Optimizing: ldelema __temp_449$0x27ae940, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_450$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_450$0x27ae940, 0x8:i, __temp_450$0x27ae940
Optimizing: sti 0x200001088:i, __temp_449$0x27ae940
Optimizing: sti 0x200001090:i, __temp_450$0x27ae940
Optimizing: ldelema __temp_451$0x27ae940, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_452$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_452$0x27ae940, 0x8:i, __temp_452$0x27ae940
Optimizing: sti 0x200001098:i, __temp_451$0x27ae940
Optimizing: sti 0x2000010A0:i, __temp_452$0x27ae940
Optimizing: div __temp_455$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_456$0x27ae940, __temp_455$0x27ae940, 0x200:i8
Optimizing: div __temp_457$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: add __temp_458$0x27ae940, __temp_457$0x27ae940, 0x1:i8
Optimizing: mul __temp_459$0x27ae940, __temp_458$0x27ae940, 0x200:i8
Optimizing: ldelema __temp_453$0x27ae940, trigger$0x2556d40, __temp_456$0x27ae940
Optimizing: sub __temp_454$0x27ae940, __temp_459$0x27ae940, __temp_456$0x27ae940
Optimizing: mul __temp_454$0x27ae940, 0x8:i, __temp_454$0x27ae940
Optimizing: sti 0x2000010A8:i, __temp_453$0x27ae940
Optimizing: sti 0x2000010B0:i, __temp_454$0x27ae940
Optimizing: lda __temp_460$0x27ae940, pmem_in$0x2556d40
Optimizing: mov __temp_461$0x27ae940, 0x8:i
Optimizing: sti 0x2000010B8:i, __temp_460$0x27ae940
Optimizing: sti 0x2000010C0:i, __temp_461$0x27ae940
Optimizing: mul __temp_464$0x27ae940, 0x4:i8, i$0x27acef0
Optimizing: add __temp_465$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_466$0x27ae940, 0x4:i8, __temp_465$0x27ae940
Optimizing: ldelema __temp_462$0x27ae940, pmem_in$0x2556d40, __temp_464$0x27ae940
Optimizing: sub __temp_463$0x27ae940, __temp_466$0x27ae940, __temp_464$0x27ae940
Optimizing: mul __temp_463$0x27ae940, 0x8:i, __temp_463$0x27ae940
Optimizing: sti 0x2000010C8:i, __temp_462$0x27ae940
Optimizing: sti 0x2000010D0:i, __temp_463$0x27ae940
Optimizing: ldelema __temp_467$0x27ae940, lcx$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_468$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_468$0x27ae940, 0x8:i, __temp_468$0x27ae940
Optimizing: sti 0x2000010D8:i, __temp_467$0x27ae940
Optimizing: sti 0x2000010E0:i, __temp_468$0x27ae940
Optimizing: ldelema __temp_469$0x27ae940, lcy$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_470$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_470$0x27ae940, 0x8:i, __temp_470$0x27ae940
Optimizing: sti 0x2000010E8:i, __temp_469$0x27ae940
Optimizing: sti 0x2000010F0:i, __temp_470$0x27ae940
Optimizing: ldelema __temp_471$0x27ae940, lcz$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_472$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_472$0x27ae940, 0x8:i, __temp_472$0x27ae940
Optimizing: sti 0x2000010F8:i, __temp_471$0x27ae940
Optimizing: sti 0x200001100:i, __temp_472$0x27ae940
Optimizing: ldelema __temp_473$0x27ae940, lcw$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_474$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_474$0x27ae940, 0x8:i, __temp_474$0x27ae940
Optimizing: sti 0x200001108:i, __temp_473$0x27ae940
Optimizing: sti 0x200001110:i, __temp_474$0x27ae940
Optimizing: ldelema __temp_475$0x27ae940, lcn$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_476$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_476$0x27ae940, 0x8:i, __temp_476$0x27ae940
Optimizing: sti 0x200001118:i, __temp_475$0x27ae940
Optimizing: sti 0x200001120:i, __temp_476$0x27ae940
Optimizing: asm "mov $0x0:msq, 0x200001128:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001130:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001138:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001140:msq"
Optimizing: asm "mov $0x200001128:msq, 0x200001148:msq"
Optimizing: asm "mov $0x200001130:msq, 0x200001150:msq"
Optimizing: asm "newr 0x200001138, 0x200001140, 0x200001148, 0x200001150"
Optimizing: ldi __temp_427$0x27ae940, 0x100000400:i
Optimizing: ldi __temp_428$0x27ae940, 0x100000408:i
Optimizing: add __temp_429$0x27ae940, __temp_427$0x27ae940, __temp_428$0x27ae940
Optimizing: lda __temp_477$0x27ae940, shuffle_runner$0x2556d40
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, __temp_477$0x27ae940
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, 0x10:i8
Optimizing: add __temp_478$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, __temp_478$0x27ae940
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, i$0x27acef0
Optimizing: __temp_418$0x27acef0:
Optimizing: add __temp_479$0x27acef0, i$0x27acef0, 0xA:i8
Optimizing: mov i$0x27acef0, __temp_479$0x27acef0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x27acef0, i$0x27acef0, 0xA:i8
Optimized: nop
Optimizing: br __temp_417$0x27acef0
Optimizing: __temp_419$0x27acef0:
Optimized: Deleted 4 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_417$0x27acef0:
Optimizing: ble 0xA:i8, i$0x27acef0, __temp_419$0x27acef0
Optimizing: div __temp_421$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_422$0x27ae940, __temp_421$0x27ae940, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_422$0x27ae940, 0x0:i8
Optimizing: mul __temp_423$0x27ae940, 0x202:i8, i$0x27acef0
Optimizing: div tmp1$0x27acef0, __temp_423$0x27ae940, 0xA:i8
Optimizing: add __temp_425$0x27ae940, tmp1$0x27acef0, 0x2:i8
Optimizing: add tmp2$0x27acef0, __temp_425$0x27ae940, 0x200:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x11:msq, 0x200001010:msq"
Optimizing: add __temp_432$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_430$0x27ae940, x$0x2556d40, i$0x27acef0
Optimizing: sub __temp_431$0x27ae940, __temp_432$0x27ae940, i$0x27acef0
Optimizing: mul __temp_431$0x27ae940, 0x8:i, __temp_431$0x27ae940
Optimizing: sti 0x200001018:i, __temp_430$0x27ae940
Optimizing: sti 0x200001020:i, __temp_431$0x27ae940
Optimizing: add __temp_435$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_433$0x27ae940, y$0x2556d40, i$0x27acef0
Optimizing: sub __temp_434$0x27ae940, __temp_435$0x27ae940, i$0x27acef0
Optimizing: mul __temp_434$0x27ae940, 0x8:i, __temp_434$0x27ae940
Optimizing: sti 0x200001028:i, __temp_433$0x27ae940
Optimizing: sti 0x200001030:i, __temp_434$0x27ae940
Optimizing: add __temp_438$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_436$0x27ae940, z$0x2556d40, i$0x27acef0
Optimizing: sub __temp_437$0x27ae940, __temp_438$0x27ae940, i$0x27acef0
Optimizing: mul __temp_437$0x27ae940, 0x8:i, __temp_437$0x27ae940
Optimizing: sti 0x200001038:i, __temp_436$0x27ae940
Optimizing: sti 0x200001040:i, __temp_437$0x27ae940
Optimizing: add __temp_441$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_439$0x27ae940, w$0x2556d40, i$0x27acef0
Optimizing: sub __temp_440$0x27ae940, __temp_441$0x27ae940, i$0x27acef0
Optimizing: mul __temp_440$0x27ae940, 0x8:i, __temp_440$0x27ae940
Optimizing: sti 0x200001048:i, __temp_439$0x27ae940
Optimizing: sti 0x200001050:i, __temp_440$0x27ae940
Optimizing: add __temp_444$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: ldelema __temp_442$0x27ae940, ci$0x2556d40, i$0x27acef0
Optimizing: sub __temp_443$0x27ae940, __temp_444$0x27ae940, i$0x27acef0
Optimizing: mul __temp_443$0x27ae940, 0x8:i, __temp_443$0x27ae940
Optimizing: sti 0x200001058:i, __temp_442$0x27ae940
Optimizing: sti 0x200001060:i, __temp_443$0x27ae940
Optimizing: ldelema __temp_445$0x27ae940, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_446$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_446$0x27ae940, 0x8:i, __temp_446$0x27ae940
Optimizing: sti 0x200001068:i, __temp_445$0x27ae940
Optimizing: sti 0x200001070:i, __temp_446$0x27ae940
Optimizing: ldelema __temp_447$0x27ae940, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_448$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_448$0x27ae940, 0x8:i, __temp_448$0x27ae940
Optimizing: sti 0x200001078:i, __temp_447$0x27ae940
Optimizing: sti 0x200001080:i, __temp_448$0x27ae940
Optimizing: ldelema __temp_449$0x27ae940, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_450$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_450$0x27ae940, 0x8:i, __temp_450$0x27ae940
Optimizing: sti 0x200001088:i, __temp_449$0x27ae940
Optimizing: sti 0x200001090:i, __temp_450$0x27ae940
Optimizing: ldelema __temp_451$0x27ae940, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_452$0x27ae940, 0x2:i8, 0x0:i8
Optimizing: mul __temp_452$0x27ae940, 0x8:i, __temp_452$0x27ae940
Optimizing: sti 0x200001098:i, __temp_451$0x27ae940
Optimizing: sti 0x2000010A0:i, __temp_452$0x27ae940
Optimizing: div __temp_455$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_456$0x27ae940, __temp_455$0x27ae940, 0x200:i8
Optimizing: div __temp_457$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: add __temp_458$0x27ae940, __temp_457$0x27ae940, 0x1:i8
Optimizing: mul __temp_459$0x27ae940, __temp_458$0x27ae940, 0x200:i8
Optimizing: ldelema __temp_453$0x27ae940, trigger$0x2556d40, __temp_456$0x27ae940
Optimizing: sub __temp_454$0x27ae940, __temp_459$0x27ae940, __temp_456$0x27ae940
Optimizing: mul __temp_454$0x27ae940, 0x8:i, __temp_454$0x27ae940
Optimizing: sti 0x2000010A8:i, __temp_453$0x27ae940
Optimizing: sti 0x2000010B0:i, __temp_454$0x27ae940
Optimizing: lda __temp_460$0x27ae940, pmem_in$0x2556d40
Optimizing: mov __temp_461$0x27ae940, 0x8:i
Optimizing: sti 0x2000010B8:i, __temp_460$0x27ae940
Optimizing: sti 0x2000010C0:i, __temp_461$0x27ae940
Optimizing: mul __temp_464$0x27ae940, 0x4:i8, i$0x27acef0
Optimizing: add __temp_465$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: mul __temp_466$0x27ae940, 0x4:i8, __temp_465$0x27ae940
Optimizing: ldelema __temp_462$0x27ae940, pmem_in$0x2556d40, __temp_464$0x27ae940
Optimizing: sub __temp_463$0x27ae940, __temp_466$0x27ae940, __temp_464$0x27ae940
Optimizing: mul __temp_463$0x27ae940, 0x8:i, __temp_463$0x27ae940
Optimizing: sti 0x2000010C8:i, __temp_462$0x27ae940
Optimizing: sti 0x2000010D0:i, __temp_463$0x27ae940
Optimizing: ldelema __temp_467$0x27ae940, lcx$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_468$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_468$0x27ae940, 0x8:i, __temp_468$0x27ae940
Optimizing: sti 0x2000010D8:i, __temp_467$0x27ae940
Optimizing: sti 0x2000010E0:i, __temp_468$0x27ae940
Optimizing: ldelema __temp_469$0x27ae940, lcy$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_470$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_470$0x27ae940, 0x8:i, __temp_470$0x27ae940
Optimizing: sti 0x2000010E8:i, __temp_469$0x27ae940
Optimizing: sti 0x2000010F0:i, __temp_470$0x27ae940
Optimizing: ldelema __temp_471$0x27ae940, lcz$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_472$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_472$0x27ae940, 0x8:i, __temp_472$0x27ae940
Optimizing: sti 0x2000010F8:i, __temp_471$0x27ae940
Optimizing: sti 0x200001100:i, __temp_472$0x27ae940
Optimizing: ldelema __temp_473$0x27ae940, lcw$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_474$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_474$0x27ae940, 0x8:i, __temp_474$0x27ae940
Optimizing: sti 0x200001108:i, __temp_473$0x27ae940
Optimizing: sti 0x200001110:i, __temp_474$0x27ae940
Optimizing: ldelema __temp_475$0x27ae940, lcn$0x2556d40, tmp1$0x27acef0
Optimizing: sub __temp_476$0x27ae940, tmp2$0x27acef0, tmp1$0x27acef0
Optimizing: mul __temp_476$0x27ae940, 0x8:i, __temp_476$0x27ae940
Optimizing: sti 0x200001118:i, __temp_475$0x27ae940
Optimizing: sti 0x200001120:i, __temp_476$0x27ae940
Optimizing: asm "mov $0x0:msq, 0x200001128:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001130:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001138:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001140:msq"
Optimizing: asm "mov $0x200001128:msq, 0x200001148:msq"
Optimizing: asm "mov $0x200001130:msq, 0x200001150:msq"
Optimizing: asm "newr 0x200001138, 0x200001140, 0x200001148, 0x200001150"
Optimizing: ldi __temp_427$0x27ae940, 0x100000400:i
Optimizing: ldi __temp_428$0x27ae940, 0x100000408:i
Optimizing: add __temp_429$0x27ae940, __temp_427$0x27ae940, __temp_428$0x27ae940
Optimizing: lda __temp_477$0x27ae940, shuffle_runner$0x2556d40
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, __temp_477$0x27ae940
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, 0x10:i8
Optimizing: add __temp_478$0x27ae940, i$0x27acef0, 0xA:i8
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, __temp_478$0x27ae940
Optimizing: sub __temp_429$0x27ae940, __temp_429$0x27ae940, 0x8:i8
Optimizing: sti __temp_429$0x27ae940, i$0x27acef0
Optimizing: __temp_418$0x27acef0:
Optimizing: add i$0x27acef0, i$0x27acef0, 0xA:i8
Optimizing: br __temp_417$0x27acef0
Optimizing: __temp_419$0x27acef0:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_480$0x27befe0:
Optimizing: clt __temp_483$0x27befe0, i$0x27befe0, 0x200:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_483$0x27befe0, __temp_482$0x27befe0
Optimized: ble 0x200:i8, i$0x27befe0, __temp_482$0x27befe0
Optimizing: nop
Optimizing: ldelem __temp_485$0x27c0710, trigger$0x2556d40, i$0x27befe0
Optimizing: cne __temp_486$0x27c0710, __temp_485$0x27c0710, 0x1:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_486$0x27c0710, __temp_487$0x27c0710
Optimized: bne __temp_485$0x27c0710, 0x1:i8, __temp_487$0x27c0710
Optimizing: nop
Optimizing: br __temp_484$0x27c0710
Optimizing: __temp_487$0x27c0710:
Optimizing: asm "exit:a"
Optimizing: __temp_484$0x27c0710:
Optimizing: __temp_481$0x27befe0:
Optimizing: add __temp_488$0x27befe0, i$0x27befe0, 0x200:i8
Optimizing: mov i$0x27befe0, __temp_488$0x27befe0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x27befe0, i$0x27befe0, 0x200:i8
Optimized: nop
Optimizing: br __temp_480$0x27befe0
Optimizing: __temp_482$0x27befe0:
Optimizing: stelem trigger$0x2556d40, 0x0:i8, 0x3:i8
Optimizing: call start_shuffle$0x2556d40, <missing>
Optimized: Deleted 3 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: __temp_480$0x27befe0:
Optimizing: ble 0x200:i8, i$0x27befe0, __temp_482$0x27befe0
Optimizing: ldelem __temp_485$0x27c0710, trigger$0x2556d40, i$0x27befe0
Optimizing: bne __temp_485$0x27c0710, 0x1:i8, __temp_487$0x27c0710
Optimizing: br __temp_484$0x27c0710
Optimizing: __temp_487$0x27c0710:
Optimizing: asm "exit:a"
Optimizing: __temp_484$0x27c0710:
Optimizing: __temp_481$0x27befe0:
Optimizing: add i$0x27befe0, i$0x27befe0, 0x200:i8
Optimizing: br __temp_480$0x27befe0
Optimizing: __temp_482$0x27befe0:
Optimizing: stelem trigger$0x2556d40, 0x0:i8, 0x3:i8
Optimizing: call start_shuffle$0x2556d40, <missing>
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov i$0x27e79c0, 0x0:i8
Optimizing: __temp_489$0x27e79c0:
Optimizing: clt __temp_492$0x27e79c0, i$0x27e79c0, 0xA:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_492$0x27e79c0, __temp_491$0x27e79c0
Optimized: ble 0xA:i8, i$0x27e79c0, __temp_491$0x27e79c0
Optimizing: nop
Optimizing: div __temp_493$0x27e9250, i$0x27e79c0, 0xA:i8
Optimizing: mul __temp_494$0x27e9250, __temp_493$0x27e9250, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_494$0x27e9250, 0x0:i8
Optimizing: __temp_490$0x27e79c0:
Optimizing: add __temp_495$0x27e79c0, i$0x27e79c0, 0xA:i8
Optimizing: mov i$0x27e79c0, __temp_495$0x27e79c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0x27e79c0, i$0x27e79c0, 0xA:i8
Optimized: nop
Optimizing: br __temp_489$0x27e79c0
Optimizing: __temp_491$0x27e79c0:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x6:msq, 0x200001010:msq"
Optimizing: ldelema __temp_499$0x27e79c0, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_500$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_500$0x27e79c0, 0x8:i, __temp_500$0x27e79c0
Optimizing: sti 0x200001018:i, __temp_499$0x27e79c0
Optimizing: sti 0x200001020:i, __temp_500$0x27e79c0
Optimizing: ldelema __temp_501$0x27e79c0, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_502$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_502$0x27e79c0, 0x8:i, __temp_502$0x27e79c0
Optimizing: sti 0x200001028:i, __temp_501$0x27e79c0
Optimizing: sti 0x200001030:i, __temp_502$0x27e79c0
Optimizing: ldelema __temp_503$0x27e79c0, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_504$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_504$0x27e79c0, 0x8:i, __temp_504$0x27e79c0
Optimizing: sti 0x200001038:i, __temp_503$0x27e79c0
Optimizing: sti 0x200001040:i, __temp_504$0x27e79c0
Optimizing: ldelema __temp_505$0x27e79c0, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_506$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_506$0x27e79c0, 0x8:i, __temp_506$0x27e79c0
Optimizing: sti 0x200001048:i, __temp_505$0x27e79c0
Optimizing: sti 0x200001050:i, __temp_506$0x27e79c0
Optimizing: div __temp_509$0x27e79c0, 0x0:i8, 0xA:i8
Optimizing: mul __temp_510$0x27e79c0, __temp_509$0x27e79c0, 0x200:i8
Optimizing: div __temp_511$0x27e79c0, 0xA:i8, 0xA:i8
Optimizing: add __temp_512$0x27e79c0, __temp_511$0x27e79c0, 0x1:i8
Optimizing: mul __temp_513$0x27e79c0, __temp_512$0x27e79c0, 0x200:i8
Optimizing: ldelema __temp_507$0x27e79c0, trigger$0x2556d40, __temp_510$0x27e79c0
Optimizing: sub __temp_508$0x27e79c0, __temp_513$0x27e79c0, __temp_510$0x27e79c0
Optimizing: mul __temp_508$0x27e79c0, 0x8:i, __temp_508$0x27e79c0
Optimizing: sti 0x200001058:i, __temp_507$0x27e79c0
Optimizing: sti 0x200001060:i, __temp_508$0x27e79c0
Optimizing: lda __temp_514$0x27e79c0, pmem_in$0x2556d40
Optimizing: mov __temp_515$0x27e79c0, 0x8:i
Optimizing: sti 0x200001068:i, __temp_514$0x27e79c0
Optimizing: sti 0x200001070:i, __temp_515$0x27e79c0
Optimizing: asm "mov $0x0:msq, 0x200001078:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001080:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001088:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001090:msq"
Optimizing: asm "mov $0x200001078:msq, 0x200001098:msq"
Optimizing: asm "mov $0x200001080:msq, 0x2000010a0:msq"
Optimizing: asm "newr 0x200001088, 0x200001090, 0x200001098, 0x2000010a0"
Optimizing: ldi __temp_496$0x27e79c0, 0x100000400:i
Optimizing: ldi __temp_497$0x27e79c0, 0x100000408:i
Optimizing: add __temp_498$0x27e79c0, __temp_496$0x27e79c0, __temp_497$0x27e79c0
Optimizing: lda __temp_516$0x27e79c0, init_runner_stdin$0x2556d40
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, __temp_516$0x27e79c0
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0x10:i8
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0xA:i8
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xb:msq, 0x200001010:msq"
Optimizing: ldelema __temp_520$0x27e79c0, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_521$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_521$0x27e79c0, 0x8:i, __temp_521$0x27e79c0
Optimizing: sti 0x200001018:i, __temp_520$0x27e79c0
Optimizing: sti 0x200001020:i, __temp_521$0x27e79c0
Optimizing: ldelema __temp_522$0x27e79c0, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_523$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_523$0x27e79c0, 0x8:i, __temp_523$0x27e79c0
Optimizing: sti 0x200001028:i, __temp_522$0x27e79c0
Optimizing: sti 0x200001030:i, __temp_523$0x27e79c0
Optimizing: ldelema __temp_524$0x27e79c0, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_525$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_525$0x27e79c0, 0x8:i, __temp_525$0x27e79c0
Optimizing: sti 0x200001038:i, __temp_524$0x27e79c0
Optimizing: sti 0x200001040:i, __temp_525$0x27e79c0
Optimizing: ldelema __temp_526$0x27e79c0, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_527$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_527$0x27e79c0, 0x8:i, __temp_527$0x27e79c0
Optimizing: sti 0x200001048:i, __temp_526$0x27e79c0
Optimizing: sti 0x200001050:i, __temp_527$0x27e79c0
Optimizing: ldelema __temp_528$0x27e79c0, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_529$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_529$0x27e79c0, 0x8:i, __temp_529$0x27e79c0
Optimizing: sti 0x200001058:i, __temp_528$0x27e79c0
Optimizing: sti 0x200001060:i, __temp_529$0x27e79c0
Optimizing: ldelema __temp_530$0x27e79c0, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_531$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_531$0x27e79c0, 0x8:i, __temp_531$0x27e79c0
Optimizing: sti 0x200001068:i, __temp_530$0x27e79c0
Optimizing: sti 0x200001070:i, __temp_531$0x27e79c0
Optimizing: ldelema __temp_532$0x27e79c0, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_533$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_533$0x27e79c0, 0x8:i, __temp_533$0x27e79c0
Optimizing: sti 0x200001078:i, __temp_532$0x27e79c0
Optimizing: sti 0x200001080:i, __temp_533$0x27e79c0
Optimizing: ldelema __temp_534$0x27e79c0, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_535$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_535$0x27e79c0, 0x8:i, __temp_535$0x27e79c0
Optimizing: sti 0x200001088:i, __temp_534$0x27e79c0
Optimizing: sti 0x200001090:i, __temp_535$0x27e79c0
Optimizing: ldelema __temp_536$0x27e79c0, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_537$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_537$0x27e79c0, 0x8:i, __temp_537$0x27e79c0
Optimizing: sti 0x200001098:i, __temp_536$0x27e79c0
Optimizing: sti 0x2000010A0:i, __temp_537$0x27e79c0
Optimizing: lda __temp_538$0x27e79c0, iter$0x2556d40
Optimizing: mov __temp_539$0x27e79c0, 0x8:i
Optimizing: sti 0x2000010A8:i, __temp_538$0x27e79c0
Optimizing: sti 0x2000010B0:i, __temp_539$0x27e79c0
Optimizing: lda __temp_540$0x27e79c0, pmem_in$0x2556d40
Optimizing: mov __temp_541$0x27e79c0, 0x8:i
Optimizing: sti 0x2000010B8:i, __temp_540$0x27e79c0
Optimizing: sti 0x2000010C0:i, __temp_541$0x27e79c0
Optimizing: asm "mov $0x1:msq, 0x2000010c8:msq"
Optimizing: div __temp_544$0x27e79c0, 0xA:i8, 0xA:i8
Optimizing: add __temp_545$0x27e79c0, __temp_544$0x27e79c0, 0x1:i8
Optimizing: mul __temp_546$0x27e79c0, __temp_545$0x27e79c0, 0x200:i8
Optimizing: ldelema __temp_542$0x27e79c0, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_543$0x27e79c0, __temp_546$0x27e79c0, 0x0:i8
Optimizing: mul __temp_543$0x27e79c0, 0x8:i, __temp_543$0x27e79c0
Optimizing: sti 0x2000010D0:i, __temp_542$0x27e79c0
Optimizing: sti 0x2000010D8:i, __temp_543$0x27e79c0
Optimizing: asm "mov $__newr0:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010f0:msq"
Optimizing: asm "mov $0x2000010c8:msq, 0x2000010f8:msq"
Optimizing: asm "mov $0x2000010e0:msq, 0x200001100:msq"
Optimizing: asm "newr 0x2000010e8, 0x2000010f0, 0x2000010f8, 0x200001100"
Optimizing: ldi __temp_517$0x27e79c0, 0x100000400:i
Optimizing: ldi __temp_518$0x27e79c0, 0x100000408:i
Optimizing: add __temp_519$0x27e79c0, __temp_517$0x27e79c0, __temp_518$0x27e79c0
Optimizing: lda __temp_547$0x27e79c0, on_init1_finished_stdin_only$0x2556d40
Optimizing: sub __temp_519$0x27e79c0, __temp_519$0x27e79c0, 0x8:i8
Optimizing: sti __temp_519$0x27e79c0, __temp_547$0x27e79c0
Optimizing: sub __temp_519$0x27e79c0, __temp_519$0x27e79c0, 0x8:i8
Optimizing: sti __temp_519$0x27e79c0, 0x0:i8
Optimized: Deleted 2 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov i$0x27e79c0, 0x0:i8
Optimizing: __temp_489$0x27e79c0:
Optimizing: ble 0xA:i8, i$0x27e79c0, __temp_491$0x27e79c0
Optimizing: div __temp_493$0x27e9250, i$0x27e79c0, 0xA:i8
Optimizing: mul __temp_494$0x27e9250, __temp_493$0x27e9250, 0x200:i8
Optimizing: stelem trigger$0x2556d40, __temp_494$0x27e9250, 0x0:i8
Optimizing: __temp_490$0x27e79c0:
Optimizing: add i$0x27e79c0, i$0x27e79c0, 0xA:i8
Optimizing: br __temp_489$0x27e79c0
Optimizing: __temp_491$0x27e79c0:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x6:msq, 0x200001010:msq"
Optimizing: ldelema __temp_499$0x27e79c0, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_500$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_500$0x27e79c0, 0x8:i, __temp_500$0x27e79c0
Optimizing: sti 0x200001018:i, __temp_499$0x27e79c0
Optimizing: sti 0x200001020:i, __temp_500$0x27e79c0
Optimizing: ldelema __temp_501$0x27e79c0, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_502$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_502$0x27e79c0, 0x8:i, __temp_502$0x27e79c0
Optimizing: sti 0x200001028:i, __temp_501$0x27e79c0
Optimizing: sti 0x200001030:i, __temp_502$0x27e79c0
Optimizing: ldelema __temp_503$0x27e79c0, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_504$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_504$0x27e79c0, 0x8:i, __temp_504$0x27e79c0
Optimizing: sti 0x200001038:i, __temp_503$0x27e79c0
Optimizing: sti 0x200001040:i, __temp_504$0x27e79c0
Optimizing: ldelema __temp_505$0x27e79c0, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_506$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_506$0x27e79c0, 0x8:i, __temp_506$0x27e79c0
Optimizing: sti 0x200001048:i, __temp_505$0x27e79c0
Optimizing: sti 0x200001050:i, __temp_506$0x27e79c0
Optimizing: div __temp_509$0x27e79c0, 0x0:i8, 0xA:i8
Optimizing: mul __temp_510$0x27e79c0, __temp_509$0x27e79c0, 0x200:i8
Optimizing: div __temp_511$0x27e79c0, 0xA:i8, 0xA:i8
Optimizing: add __temp_512$0x27e79c0, __temp_511$0x27e79c0, 0x1:i8
Optimizing: mul __temp_513$0x27e79c0, __temp_512$0x27e79c0, 0x200:i8
Optimizing: ldelema __temp_507$0x27e79c0, trigger$0x2556d40, __temp_510$0x27e79c0
Optimizing: sub __temp_508$0x27e79c0, __temp_513$0x27e79c0, __temp_510$0x27e79c0
Optimizing: mul __temp_508$0x27e79c0, 0x8:i, __temp_508$0x27e79c0
Optimizing: sti 0x200001058:i, __temp_507$0x27e79c0
Optimizing: sti 0x200001060:i, __temp_508$0x27e79c0
Optimizing: lda __temp_514$0x27e79c0, pmem_in$0x2556d40
Optimizing: mov __temp_515$0x27e79c0, 0x8:i
Optimizing: sti 0x200001068:i, __temp_514$0x27e79c0
Optimizing: sti 0x200001070:i, __temp_515$0x27e79c0
Optimizing: asm "mov $0x0:msq, 0x200001078:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001080:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001088:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001090:msq"
Optimizing: asm "mov $0x200001078:msq, 0x200001098:msq"
Optimizing: asm "mov $0x200001080:msq, 0x2000010a0:msq"
Optimizing: asm "newr 0x200001088, 0x200001090, 0x200001098, 0x2000010a0"
Optimizing: ldi __temp_496$0x27e79c0, 0x100000400:i
Optimizing: ldi __temp_497$0x27e79c0, 0x100000408:i
Optimizing: add __temp_498$0x27e79c0, __temp_496$0x27e79c0, __temp_497$0x27e79c0
Optimizing: lda __temp_516$0x27e79c0, init_runner_stdin$0x2556d40
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, __temp_516$0x27e79c0
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0x10:i8
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0xA:i8
Optimizing: sub __temp_498$0x27e79c0, __temp_498$0x27e79c0, 0x8:i8
Optimizing: sti __temp_498$0x27e79c0, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xb:msq, 0x200001010:msq"
Optimizing: ldelema __temp_520$0x27e79c0, cx$0x2556d40, 0x0:i8
Optimizing: sub __temp_521$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_521$0x27e79c0, 0x8:i, __temp_521$0x27e79c0
Optimizing: sti 0x200001018:i, __temp_520$0x27e79c0
Optimizing: sti 0x200001020:i, __temp_521$0x27e79c0
Optimizing: ldelema __temp_522$0x27e79c0, cy$0x2556d40, 0x0:i8
Optimizing: sub __temp_523$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_523$0x27e79c0, 0x8:i, __temp_523$0x27e79c0
Optimizing: sti 0x200001028:i, __temp_522$0x27e79c0
Optimizing: sti 0x200001030:i, __temp_523$0x27e79c0
Optimizing: ldelema __temp_524$0x27e79c0, cz$0x2556d40, 0x0:i8
Optimizing: sub __temp_525$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_525$0x27e79c0, 0x8:i, __temp_525$0x27e79c0
Optimizing: sti 0x200001038:i, __temp_524$0x27e79c0
Optimizing: sti 0x200001040:i, __temp_525$0x27e79c0
Optimizing: ldelema __temp_526$0x27e79c0, cw$0x2556d40, 0x0:i8
Optimizing: sub __temp_527$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_527$0x27e79c0, 0x8:i, __temp_527$0x27e79c0
Optimizing: sti 0x200001048:i, __temp_526$0x27e79c0
Optimizing: sti 0x200001050:i, __temp_527$0x27e79c0
Optimizing: ldelema __temp_528$0x27e79c0, x$0x2556d40, 0x0:i8
Optimizing: sub __temp_529$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_529$0x27e79c0, 0x8:i, __temp_529$0x27e79c0
Optimizing: sti 0x200001058:i, __temp_528$0x27e79c0
Optimizing: sti 0x200001060:i, __temp_529$0x27e79c0
Optimizing: ldelema __temp_530$0x27e79c0, y$0x2556d40, 0x0:i8
Optimizing: sub __temp_531$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_531$0x27e79c0, 0x8:i, __temp_531$0x27e79c0
Optimizing: sti 0x200001068:i, __temp_530$0x27e79c0
Optimizing: sti 0x200001070:i, __temp_531$0x27e79c0
Optimizing: ldelema __temp_532$0x27e79c0, z$0x2556d40, 0x0:i8
Optimizing: sub __temp_533$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_533$0x27e79c0, 0x8:i, __temp_533$0x27e79c0
Optimizing: sti 0x200001078:i, __temp_532$0x27e79c0
Optimizing: sti 0x200001080:i, __temp_533$0x27e79c0
Optimizing: ldelema __temp_534$0x27e79c0, w$0x2556d40, 0x0:i8
Optimizing: sub __temp_535$0x27e79c0, 0x2:i8, 0x0:i8
Optimizing: mul __temp_535$0x27e79c0, 0x8:i, __temp_535$0x27e79c0
Optimizing: sti 0x200001088:i, __temp_534$0x27e79c0
Optimizing: sti 0x200001090:i, __temp_535$0x27e79c0
Optimizing: ldelema __temp_536$0x27e79c0, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_537$0x27e79c0, 0xA:i8, 0x0:i8
Optimizing: mul __temp_537$0x27e79c0, 0x8:i, __temp_537$0x27e79c0
Optimizing: sti 0x200001098:i, __temp_536$0x27e79c0
Optimizing: sti 0x2000010A0:i, __temp_537$0x27e79c0
Optimizing: lda __temp_538$0x27e79c0, iter$0x2556d40
Optimizing: mov __temp_539$0x27e79c0, 0x8:i
Optimizing: sti 0x2000010A8:i, __temp_538$0x27e79c0
Optimizing: sti 0x2000010B0:i, __temp_539$0x27e79c0
Optimizing: lda __temp_540$0x27e79c0, pmem_in$0x2556d40
Optimizing: mov __temp_541$0x27e79c0, 0x8:i
Optimizing: sti 0x2000010B8:i, __temp_540$0x27e79c0
Optimizing: sti 0x2000010C0:i, __temp_541$0x27e79c0
Optimizing: asm "mov $0x1:msq, 0x2000010c8:msq"
Optimizing: div __temp_544$0x27e79c0, 0xA:i8, 0xA:i8
Optimizing: add __temp_545$0x27e79c0, __temp_544$0x27e79c0, 0x1:i8
Optimizing: mul __temp_546$0x27e79c0, __temp_545$0x27e79c0, 0x200:i8
Optimizing: ldelema __temp_542$0x27e79c0, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_543$0x27e79c0, __temp_546$0x27e79c0, 0x0:i8
Optimizing: mul __temp_543$0x27e79c0, 0x8:i, __temp_543$0x27e79c0
Optimizing: sti 0x2000010D0:i, __temp_542$0x27e79c0
Optimizing: sti 0x2000010D8:i, __temp_543$0x27e79c0
Optimizing: asm "mov $__newr0:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x200001000:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010f0:msq"
Optimizing: asm "mov $0x2000010c8:msq, 0x2000010f8:msq"
Optimizing: asm "mov $0x2000010e0:msq, 0x200001100:msq"
Optimizing: asm "newr 0x2000010e8, 0x2000010f0, 0x2000010f8, 0x200001100"
Optimizing: ldi __temp_517$0x27e79c0, 0x100000400:i
Optimizing: ldi __temp_518$0x27e79c0, 0x100000408:i
Optimizing: add __temp_519$0x27e79c0, __temp_517$0x27e79c0, __temp_518$0x27e79c0
Optimizing: lda __temp_547$0x27e79c0, on_init1_finished_stdin_only$0x2556d40
Optimizing: sub __temp_519$0x27e79c0, __temp_519$0x27e79c0, 0x8:i8
Optimizing: sti __temp_519$0x27e79c0, __temp_547$0x27e79c0
Optimizing: sub __temp_519$0x27e79c0, __temp_519$0x27e79c0, 0x8:i8
Optimizing: sti __temp_519$0x27e79c0, 0x0:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x2:msq, 0x200001010:msq"
Optimizing: div __temp_553$0x27f5740, 0xA:i8, 0xA:i8
Optimizing: add __temp_554$0x27f5740, __temp_553$0x27f5740, 0x1:i8
Optimizing: mul __temp_555$0x27f5740, __temp_554$0x27f5740, 0x200:i8
Optimizing: ldelema __temp_551$0x27f5740, trigger$0x2556d40, 0x0:i8
Optimizing: sub __temp_552$0x27f5740, __temp_555$0x27f5740, 0x0:i8
Optimizing: mul __temp_552$0x27f5740, 0x8:i, __temp_552$0x27f5740
Optimizing: sti 0x200001018:i, __temp_551$0x27f5740
Optimizing: sti 0x200001020:i, __temp_552$0x27f5740
Optimizing: lda __temp_556$0x27f5740, pmem_in$0x2556d40
Optimizing: mov __temp_557$0x27f5740, 0x8:i
Optimizing: sti 0x200001028:i, __temp_556$0x27f5740
Optimizing: sti 0x200001030:i, __temp_557$0x27f5740
Optimizing: asm "mov $0x0:msq, 0x200001038:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001040:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001048:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001050:msq"
Optimizing: asm "mov $0x200001038:msq, 0x200001058:msq"
Optimizing: asm "mov $0x200001040:msq, 0x200001060:msq"
Optimizing: asm "newr 0x200001048, 0x200001050, 0x200001058, 0x200001060"
Optimizing: ldi __temp_548$0x27f5740, 0x100000400:i
Optimizing: ldi __temp_549$0x27f5740, 0x100000408:i
Optimizing: add __temp_550$0x27f5740, __temp_548$0x27f5740, __temp_549$0x27f5740
Optimizing: lda __temp_558$0x27f5740, init0_stdin_only$0x2556d40
Optimizing: sub __temp_550$0x27f5740, __temp_550$0x27f5740, 0x8:i8
Optimizing: sti __temp_550$0x27f5740, __temp_558$0x27f5740
Optimizing: sub __temp_550$0x27f5740, __temp_550$0x27f5740, 0x8:i8
Optimizing: sti __temp_550$0x27f5740, 0x0:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
invoking "ld0 -lcrt -o kmeans-stdin-to-pmem.bin kmeans-stdin-to-pmem.o -g"
ld0 search paths:
/home/progman/workspace/d-thinker/libi0/libi0
----------
__memcmp_se with symbol == 0x2abea40 on scope 0x2879808
__memcmp_se already inserted
----------
_get_from_sar_array with symbol == 0x2a23e40 on scope 0x2879808
_get_from_sar_array already inserted
----------
_get_new_pa with symbol == 0x2a37360 on scope 0x2879808
_get_new_pa already inserted
----------
_get_new_sar with symbol == 0x2a103a0 on scope 0x2879808
_get_new_sar already inserted
----------
_get_new_sar_ext with symbol == 0x2a15fc0 on scope 0x2879808
_get_new_sar_ext already inserted
----------
_output_centroids with symbol == 0x2891ae0 on scope 0x287b268
_output_centroids already inserted
----------
_output_debug with symbol == 0x29fad90 on scope 0x2879808
_output_debug already inserted
----------
_syscall_malloc with symbol == 0x29f5df0 on scope 0x2879808
_syscall_malloc already inserted
----------
_syscall_malloc_ext with symbol == 0x29ffeb0 on scope 0x2879808
_syscall_malloc_ext already inserted
----------
ci with symbol == 0x2910c10 on scope 0x287b268
----------
cw with symbol == 0x2885f60 on scope 0x287b268
----------
cx with symbol == 0x2882350 on scope 0x287b268
----------
cy with symbol == 0x2883840 on scope 0x287b268
----------
cz with symbol == 0x2884bd0 on scope 0x287b268
----------
exp with symbol == 0x2998090 on scope 0x287b268
exp with symbol == 0x2a5bc30 on scope 0x2879808
exp already inserted
----------
exp_remez13_05_05 with symbol == 0x2bd2990 on scope 0x2879808
exp_remez13_05_05 already inserted
----------
get_my_task_id with symbol == 0x2998200 on scope 0x287b268
get_my_task_id with symbol == 0x2a7e7e0 on scope 0x2879808
get_my_task_id already inserted
----------
get_new_task_id with symbol == 0x2998300 on scope 0x287b268
get_new_task_id with symbol == 0x2a7f6b0 on scope 0x2879808
get_new_task_id already inserted
----------
get_time_diff_and_update with symbol == 0x2bd0800 on scope 0x2879808
get_time_diff_and_update already inserted
----------
gettime with symbol == 0x2acaad0 on scope 0x2879808
gettime already inserted
----------
init0 with symbol == 0x2955480 on scope 0x287b268
init0 already inserted
----------
init0_stdin_only with symbol == 0x2994c90 on scope 0x287b268
init0_stdin_only already inserted
----------
init_PR_var with symbol == 0x29fd0a0 on scope 0x2879808
init_PR_var already inserted
----------
init_runner with symbol == 0x2942160 on scope 0x287b268
init_runner already inserted
----------
init_runner_stdin with symbol == 0x28ea140 on scope 0x287b268
init_runner_stdin already inserted
----------
input_char with symbol == 0x2998790 on scope 0x287b268
input_char with symbol == 0x2acd170 on scope 0x2879808
input_char already inserted
----------
input_double with symbol == 0x29985d0 on scope 0x287b268
input_double with symbol == 0x2b540a0 on scope 0x2879808
input_double already inserted
----------
input_double_after_dot with symbol == 0x2b4d3e0 on scope 0x2879808
----------
input_double_exit with symbol == 0x2b4ecb0 on scope 0x2879808
----------
input_line with symbol == 0x2998920 on scope 0x287b268
input_line with symbol == 0x2aeca70 on scope 0x2879808
input_line already inserted
----------
input_line_exit with symbol == 0x2aeb340 on scope 0x2879808
----------
input_long with symbol == 0x2998e40 on scope 0x287b268
input_long with symbol == 0x2b046e0 on scope 0x2879808
input_long already inserted
----------
input_long_exit with symbol == 0x2b02e40 on scope 0x2879808
----------
input_q with symbol == 0x2936c90 on scope 0x287b268
input_q with symbol == 0x2ae30e0 on scope 0x2879808
input_q already inserted
----------
input_q_exit with symbol == 0x2ae2090 on scope 0x2879808
----------
ipow with symbol == 0x2999150 on scope 0x287b268
ipow with symbol == 0x2a1fec0 on scope 0x2879808
ipow already inserted
----------
iter with symbol == 0x28bfea0 on scope 0x287b268
----------
kmeans_finish with symbol == 0x28878d0 on scope 0x287b268
kmeans_finish already inserted
----------
lcn with symbol == 0x28aab90 on scope 0x287b268
----------
lcw with symbol == 0x28a9a80 on scope 0x287b268
----------
lcx with symbol == 0x28a66b0 on scope 0x287b268
----------
lcy with symbol == 0x28a7860 on scope 0x287b268
----------
lcz with symbol == 0x28a8970 on scope 0x287b268
----------
main with symbol == 0x2997da0 on scope 0x287b268
main already inserted
----------
memcmp with symbol == 0x2ac3a00 on scope 0x2879808
memcmp already inserted
----------
memcpy with symbol == 0x2abc000 on scope 0x2879808
memcpy already inserted
----------
memset0 with symbol == 0x2ac7290 on scope 0x2879808
memset0 already inserted
----------
on_init1_finished with symbol == 0x2935cc0 on scope 0x287b268
on_init1_finished already inserted
----------
on_init1_finished_stdin_only with symbol == 0x297fe10 on scope 0x287b268
on_init1_finished_stdin_only already inserted
----------
on_recluster_finished with symbol == 0x28ced80 on scope 0x287b268
on_recluster_finished already inserted
----------
output_centroids with symbol == 0x28934b0 on scope 0x287b268
output_centroids already inserted
----------
output_centroids_with_point_num with symbol == 0x2892870 on scope 0x287b268
output_centroids_with_point_num already inserted
----------
output_char with symbol == 0x287f200 on scope 0x287b268
output_char with symbol == 0x2a821b0 on scope 0x2879808
output_char already inserted
----------
output_char_str with symbol == 0x2999af0 on scope 0x287b268
output_char_str with symbol == 0x2a54870 on scope 0x2879808
output_char_str already inserted
----------
output_double with symbol == 0x2999dd0 on scope 0x287b268
output_double with symbol == 0x2b24b30 on scope 0x2879808
output_double already inserted
----------
output_double_binary with symbol == 0x2999ea0 on scope 0x287b268
output_double_binary with symbol == 0x2b17c10 on scope 0x2879808
output_double_binary already inserted
----------
output_id with symbol == 0x299a0c0 on scope 0x287b268
output_id with symbol == 0x2a50e60 on scope 0x2879808
output_id already inserted
----------
output_q with symbol == 0x287fb30 on scope 0x287b268
output_q with symbol == 0x2a91930 on scope 0x2879808
output_q already inserted
----------
output_q_digits with symbol == 0x299a2c0 on scope 0x287b268
output_q_digits with symbol == 0x2aa37f0 on scope 0x2879808
output_q_digits already inserted
----------
output_q_hex with symbol == 0x299a5b0 on scope 0x287b268
output_q_hex with symbol == 0x2a4f780 on scope 0x2879808
output_q_hex already inserted
----------
output_q_hex_j1 with symbol == 0x2aa9e40 on scope 0x2879808
----------
output_q_hex_j2 with symbol == 0x2a4b7a0 on scope 0x2879808
----------
output_q_j1 with symbol == 0x2a87ef0 on scope 0x2879808
----------
output_q_j2 with symbol == 0x2a8cd60 on scope 0x2879808
----------
output_str with symbol == 0x299a740 on scope 0x287b268
output_str with symbol == 0x2a58e50 on scope 0x2879808
output_str already inserted
----------
output_str_j1 with symbol == 0x2a57910 on scope 0x2879808
----------
p_align_to with symbol == 0x2a32740 on scope 0x2879808
p_align_to already inserted
----------
pc_get with symbol == 0x2a64dc0 on scope 0x2879808
pc_get already inserted
----------
pc_sync with symbol == 0x2a6b6a0 on scope 0x2879808
pc_sync already inserted
----------
pc_write with symbol == 0x2a68ef0 on scope 0x2879808
pc_write already inserted
----------
pmem_in with symbol == 0x2958f60 on scope 0x287b268
----------
pralloc with symbol == 0x2a3c680 on scope 0x2879808
pralloc already inserted
----------
print_time_diff_and_update with symbol == 0x2bc81e0 on scope 0x2879808
print_time_diff_and_update already inserted
----------
rand with symbol == 0x287e050 on scope 0x287b268
rand already inserted
----------
recluster_runner with symbol == 0x2904d30 on scope 0x287b268
recluster_runner already inserted
----------
reg1 with symbol == 0x28d4f70 on scope 0x287b268
reg1 with symbol == 0x2a20f30 on scope 0x2879808
----------
reg2 with symbol == 0x28d5eb0 on scope 0x287b268
reg2 with symbol == 0x2a21440 on scope 0x2879808
----------
reg3 with symbol == 0x28d6c50 on scope 0x287b268
reg3 with symbol == 0x2abdb90 on scope 0x2879808
----------
reg4 with symbol == 0x28d7bd0 on scope 0x287b268
reg4 with symbol == 0x2abe530 on scope 0x2879808
----------
s_align_to with symbol == 0x2a06620 on scope 0x2879808
s_align_to already inserted
----------
s_align_to_ext with symbol == 0x2a088a0 on scope 0x2879808
s_align_to_ext already inserted
----------
s_align_to_page with symbol == 0x2a0ab20 on scope 0x2879808
s_align_to_page already inserted
----------
shalloc with symbol == 0x2a302c0 on scope 0x2879808
shalloc already inserted
----------
shalloc_ext with symbol == 0x2a489d0 on scope 0x2879808
shalloc_ext already inserted
----------
shalloced_replicas with symbol == 0x2a1ac80 on scope 0x2879808
shalloced_replicas already inserted
----------
shuffle_runner with symbol == 0x2962970 on scope 0x287b268
shuffle_runner already inserted
----------
slisten with symbol == 0x2a7d930 on scope 0x2879808
slisten already inserted
----------
sqrt with symbol == 0x299ad90 on scope 0x287b268
sqrt with symbol == 0x2a60380 on scope 0x2879808
sqrt already inserted
----------
srand with symbol == 0x293cdf0 on scope 0x287b268
srand already inserted
----------
sread with symbol == 0x2a72f40 on scope 0x2879808
sread already inserted
----------
start_iteration with symbol == 0x292a620 on scope 0x287b268
start_iteration already inserted
----------
start_shuffle with symbol == 0x297a7b0 on scope 0x287b268
start_shuffle already inserted
----------
str_to_long with symbol == 0x2aacab0 on scope 0x2879808
str_to_long already inserted
----------
str_to_long_exit with symbol == 0x2b70ab0 on scope 0x2879808
----------
strncmp with symbol == 0x2ab21b0 on scope 0x2879808
strncmp already inserted
----------
strncmp_e with symbol == 0x2ab1370 on scope 0x2879808
----------
strncmp_g with symbol == 0x2ab0560 on scope 0x2879808
----------
strncmp_l with symbol == 0x2ab0bc0 on scope 0x2879808
----------
strncmp_ne with symbol == 0x2ab0000 on scope 0x2879808
----------
strncmp_while with symbol == 0x2aaf610 on scope 0x2879808
----------
swrite with symbol == 0x2a7b160 on scope 0x2879808
swrite already inserted
----------
task_id_to_ec_range with symbol == 0x299b000 on scope 0x287b268
task_id_to_ec_range with symbol == 0x2a80f60 on scope 0x2879808
task_id_to_ec_range already inserted
----------
time_add with symbol == 0x2bbd4d0 on scope 0x2879808
time_add already inserted
----------
time_subtract with symbol == 0x2bb6ed0 on scope 0x2879808
time_subtract already inserted
----------
trigger with symbol == 0x2887ac0 on scope 0x287b268
----------
usleep with symbol == 0x2bd22f0 on scope 0x2879808
usleep already inserted
----------
w with symbol == 0x28e0dc0 on scope 0x287b268
----------
x with symbol == 0x28def30 on scope 0x287b268
----------
y with symbol == 0x28df960 on scope 0x287b268
----------
z with symbol == 0x28e0390 on scope 0x287b268
----------
new global symbols:
├─__memcmp_se
├─_get_from_sar_array
├─_get_new_pa
├─_get_new_sar
├─_get_new_sar_ext
├─_output_centroids
├─_output_debug
├─_syscall_malloc
├─_syscall_malloc_ext
├─ci
├─cw
├─cx
├─cy
├─cz
├─exp
├─exp_remez13_05_05
├─get_my_task_id
├─get_new_task_id
├─get_time_diff_and_update
├─gettime
├─init0
├─init0_stdin_only
├─init_PR_var
├─init_runner
├─init_runner_stdin
├─input_char
├─input_double
├─input_double_after_dot
├─input_double_exit
├─input_line
├─input_line_exit
├─input_long
├─input_long_exit
├─input_q
├─input_q_exit
├─ipow
├─iter
├─kmeans_finish
├─lcn
├─lcw
├─lcx
├─lcy
├─lcz
├─main
├─memcmp
├─memcpy
├─memset0
├─on_init1_finished
├─on_init1_finished_stdin_only
├─on_recluster_finished
├─output_centroids
├─output_centroids_with_point_num
├─output_char
├─output_char_str
├─output_double
├─output_double_binary
├─output_id
├─output_q
├─output_q_digits
├─output_q_hex
├─output_q_hex_j1
├─output_q_hex_j2
├─output_q_j1
├─output_q_j2
├─output_str
├─output_str_j1
├─p_align_to
├─pc_get
├─pc_sync
├─pc_write
├─pmem_in
├─pralloc
├─print_time_diff_and_update
├─rand
├─recluster_runner
├─reg1
├─reg2
├─reg3
├─reg4
├─s_align_to
├─s_align_to_ext
├─s_align_to_page
├─shalloc
├─shalloc_ext
├─shalloced_replicas
├─shuffle_runner
├─slisten
├─sqrt
├─srand
├─sread
├─start_iteration
├─start_shuffle
├─str_to_long
├─str_to_long_exit
├─strncmp
├─strncmp_e
├─strncmp_g
├─strncmp_l
├─strncmp_ne
├─strncmp_while
├─swrite
├─task_id_to_ec_range
├─time_add
├─time_subtract
├─trigger
├─usleep
├─w
├─x
├─y
└─z
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol cx in function _output_centroids
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol cy in function _output_centroids
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol cz in function _output_centroids
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol cw in function _output_centroids
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_q in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol output_char in function _output_centroids
[LINK]: relinked symbol _output_centroids in function output_centroids_with_point_num
[LINK]: relinked symbol _output_centroids in function output_centroids
[LINK]: relinked symbol output_centroids in function kmeans_finish
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol trigger in function on_recluster_finished
[LINK]: relinked symbol lcx in function on_recluster_finished
[LINK]: relinked symbol lcy in function on_recluster_finished
[LINK]: relinked symbol lcz in function on_recluster_finished
[LINK]: relinked symbol lcw in function on_recluster_finished
[LINK]: relinked symbol lcn in function on_recluster_finished
[LINK]: relinked symbol cx in function on_recluster_finished
[LINK]: relinked symbol cy in function on_recluster_finished
[LINK]: relinked symbol cz in function on_recluster_finished
[LINK]: relinked symbol cw in function on_recluster_finished
[LINK]: relinked symbol cx in function on_recluster_finished
[LINK]: relinked symbol cy in function on_recluster_finished
[LINK]: relinked symbol cz in function on_recluster_finished
[LINK]: relinked symbol cw in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol output_q in function on_recluster_finished
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol output_char in function on_recluster_finished
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol iter in function on_recluster_finished
[LINK]: relinked symbol kmeans_finish in function on_recluster_finished
[LINK]: relinked symbol start_iteration in function on_recluster_finished
[LINK]: relinked symbol lcx in function recluster_runner
[LINK]: relinked symbol lcy in function recluster_runner
[LINK]: relinked symbol lcz in function recluster_runner
[LINK]: relinked symbol lcw in function recluster_runner
[LINK]: relinked symbol lcn in function recluster_runner
[LINK]: relinked symbol x in function recluster_runner
[LINK]: relinked symbol y in function recluster_runner
[LINK]: relinked symbol z in function recluster_runner
[LINK]: relinked symbol w in function recluster_runner
[LINK]: relinked symbol cx in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol cy in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol cz in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol cw in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol cx in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol cy in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol cz in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol cw in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol reg1 in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol reg2 in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol reg3 in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol reg4 in function recluster_runner
[LINK]: relinked symbol trigger in function recluster_runner
[LINK]: relinked symbol trigger in function start_iteration
[LINK]: relinked symbol x in function start_iteration
[LINK]: relinked symbol y in function start_iteration
[LINK]: relinked symbol z in function start_iteration
[LINK]: relinked symbol w in function start_iteration
[LINK]: relinked symbol ci in function start_iteration
[LINK]: relinked symbol cx in function start_iteration
[LINK]: relinked symbol cy in function start_iteration
[LINK]: relinked symbol cz in function start_iteration
[LINK]: relinked symbol cw in function start_iteration
[LINK]: relinked symbol trigger in function start_iteration
[LINK]: relinked symbol lcx in function start_iteration
[LINK]: relinked symbol lcy in function start_iteration
[LINK]: relinked symbol lcz in function start_iteration
[LINK]: relinked symbol lcw in function start_iteration
[LINK]: relinked symbol lcn in function start_iteration
[LINK]: relinked symbol recluster_runner in function start_iteration
[LINK]: relinked symbol iter in function start_iteration
[LINK]: relinked symbol cx in function start_iteration
[LINK]: relinked symbol cy in function start_iteration
[LINK]: relinked symbol cz in function start_iteration
[LINK]: relinked symbol cw in function start_iteration
[LINK]: relinked symbol lcx in function start_iteration
[LINK]: relinked symbol lcy in function start_iteration
[LINK]: relinked symbol lcz in function start_iteration
[LINK]: relinked symbol lcw in function start_iteration
[LINK]: relinked symbol lcn in function start_iteration
[LINK]: relinked symbol trigger in function start_iteration
[LINK]: relinked symbol on_recluster_finished in function start_iteration
[LINK]: relinked symbol iter in function start_iteration
[LINK]: relinked symbol trigger in function on_init1_finished
[LINK]: relinked symbol trigger in function on_init1_finished
[LINK]: relinked symbol x in function on_init1_finished
[LINK]: relinked symbol cx in function on_init1_finished
[LINK]: relinked symbol y in function on_init1_finished
[LINK]: relinked symbol cy in function on_init1_finished
[LINK]: relinked symbol z in function on_init1_finished
[LINK]: relinked symbol cz in function on_init1_finished
[LINK]: relinked symbol w in function on_init1_finished
[LINK]: relinked symbol cw in function on_init1_finished
[LINK]: relinked symbol iter in function on_init1_finished
[LINK]: relinked symbol start_iteration in function on_init1_finished
[LINK]: relinked symbol srand in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol x in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol y in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol z in function init_runner
[LINK]: relinked symbol input_q in function init_runner
[LINK]: relinked symbol w in function init_runner
[LINK]: relinked symbol trigger in function init_runner
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol x in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol y in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol z in function init_runner_stdin
[LINK]: relinked symbol input_q in function init_runner_stdin
[LINK]: relinked symbol w in function init_runner_stdin
[LINK]: relinked symbol trigger in function init_runner_stdin
[LINK]: relinked symbol trigger in function init0
[LINK]: relinked symbol x in function init0
[LINK]: relinked symbol y in function init0
[LINK]: relinked symbol z in function init0
[LINK]: relinked symbol w in function init0
[LINK]: relinked symbol trigger in function init0
[LINK]: relinked symbol init_runner in function init0
[LINK]: relinked symbol cx in function init0
[LINK]: relinked symbol cy in function init0
[LINK]: relinked symbol cz in function init0
[LINK]: relinked symbol cw in function init0
[LINK]: relinked symbol x in function init0
[LINK]: relinked symbol y in function init0
[LINK]: relinked symbol z in function init0
[LINK]: relinked symbol w in function init0
[LINK]: relinked symbol trigger in function init0
[LINK]: relinked symbol iter in function init0
[LINK]: relinked symbol trigger in function init0
[LINK]: relinked symbol on_init1_finished in function init0
[LINK]: relinked symbol x in function shuffle_runner
[LINK]: relinked symbol y in function shuffle_runner
[LINK]: relinked symbol z in function shuffle_runner
[LINK]: relinked symbol w in function shuffle_runner
[LINK]: relinked symbol pmem_in in function shuffle_runner
[LINK]: relinked symbol pmem_in in function shuffle_runner
[LINK]: relinked symbol pmem_in in function shuffle_runner
[LINK]: relinked symbol pmem_in in function shuffle_runner
[LINK]: relinked symbol trigger in function shuffle_runner
[LINK]: relinked symbol trigger in function start_shuffle
[LINK]: relinked symbol x in function start_shuffle
[LINK]: relinked symbol y in function start_shuffle
[LINK]: relinked symbol z in function start_shuffle
[LINK]: relinked symbol w in function start_shuffle
[LINK]: relinked symbol ci in function start_shuffle
[LINK]: relinked symbol cx in function start_shuffle
[LINK]: relinked symbol cy in function start_shuffle
[LINK]: relinked symbol cz in function start_shuffle
[LINK]: relinked symbol cw in function start_shuffle
[LINK]: relinked symbol trigger in function start_shuffle
[LINK]: relinked symbol pmem_in in function start_shuffle
[LINK]: relinked symbol pmem_in in function start_shuffle
[LINK]: relinked symbol lcx in function start_shuffle
[LINK]: relinked symbol lcy in function start_shuffle
[LINK]: relinked symbol lcz in function start_shuffle
[LINK]: relinked symbol lcw in function start_shuffle
[LINK]: relinked symbol lcn in function start_shuffle
[LINK]: relinked symbol shuffle_runner in function start_shuffle
[LINK]: relinked symbol trigger in function on_init1_finished_stdin_only
[LINK]: relinked symbol trigger in function on_init1_finished_stdin_only
[LINK]: relinked symbol start_shuffle in function on_init1_finished_stdin_only
[LINK]: relinked symbol pmem_in in function init0_stdin_only
[LINK]: relinked symbol trigger in function init0_stdin_only
[LINK]: relinked symbol x in function init0_stdin_only
[LINK]: relinked symbol y in function init0_stdin_only
[LINK]: relinked symbol z in function init0_stdin_only
[LINK]: relinked symbol w in function init0_stdin_only
[LINK]: relinked symbol trigger in function init0_stdin_only
[LINK]: relinked symbol pmem_in in function init0_stdin_only
[LINK]: relinked symbol init_runner_stdin in function init0_stdin_only
[LINK]: relinked symbol cx in function init0_stdin_only
[LINK]: relinked symbol cy in function init0_stdin_only
[LINK]: relinked symbol cz in function init0_stdin_only
[LINK]: relinked symbol cw in function init0_stdin_only
[LINK]: relinked symbol x in function init0_stdin_only
[LINK]: relinked symbol y in function init0_stdin_only
[LINK]: relinked symbol z in function init0_stdin_only
[LINK]: relinked symbol w in function init0_stdin_only
[LINK]: relinked symbol trigger in function init0_stdin_only
[LINK]: relinked symbol iter in function init0_stdin_only
[LINK]: relinked symbol pmem_in in function init0_stdin_only
[LINK]: relinked symbol trigger in function init0_stdin_only
[LINK]: relinked symbol on_init1_finished_stdin_only in function init0_stdin_only
[LINK]: relinked symbol trigger in function main
[LINK]: relinked symbol pmem_in in function main
[LINK]: relinked symbol init0_stdin_only in function main
[LINK]: relinked symbol ipow in function exp_remez13_05_05
[LINK]: relinked symbol _syscall_malloc in function _get_new_sar
[LINK]: relinked symbol _syscall_malloc_ext in function _get_new_sar_ext
[LINK]: relinked symbol s_align_to_page in function shalloc
[LINK]: relinked symbol s_align_to in function shalloc
[LINK]: relinked symbol _get_from_sar_array in function shalloc
[LINK]: relinked symbol _get_new_sar in function shalloc
[LINK]: relinked symbol init_PR_var in function shalloc
[LINK]: relinked symbol _get_new_sar in function shalloc
[LINK]: relinked symbol p_align_to in function pralloc
[LINK]: relinked symbol init_PR_var in function pralloc
[LINK]: relinked symbol _get_new_pa in function pralloc
[LINK]: relinked symbol s_align_to_page in function shalloc_ext
[LINK]: relinked symbol s_align_to_ext in function shalloc_ext
[LINK]: relinked symbol _get_new_sar_ext in function shalloc_ext
[LINK]: relinked symbol init_PR_var in function shalloc_ext
[LINK]: relinked symbol _get_new_sar_ext in function shalloc_ext
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol output_char in function output_q
[LINK]: relinked symbol output_q_j1 in function output_q
[LINK]: relinked symbol output_q_j2 in function output_q
[LINK]: relinked symbol output_char in function output_q
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_q_hex_j1 in function output_q_hex
[LINK]: relinked symbol output_q_hex_j2 in function output_q_hex
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_q_hex in function output_id
[LINK]: relinked symbol output_char in function output_char_str
[LINK]: relinked symbol output_str_j1 in function output_str
[LINK]: relinked symbol output_char in function output_str
[LINK]: relinked symbol input_q_exit in function input_q
[LINK]: relinked symbol input_line_exit in function input_line
[LINK]: relinked symbol input_long_exit in function input_long
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_q in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_q in function output_double_binary
[LINK]: relinked symbol output_char in function output_double
[LINK]: relinked symbol output_double_binary in function output_double
[LINK]: relinked symbol output_double_binary in function output_double
[LINK]: relinked symbol output_q in function output_double
[LINK]: relinked symbol output_char in function output_double
[LINK]: relinked symbol output_q in function output_double
[LINK]: relinked symbol input_double_after_dot in function input_double
[LINK]: relinked symbol input_double_exit in function input_double
[LINK]: relinked symbol input_long in function input_double
[LINK]: relinked symbol input_long in function input_double
[LINK]: relinked symbol ipow in function input_double
[LINK]: relinked symbol ipow in function input_double
[LINK]: relinked symbol str_to_long_exit in function str_to_long
[LINK]: relinked symbol strncmp_while in function strncmp
[LINK]: relinked symbol strncmp_ne in function strncmp
[LINK]: relinked symbol strncmp_g in function strncmp
[LINK]: relinked symbol strncmp_l in function strncmp
[LINK]: relinked symbol strncmp_e in function strncmp
[LINK]: relinked symbol reg1 in function __memcmp_se
[LINK]: relinked symbol reg2 in function __memcmp_se
[LINK]: relinked symbol reg3 in function __memcmp_se
[LINK]: relinked symbol reg4 in function __memcmp_se
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol gettime in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol time_subtract in function print_time_diff_and_update
[LINK]: relinked symbol output_q in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_q_digits in function print_time_diff_and_update
[LINK]: relinked symbol gettime in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol time_subtract in function get_time_diff_and_update
[LINK]: fixed __memcmp_se
[LINK]: fixed _get_from_sar_array
[LINK]: fixed _get_new_pa
[LINK]: fixed _get_new_sar
[LINK]: fixed _get_new_sar_ext
[LINK]: fixed _output_centroids
[LINK]: fixed _output_debug
[LINK]: fixed _syscall_malloc
[LINK]: fixed _syscall_malloc_ext
[LINK]: fixed ci
[LINK]: fixed cw
[LINK]: fixed cx
[LINK]: fixed cy
[LINK]: fixed cz
[LINK]: fixed exp
[LINK]: fixed exp_remez13_05_05
[LINK]: fixed get_my_task_id
[LINK]: fixed get_new_task_id
[LINK]: fixed get_time_diff_and_update
[LINK]: fixed gettime
[LINK]: fixed init0
[LINK]: fixed init0_stdin_only
[LINK]: fixed init_PR_var
[LINK]: fixed init_runner
[LINK]: fixed init_runner_stdin
[LINK]: fixed input_char
[LINK]: fixed input_double
[LINK]: fixed input_double_after_dot
[LINK]: fixed input_double_exit
[LINK]: fixed input_line
[LINK]: fixed input_line_exit
[LINK]: fixed input_long
[LINK]: fixed input_long_exit
[LINK]: fixed input_q
[LINK]: fixed input_q_exit
[LINK]: fixed ipow
[LINK]: fixed iter
[LINK]: fixed kmeans_finish
[LINK]: fixed lcn
[LINK]: fixed lcw
[LINK]: fixed lcx
[LINK]: fixed lcy
[LINK]: fixed lcz
[LINK]: fixed main
[LINK]: fixed memcmp
[LINK]: fixed memcpy
[LINK]: fixed memset0
[LINK]: fixed on_init1_finished
[LINK]: fixed on_init1_finished_stdin_only
[LINK]: fixed on_recluster_finished
[LINK]: fixed output_centroids
[LINK]: fixed output_centroids_with_point_num
[LINK]: fixed output_char
[LINK]: fixed output_char_str
[LINK]: fixed output_double
[LINK]: fixed output_double_binary
[LINK]: fixed output_id
[LINK]: fixed output_q
[LINK]: fixed output_q_digits
[LINK]: fixed output_q_hex
[LINK]: fixed output_q_hex_j1
[LINK]: fixed output_q_hex_j2
[LINK]: fixed output_q_j1
[LINK]: fixed output_q_j2
[LINK]: fixed output_str
[LINK]: fixed output_str_j1
[LINK]: fixed p_align_to
[LINK]: fixed pc_get
[LINK]: fixed pc_sync
[LINK]: fixed pc_write
[LINK]: fixed pmem_in
[LINK]: fixed pralloc
[LINK]: fixed print_time_diff_and_update
[LINK]: fixed rand
[LINK]: fixed recluster_runner
[LINK]: fixed reg1
[LINK]: fixed reg2
[LINK]: fixed reg3
[LINK]: fixed reg4
[LINK]: fixed s_align_to
[LINK]: fixed s_align_to_ext
[LINK]: fixed s_align_to_page
[LINK]: fixed shalloc
[LINK]: fixed shalloc_ext
[LINK]: fixed shalloced_replicas
[LINK]: fixed shuffle_runner
[LINK]: fixed slisten
[LINK]: fixed sqrt
[LINK]: fixed srand
[LINK]: fixed sread
[LINK]: fixed start_iteration
[LINK]: fixed start_shuffle
[LINK]: fixed str_to_long
[LINK]: fixed str_to_long_exit
[LINK]: fixed strncmp
[LINK]: fixed strncmp_e
[LINK]: fixed strncmp_g
[LINK]: fixed strncmp_l
[LINK]: fixed strncmp_ne
[LINK]: fixed strncmp_while
[LINK]: fixed swrite
[LINK]: fixed task_id_to_ec_range
[LINK]: fixed time_add
[LINK]: fixed time_subtract
[LINK]: fixed trigger
[LINK]: fixed usleep
[LINK]: fixed w
[LINK]: fixed x
[LINK]: fixed y
[LINK]: fixed z
[LINK]: Dep: main
[LINK]: Dep: init0_stdin_only
[LINK]: Dep: init_runner_stdin
[LINK]: Dep: on_init1_finished_stdin_only
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: input_q
[LINK]: Dep: start_shuffle
[LINK]: Dep: shuffle_runner
[LINK]: purged sym: __memcmp_se
[LINK]: purged sym: _get_from_sar_array
[LINK]: purged sym: _get_new_pa
[LINK]: purged sym: _get_new_sar
[LINK]: purged sym: _get_new_sar_ext
[LINK]: purged sym: _output_centroids
[LINK]: purged sym: _output_debug
[LINK]: purged sym: _syscall_malloc
[LINK]: purged sym: _syscall_malloc_ext
[LINK]: purged sym: exp
[LINK]: purged sym: exp_remez13_05_05
[LINK]: purged sym: get_my_task_id
[LINK]: purged sym: get_new_task_id
[LINK]: purged sym: get_time_diff_and_update
[LINK]: purged sym: gettime
[LINK]: purged sym: init0
[LINK]: purged sym: init_PR_var
[LINK]: purged sym: init_runner
[LINK]: purged sym: input_char
[LINK]: purged sym: input_double
[LINK]: purged sym: input_double_after_dot
[LINK]: purged sym: input_double_exit
[LINK]: purged sym: input_line
[LINK]: purged sym: input_line_exit
[LINK]: purged sym: input_long
[LINK]: purged sym: input_long_exit
[LINK]: purged sym: ipow
[LINK]: purged sym: kmeans_finish
[LINK]: purged sym: memcmp
[LINK]: purged sym: memcpy
[LINK]: purged sym: memset0
[LINK]: purged sym: on_init1_finished
[LINK]: purged sym: on_recluster_finished
[LINK]: purged sym: output_centroids
[LINK]: purged sym: output_centroids_with_point_num
[LINK]: purged sym: output_char
[LINK]: purged sym: output_char_str
[LINK]: purged sym: output_double
[LINK]: purged sym: output_double_binary
[LINK]: purged sym: output_id
[LINK]: purged sym: output_q
[LINK]: purged sym: output_q_digits
[LINK]: purged sym: output_q_hex
[LINK]: purged sym: output_q_hex_j1
[LINK]: purged sym: output_q_hex_j2
[LINK]: purged sym: output_q_j1
[LINK]: purged sym: output_q_j2
[LINK]: purged sym: output_str
[LINK]: purged sym: output_str_j1
[LINK]: purged sym: p_align_to
[LINK]: purged sym: pc_get
[LINK]: purged sym: pc_sync
[LINK]: purged sym: pc_write
[LINK]: purged sym: pralloc
[LINK]: purged sym: print_time_diff_and_update
[LINK]: purged sym: rand
[LINK]: purged sym: recluster_runner
[LINK]: purged sym: reg1
[LINK]: purged sym: reg2
[LINK]: purged sym: reg3
[LINK]: purged sym: reg4
[LINK]: purged sym: s_align_to
[LINK]: purged sym: s_align_to_ext
[LINK]: purged sym: s_align_to_page
[LINK]: purged sym: shalloc
[LINK]: purged sym: shalloc_ext
[LINK]: purged sym: shalloced_replicas
[LINK]: purged sym: slisten
[LINK]: purged sym: sqrt
[LINK]: purged sym: srand
[LINK]: purged sym: sread
[LINK]: purged sym: start_iteration
[LINK]: purged sym: str_to_long
[LINK]: purged sym: str_to_long_exit
[LINK]: purged sym: strncmp
[LINK]: purged sym: strncmp_e
[LINK]: purged sym: strncmp_g
[LINK]: purged sym: strncmp_l
[LINK]: purged sym: strncmp_ne
[LINK]: purged sym: strncmp_while
[LINK]: purged sym: swrite
[LINK]: purged sym: task_id_to_ec_range
[LINK]: purged sym: time_add
[LINK]: purged sym: time_subtract
[LINK]: purged sym: usleep
====================================================
Global scope: SIZE: 0x18000 {
    NAME: ci 	TYPE: int64[10] 	OFFSET: +0x20800001000
    NAME: cw 	TYPE: int64[2] 	OFFSET: +0x20800002000
    NAME: cx 	TYPE: int64[2] 	OFFSET: +0x20800003000
    NAME: cy 	TYPE: int64[2] 	OFFSET: +0x20800004000
    NAME: cz 	TYPE: int64[2] 	OFFSET: +0x20800005000
    NAME: init0_stdin_only 	TYPE: FUNCTION () =>void
    NAME: init_runner_stdin 	TYPE: FUNCTION (start:int64, end:int64) =>void
    NAME: input_q 	TYPE: FUNCTION () =>int64
    NAME: input_q_exit 	TYPE: LABEL
    NAME: iter 	TYPE: int64 	OFFSET: +0x20800006000
    NAME: lcn 	TYPE: int64[514] 	OFFSET: +0x20800007000
    NAME: lcw 	TYPE: int64[514] 	OFFSET: +0x20800009000
    NAME: lcx 	TYPE: int64[514] 	OFFSET: +0x2080000B000
    NAME: lcy 	TYPE: int64[514] 	OFFSET: +0x2080000D000
    NAME: lcz 	TYPE: int64[514] 	OFFSET: +0x2080000F000
    NAME: main 	TYPE: FUNCTION () =>void
    NAME: on_init1_finished_stdin_only 	TYPE: FUNCTION () =>void
    NAME: pmem_in 	TYPE: int64* 	OFFSET: +0x20800011000
    NAME: shuffle_runner 	TYPE: FUNCTION (start:int64, end:int64) =>void
    NAME: start_shuffle 	TYPE: FUNCTION () =>void
    NAME: trigger 	TYPE: int64[1024] 	OFFSET: +0x20800012000
    NAME: w 	TYPE: int64[10] 	OFFSET: +0x20800014000
    NAME: x 	TYPE: int64[10] 	OFFSET: +0x20800015000
    NAME: y 	TYPE: int64[10] 	OFFSET: +0x20800016000
    NAME: z 	TYPE: int64[10] 	OFFSET: +0x20800017000
    Function scope: SIZE: 0x58 {
        Local scope: SIZE: 0x58 {
            NAME: __temp_548 	TYPE: void* 	OFFSET: -0x8
            NAME: __temp_549 	TYPE: void* 	OFFSET: -0x10
            NAME: __temp_550 	TYPE: void* 	OFFSET: -0x18
            NAME: __temp_551 	TYPE: void* 	OFFSET: -0x20
            NAME: __temp_552 	TYPE: void* 	OFFSET: -0x28
            NAME: __temp_553 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_554 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_555 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_556 	TYPE: void* 	OFFSET: -0x48
            NAME: __temp_557 	TYPE: void* 	OFFSET: -0x50
            NAME: __temp_558 	TYPE: void* 	OFFSET: -0x58
        }
    }
    Function scope: SIZE: 0x1C8 {
        Local scope: SIZE: 0x1C8 {
            NAME: __temp_489 	TYPE: LABEL
            NAME: __temp_490 	TYPE: LABEL
            NAME: __temp_491 	TYPE: LABEL
            NAME: __temp_492 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_495 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_496 	TYPE: void* 	OFFSET: -0x18
            NAME: __temp_497 	TYPE: void* 	OFFSET: -0x20
            NAME: __temp_498 	TYPE: void* 	OFFSET: -0x28
            NAME: __temp_499 	TYPE: void* 	OFFSET: -0x30
            NAME: __temp_500 	TYPE: void* 	OFFSET: -0x38
            NAME: __temp_501 	TYPE: void* 	OFFSET: -0x40
            NAME: __temp_502 	TYPE: void* 	OFFSET: -0x48
            NAME: __temp_503 	TYPE: void* 	OFFSET: -0x50
            NAME: __temp_504 	TYPE: void* 	OFFSET: -0x58
            NAME: __temp_505 	TYPE: void* 	OFFSET: -0x60
            NAME: __temp_506 	TYPE: void* 	OFFSET: -0x68
            NAME: __temp_507 	TYPE: void* 	OFFSET: -0x70
            NAME: __temp_508 	TYPE: void* 	OFFSET: -0x78
            NAME: __temp_509 	TYPE: int64 	OFFSET: -0x80
            NAME: __temp_510 	TYPE: int64 	OFFSET: -0x88
            NAME: __temp_511 	TYPE: int64 	OFFSET: -0x90
            NAME: __temp_512 	TYPE: int64 	OFFSET: -0x98
            NAME: __temp_513 	TYPE: int64 	OFFSET: -0xA0
            NAME: __temp_514 	TYPE: void* 	OFFSET: -0xA8
            NAME: __temp_515 	TYPE: void* 	OFFSET: -0xB0
            NAME: __temp_516 	TYPE: void* 	OFFSET: -0xB8
            NAME: __temp_517 	TYPE: void* 	OFFSET: -0xC0
            NAME: __temp_518 	TYPE: void* 	OFFSET: -0xC8
            NAME: __temp_519 	TYPE: void* 	OFFSET: -0xD0
            NAME: __temp_520 	TYPE: void* 	OFFSET: -0xD8
            NAME: __temp_521 	TYPE: void* 	OFFSET: -0xE0
            NAME: __temp_522 	TYPE: void* 	OFFSET: -0xE8
            NAME: __temp_523 	TYPE: void* 	OFFSET: -0xF0
            NAME: __temp_524 	TYPE: void* 	OFFSET: -0xF8
            NAME: __temp_525 	TYPE: void* 	OFFSET: -0x100
            NAME: __temp_526 	TYPE: void* 	OFFSET: -0x108
            NAME: __temp_527 	TYPE: void* 	OFFSET: -0x110
            NAME: __temp_528 	TYPE: void* 	OFFSET: -0x118
            NAME: __temp_529 	TYPE: void* 	OFFSET: -0x120
            NAME: __temp_530 	TYPE: void* 	OFFSET: -0x128
            NAME: __temp_531 	TYPE: void* 	OFFSET: -0x130
            NAME: __temp_532 	TYPE: void* 	OFFSET: -0x138
            NAME: __temp_533 	TYPE: void* 	OFFSET: -0x140
            NAME: __temp_534 	TYPE: void* 	OFFSET: -0x148
            NAME: __temp_535 	TYPE: void* 	OFFSET: -0x150
            NAME: __temp_536 	TYPE: void* 	OFFSET: -0x158
            NAME: __temp_537 	TYPE: void* 	OFFSET: -0x160
            NAME: __temp_538 	TYPE: void* 	OFFSET: -0x168
            NAME: __temp_539 	TYPE: void* 	OFFSET: -0x170
            NAME: __temp_540 	TYPE: void* 	OFFSET: -0x178
            NAME: __temp_541 	TYPE: void* 	OFFSET: -0x180
            NAME: __temp_542 	TYPE: void* 	OFFSET: -0x188
            NAME: __temp_543 	TYPE: void* 	OFFSET: -0x190
            NAME: __temp_544 	TYPE: int64 	OFFSET: -0x198
            NAME: __temp_545 	TYPE: int64 	OFFSET: -0x1A0
            NAME: __temp_546 	TYPE: int64 	OFFSET: -0x1A8
            NAME: __temp_547 	TYPE: void* 	OFFSET: -0x1B0
            NAME: i 	TYPE: int64 	OFFSET: -0x1B8
            Local scope: SIZE: 0x10 {
                NAME: __temp_493 	TYPE: int64 	OFFSET: -0x1C0
                NAME: __temp_494 	TYPE: int64 	OFFSET: -0x1C8
            }
        }
    }
    Function scope: SIZE: 0x60 {
        NAME: end 	TYPE: int64 	OFFSET: +0x18
        NAME: start 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x60 {
            NAME: __temp_313 	TYPE: LABEL
            NAME: __temp_314 	TYPE: LABEL
            NAME: __temp_315 	TYPE: LABEL
            NAME: __temp_316 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_321 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_322 	TYPE: LABEL
            NAME: __temp_323 	TYPE: LABEL
            NAME: __temp_324 	TYPE: LABEL
            NAME: __temp_325 	TYPE: bool 	OFFSET: -0x18
            NAME: __temp_330 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_331 	TYPE: LABEL
            NAME: __temp_332 	TYPE: LABEL
            NAME: __temp_333 	TYPE: LABEL
            NAME: __temp_334 	TYPE: bool 	OFFSET: -0x28
            NAME: __temp_337 	TYPE: int64 	OFFSET: -0x30
            NAME: i 	TYPE: int64 	OFFSET: -0x38
            NAME: t 	TYPE: int64 	OFFSET: -0x40
            Local scope: SIZE: 0x20 {
                NAME: __temp_317 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_318 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_319 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_320 	TYPE: int64 	OFFSET: -0x60
            }
            Local scope: SIZE: 0x20 {
                NAME: __temp_326 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_327 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_328 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_329 	TYPE: int64 	OFFSET: -0x60
            }
            Local scope: SIZE: 0x10 {
                NAME: __temp_335 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_336 	TYPE: int64 	OFFSET: -0x50
            }
        }
    }
    Function scope: SIZE: 0x28 {
        Local scope: SIZE: 0x28 {
            NAME: __temp_480 	TYPE: LABEL
            NAME: __temp_481 	TYPE: LABEL
            NAME: __temp_482 	TYPE: LABEL
            NAME: __temp_483 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_488 	TYPE: int64 	OFFSET: -0x10
            NAME: i 	TYPE: int64 	OFFSET: -0x18
            Local scope: SIZE: 0x10 {
                NAME: __temp_484 	TYPE: LABEL
                NAME: __temp_485 	TYPE: int64 	OFFSET: -0x20
                NAME: __temp_486 	TYPE: bool 	OFFSET: -0x28
                NAME: __temp_487 	TYPE: LABEL
                Local scope: SIZE: 0x0 {
                }
            }
        }
    }
    Function scope: SIZE: 0x78 {
        Local scope: SIZE: 0x78 {
            NAME: __temp_344 	TYPE: LABEL
            NAME: __temp_345 	TYPE: LABEL
            NAME: __temp_346 	TYPE: LABEL
            NAME: __temp_368 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_369 	TYPE: LABEL
            NAME: __temp_370 	TYPE: LABEL
            NAME: __temp_371 	TYPE: LABEL
            NAME: __temp_386 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_387 	TYPE: LABEL
            NAME: __temp_388 	TYPE: bool 	OFFSET: -0x18
            NAME: __temp_389 	TYPE: LABEL
            NAME: c 	TYPE: int64 	OFFSET: -0x20
            NAME: is_checking 	TYPE: int64 	OFFSET: -0x28
            NAME: is_neg 	TYPE: int64 	OFFSET: -0x30
            NAME: n 	TYPE: int64 	OFFSET: -0x38
            Local scope: SIZE: 0x40 {
                NAME: __temp_347 	TYPE: int64 	OFFSET: -0x40
                NAME: __temp_348 	TYPE: LABEL
                NAME: __temp_349 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_350 	TYPE: bool 	OFFSET: -0x50
                NAME: __temp_351 	TYPE: LABEL
                NAME: __temp_352 	TYPE: LABEL
                NAME: __temp_353 	TYPE: bool 	OFFSET: -0x58
                NAME: __temp_354 	TYPE: LABEL
                NAME: __temp_355 	TYPE: LABEL
                NAME: __temp_356 	TYPE: bool 	OFFSET: -0x60
                NAME: __temp_357 	TYPE: LABEL
                Local scope: SIZE: 0x18 {
                    NAME: __temp_361 	TYPE: int64 	OFFSET: -0x68
                    NAME: __temp_362 	TYPE: LABEL
                    NAME: __temp_363 	TYPE: bool 	OFFSET: -0x70
                    NAME: __temp_364 	TYPE: LABEL
                    Local scope: SIZE: 0x8 {
                        NAME: __temp_365 	TYPE: LABEL
                        NAME: __temp_366 	TYPE: bool 	OFFSET: -0x78
                        NAME: __temp_367 	TYPE: LABEL
                        Local scope: SIZE: 0x0 {
                        }
                    }
                }
                Local scope: SIZE: 0x8 {
                    NAME: __temp_358 	TYPE: LABEL
                    NAME: __temp_359 	TYPE: bool 	OFFSET: -0x68
                    NAME: __temp_360 	TYPE: LABEL
                    Local scope: SIZE: 0x0 {
                    }
                }
            }
            Local scope: SIZE: 0x40 {
                NAME: __temp_372 	TYPE: int64 	OFFSET: -0x40
                NAME: __temp_373 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_374 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_375 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_376 	TYPE: LABEL
                NAME: __temp_377 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_378 	TYPE: bool 	OFFSET: -0x68
                NAME: __temp_379 	TYPE: LABEL
                NAME: __temp_380 	TYPE: LABEL
                NAME: __temp_381 	TYPE: bool 	OFFSET: -0x70
                NAME: __temp_382 	TYPE: LABEL
                NAME: __temp_383 	TYPE: LABEL
                NAME: __temp_384 	TYPE: bool 	OFFSET: -0x78
                NAME: __temp_385 	TYPE: LABEL
                Local scope: SIZE: 0x0 {
                }
                Local scope: SIZE: 0x0 {
                }
            }
            Local scope: SIZE: 0x8 {
                NAME: __temp_390 	TYPE: int64 	OFFSET: -0x40
            }
        }
    }
    Function scope: SIZE: 0x1F8 {
        Local scope: SIZE: 0x1F8 {
            NAME: __temp_417 	TYPE: LABEL
            NAME: __temp_418 	TYPE: LABEL
            NAME: __temp_419 	TYPE: LABEL
            NAME: __temp_420 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_479 	TYPE: int64 	OFFSET: -0x10
            NAME: i 	TYPE: int64 	OFFSET: -0x18
            NAME: tmp1 	TYPE: int64 	OFFSET: -0x20
            NAME: tmp2 	TYPE: int64 	OFFSET: -0x28
            Local scope: SIZE: 0x1D0 {
                NAME: __temp_421 	TYPE: int64 	OFFSET: -0x30
                NAME: __temp_422 	TYPE: int64 	OFFSET: -0x38
                NAME: __temp_423 	TYPE: int64 	OFFSET: -0x40
                NAME: __temp_424 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_425 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_426 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_427 	TYPE: void* 	OFFSET: -0x60
                NAME: __temp_428 	TYPE: void* 	OFFSET: -0x68
                NAME: __temp_429 	TYPE: void* 	OFFSET: -0x70
                NAME: __temp_430 	TYPE: void* 	OFFSET: -0x78
                NAME: __temp_431 	TYPE: void* 	OFFSET: -0x80
                NAME: __temp_432 	TYPE: int64 	OFFSET: -0x88
                NAME: __temp_433 	TYPE: void* 	OFFSET: -0x90
                NAME: __temp_434 	TYPE: void* 	OFFSET: -0x98
                NAME: __temp_435 	TYPE: int64 	OFFSET: -0xA0
                NAME: __temp_436 	TYPE: void* 	OFFSET: -0xA8
                NAME: __temp_437 	TYPE: void* 	OFFSET: -0xB0
                NAME: __temp_438 	TYPE: int64 	OFFSET: -0xB8
                NAME: __temp_439 	TYPE: void* 	OFFSET: -0xC0
                NAME: __temp_440 	TYPE: void* 	OFFSET: -0xC8
                NAME: __temp_441 	TYPE: int64 	OFFSET: -0xD0
                NAME: __temp_442 	TYPE: void* 	OFFSET: -0xD8
                NAME: __temp_443 	TYPE: void* 	OFFSET: -0xE0
                NAME: __temp_444 	TYPE: int64 	OFFSET: -0xE8
                NAME: __temp_445 	TYPE: void* 	OFFSET: -0xF0
                NAME: __temp_446 	TYPE: void* 	OFFSET: -0xF8
                NAME: __temp_447 	TYPE: void* 	OFFSET: -0x100
                NAME: __temp_448 	TYPE: void* 	OFFSET: -0x108
                NAME: __temp_449 	TYPE: void* 	OFFSET: -0x110
                NAME: __temp_450 	TYPE: void* 	OFFSET: -0x118
                NAME: __temp_451 	TYPE: void* 	OFFSET: -0x120
                NAME: __temp_452 	TYPE: void* 	OFFSET: -0x128
                NAME: __temp_453 	TYPE: void* 	OFFSET: -0x130
                NAME: __temp_454 	TYPE: void* 	OFFSET: -0x138
                NAME: __temp_455 	TYPE: int64 	OFFSET: -0x140
                NAME: __temp_456 	TYPE: int64 	OFFSET: -0x148
                NAME: __temp_457 	TYPE: int64 	OFFSET: -0x150
                NAME: __temp_458 	TYPE: int64 	OFFSET: -0x158
                NAME: __temp_459 	TYPE: int64 	OFFSET: -0x160
                NAME: __temp_460 	TYPE: void* 	OFFSET: -0x168
                NAME: __temp_461 	TYPE: void* 	OFFSET: -0x170
                NAME: __temp_462 	TYPE: void* 	OFFSET: -0x178
                NAME: __temp_463 	TYPE: void* 	OFFSET: -0x180
                NAME: __temp_464 	TYPE: int64 	OFFSET: -0x188
                NAME: __temp_465 	TYPE: int64 	OFFSET: -0x190
                NAME: __temp_466 	TYPE: int64 	OFFSET: -0x198
                NAME: __temp_467 	TYPE: void* 	OFFSET: -0x1A0
                NAME: __temp_468 	TYPE: void* 	OFFSET: -0x1A8
                NAME: __temp_469 	TYPE: void* 	OFFSET: -0x1B0
                NAME: __temp_470 	TYPE: void* 	OFFSET: -0x1B8
                NAME: __temp_471 	TYPE: void* 	OFFSET: -0x1C0
                NAME: __temp_472 	TYPE: void* 	OFFSET: -0x1C8
                NAME: __temp_473 	TYPE: void* 	OFFSET: -0x1D0
                NAME: __temp_474 	TYPE: void* 	OFFSET: -0x1D8
                NAME: __temp_475 	TYPE: void* 	OFFSET: -0x1E0
                NAME: __temp_476 	TYPE: void* 	OFFSET: -0x1E8
                NAME: __temp_477 	TYPE: void* 	OFFSET: -0x1F0
                NAME: __temp_478 	TYPE: int64 	OFFSET: -0x1F8
            }
        }
    }
    Function scope: SIZE: 0xD0 {
        NAME: end 	TYPE: int64 	OFFSET: +0x18
        NAME: start 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0xD0 {
            NAME: __temp_398 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_399 	TYPE: LABEL
            NAME: __temp_400 	TYPE: LABEL
            NAME: __temp_401 	TYPE: LABEL
            NAME: __temp_402 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_414 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_415 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_416 	TYPE: int64 	OFFSET: -0x28
            NAME: d 	TYPE: int64 	OFFSET: -0x30
            NAME: i 	TYPE: int64 	OFFSET: -0x38
            NAME: j 	TYPE: int64 	OFFSET: -0x40
            NAME: mind 	TYPE: int64 	OFFSET: -0x48
            NAME: mini 	TYPE: int64 	OFFSET: -0x50
            NAME: partid 	TYPE: int64 	OFFSET: -0x58
            NAME: wt 	TYPE: int64 	OFFSET: -0x60
            NAME: xt 	TYPE: int64 	OFFSET: -0x68
            NAME: yt 	TYPE: int64 	OFFSET: -0x70
            NAME: zt 	TYPE: int64 	OFFSET: -0x78
            Local scope: SIZE: 0x58 {
                NAME: __temp_403 	TYPE: int64 	OFFSET: -0x80
                NAME: __temp_404 	TYPE: int64 	OFFSET: -0x88
                NAME: __temp_405 	TYPE: int64 	OFFSET: -0x90
                NAME: __temp_406 	TYPE: int64 	OFFSET: -0x98
                NAME: __temp_407 	TYPE: int64 	OFFSET: -0xA0
                NAME: __temp_408 	TYPE: int64 	OFFSET: -0xA8
                NAME: __temp_409 	TYPE: int64 	OFFSET: -0xB0
                NAME: __temp_410 	TYPE: int64 	OFFSET: -0xB8
                NAME: __temp_411 	TYPE: int64 	OFFSET: -0xC0
                NAME: __temp_412 	TYPE: int64 	OFFSET: -0xC8
                NAME: __temp_413 	TYPE: int64 	OFFSET: -0xD0
            }
        }
    }
}
====================================================
Resolving symbol 'main' -> 0x8000000DB
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'init0_stdin_only' -> 0x800000488
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol '__temp_491' -> 0x8000005E3
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol '__temp_489' -> 0x800000502
Resolving symbol 'x' -> 0x20800015000
Resolving symbol 'y' -> 0x20800016000
Resolving symbol 'z' -> 0x20800017000
Resolving symbol 'w' -> 0x20800014000
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'init_runner_stdin' -> 0x8000016A3
Resolving symbol 'cx' -> 0x20800003000
Resolving symbol 'cy' -> 0x20800004000
Resolving symbol 'cz' -> 0x20800005000
Resolving symbol 'cw' -> 0x20800002000
Resolving symbol 'x' -> 0x20800015000
Resolving symbol 'y' -> 0x20800016000
Resolving symbol 'z' -> 0x20800017000
Resolving symbol 'w' -> 0x20800014000
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'iter' -> 0x20800006000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'on_init1_finished_stdin_only' -> 0x800001E22
Resolving symbol '__temp_315' -> 0x80000199A
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol '__temp_313' -> 0x800001709
Resolving symbol '__temp_324' -> 0x800001D1F
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'x' -> 0x20800015000
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'y' -> 0x20800016000
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'z' -> 0x20800017000
Resolving symbol 'input_q' -> 0x800001FF7
Resolving symbol 'w' -> 0x20800014000
Resolving symbol '__temp_322' -> 0x8000019B6
Resolving symbol '__temp_333' -> 0x800001E20
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol '__temp_331' -> 0x800001D3B
Resolving symbol '__temp_482' -> 0x800001F53
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol '__temp_487' -> 0x800001F24
Resolving symbol '__temp_484' -> 0x800001F26
Resolving symbol '__temp_480' -> 0x800001E88
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'start_shuffle' -> 0x80000249D
Resolving symbol '__temp_351' -> 0x8000020F2
Resolving symbol '__temp_348' -> 0x8000020FC
Resolving symbol 'input_q_exit' -> 0x8000023E6
Resolving symbol '__temp_354' -> 0x800002192
Resolving symbol '__temp_357' -> 0x800002146
Resolving symbol '__temp_355' -> 0x800002188
Resolving symbol '__temp_360' -> 0x800002170
Resolving symbol '__temp_358' -> 0x800002188
Resolving symbol '__temp_352' -> 0x80000222E
Resolving symbol '__temp_364' -> 0x8000021D4
Resolving symbol '__temp_362' -> 0x80000222E
Resolving symbol '__temp_367' -> 0x8000021FE
Resolving symbol '__temp_365' -> 0x80000222E
Resolving symbol '__temp_344' -> 0x80000208D
Resolving symbol '__temp_379' -> 0x800002338
Resolving symbol '__temp_376' -> 0x800002342
Resolving symbol 'input_q_exit' -> 0x8000023E6
Resolving symbol '__temp_382' -> 0x80000236C
Resolving symbol '__temp_380' -> 0x800002384
Resolving symbol '__temp_385' -> 0x8000023AE
Resolving symbol '__temp_383' -> 0x8000023C6
Resolving symbol '__temp_369' -> 0x800002266
Resolving symbol '__temp_389' -> 0x800002410
Resolving symbol '__temp_387' -> 0x800002433
Resolving symbol '__temp_419' -> 0x800003698
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'x' -> 0x20800015000
Resolving symbol 'y' -> 0x20800016000
Resolving symbol 'z' -> 0x20800017000
Resolving symbol 'w' -> 0x20800014000
Resolving symbol 'ci' -> 0x20800001000
Resolving symbol 'cx' -> 0x20800003000
Resolving symbol 'cy' -> 0x20800004000
Resolving symbol 'cz' -> 0x20800005000
Resolving symbol 'cw' -> 0x20800002000
Resolving symbol 'trigger' -> 0x20800012000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'lcx' -> 0x2080000B000
Resolving symbol 'lcy' -> 0x2080000D000
Resolving symbol 'lcz' -> 0x2080000F000
Resolving symbol 'lcw' -> 0x20800009000
Resolving symbol 'lcn' -> 0x20800007000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'shuffle_runner' -> 0x8000036E6
Resolving symbol '__temp_417' -> 0x800002503
Resolving symbol '__temp_401' -> 0x800003B49
Resolving symbol 'x' -> 0x20800015000
Resolving symbol 'y' -> 0x20800016000
Resolving symbol 'z' -> 0x20800017000
Resolving symbol 'w' -> 0x20800014000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol 'pmem_in' -> 0x20800011000
Resolving symbol '__temp_399' -> 0x800003773
Resolving symbol 'trigger' -> 0x20800012000
Maximum stack frame size: 0x1F8
