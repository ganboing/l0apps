# 1 "strsplitted-pagerank-stdin2pmem.c0"
# 1 "<command-line>"
# 1 "strsplitted-pagerank-stdin2pmem.c0"
# 13 "strsplitted-pagerank-stdin2pmem.c0"
# 1 "libi0/stddef.h" 1




# 1 "libi0/stdint.h" 1
# 6 "libi0/stddef.h" 2
# 19 "libi0/stddef.h"
register long reg1;
register long reg2;
register long reg3;
register long reg4;
# 218 "libi0/stddef.h"
long get_my_task_id();



long get_new_task_id();



void task_id_to_ec_range(long id, long *base, long *len);
# 14 "strsplitted-pagerank-stdin2pmem.c0" 2
# 1 "libi0/stdlib.h" 1



# 1 "libi0/stddef.h" 1
# 5 "libi0/stdlib.h" 2

long str_to_long(char* str, long maxlen, long *pnext, long *result);
# 15 "strsplitted-pagerank-stdin2pmem.c0" 2
# 1 "libi0/stdio.h" 1




# 1 "libi0/math.h" 1




long ipow(long base, long exp);
double exp(double x);
double sqrt(double x);
# 6 "libi0/stdio.h" 2
# 15 "libi0/stdio.h"
void output_char(long c);
# 41 "libi0/stdio.h"
void output_q(long n);



void output_q_digits(long n, long d);



void output_q_hex(long n);


void output_id();


void output_char_str(char* s, long sl);


void output_str(char* s);
# 69 "libi0/stdio.h"
char input_char();





long input_q();



long input_line(char *buf, long maxlen, long *len);
# 89 "libi0/stdio.h"
long input_long(long *result);







void output_double_binary(double d);

void output_double(double d);
# 110 "libi0/stdio.h"
long input_double(double *result);

void output_double(double d);
# 123 "libi0/stdio.h"
long input_double(double *result);
# 16 "strsplitted-pagerank-stdin2pmem.c0" 2
# 1 "libi0/malloc.h" 1




# 1 "libi0/stdio.h" 1
# 6 "libi0/malloc.h" 2
# 68 "libi0/malloc.h"
void _output_debug(long x);

void init_PR_var();
# 80 "libi0/malloc.h"
char *_syscall_malloc_ext(long size, long option);

char *_syscall_malloc(long size);


long s_align_to(long size);

long s_align_to_ext(long size);

long s_align_to_page(long size);

char *_get_new_sar(long size, long align_size);

char *_get_new_sar_ext(long size, long align_size, long option);


char *_get_from_sar_array(long size);

void* shalloc(long size);




long p_align_to(long size);

void *_get_new_pa(long size);

void *pralloc(long size);




long shalloc_ext(long size, long option);




long shalloced_replicas(long addr, long nth);
# 17 "strsplitted-pagerank-stdin2pmem.c0" 2

# 1 "config.h" 1
# 19 "strsplitted-pagerank-stdin2pmem.c0" 2


long *pedges_cnt;
long edges_cnt;
long *edges;


long *vertices;
long *p_vertices_cnt;
long vertices_cnt;


long *in_neighbors;


void pr_build_graph()
{
    long cnt;
    long i;

    long src;
    long dst;

    long tmp1;
    long tmp2;
    long tmp3;
    long tmp4;

    long *filled;


    cnt = vertices_cnt;





    *p_vertices_cnt = cnt;

    if (cnt <= 0) {
output_char('I');output_char('t');output_char(' ');output_char('s');output_char('e');output_char('e');output_char('m');output_char('s');output_char(' ');output_char('t');output_char('h');output_char('e');output_char(' ');output_char('i');output_char('n');output_char('p');output_char('u');output_char('t');output_char(' ');output_char('i');output_char('s');output_char(' ');output_char('n');output_char('o');output_char('t');output_char(' ');output_char('i');output_char('n');output_char(' ');output_char('p');output_char('e');output_char('r');output_char('s');output_char('i');output_char('s');output_char('t');output_char('e');output_char('n');output_char('t');output_char(' ');output_char('m');output_char('e');output_char('m');output_char('o');output_char('r');output_char('y');output_char(' ');output_char('y');output_char('e');output_char('t');output_char('.');{output_char((10));};
        abort;
    }


    for (i = 0; i < cnt; i = i + 1) {
        vertices[i*(3)+(0)] = 0;
        vertices[i*(3)+(1)] = 0;
        vertices[i*(3)+(2)] = 0;
    }




    for (i = 0; i < edges_cnt; i = i + 1) {
        src = edges[i*(2)+(0)];
        dst = edges[i*(2)+(1)];
        tmp1 = (3)*src+(1);
        vertices[tmp1] = vertices[tmp1] + 1;
        tmp1 = (3)*dst+(0);
        vertices[tmp1] = vertices[tmp1] + 1;
    }

    for (i = 0; i < cnt; i = i + 1) {
        if (vertices[i*(3)+(1)] == 0) {
            *(double*)&vertices[i*(3)+(1)] = 1.0;
        } else {
            *(double*)&vertices[i*(3)+(1)] =
                1.0 / (double)vertices[i*(3)+(1)];
        }
    }






    tmp1 = 0;
    for (i = 0; i < cnt; i = i + 1) {
        vertices[(3)*i+(2)] = tmp1;



        tmp1 = tmp1 + vertices[(3)*i+(0)];
    }




    filled = (long*)pralloc(cnt * 8);
    for (i = 0; i < cnt; i = i + 1) {
        filled[i] = 0;
    }


    for (i = 0; i < edges_cnt; i = i + 1) {
        src = edges[i*(2)+(0)];
        dst = edges[i*(2)+(1)];
        tmp1 = vertices[(3)*dst+(2)];
        tmp4 = filled[dst];
        in_neighbors[tmp1 + tmp4] = src;
        tmp4 = tmp4 + 1;
        filled[dst] = tmp4;
    }
# 150 "strsplitted-pagerank-stdin2pmem.c0"
    return;
}



void read_input()
{
    long src;
    long dst;
    long cnt;

    char buf[(255)];
    long len;
    long maxlen;
    long rt;
    long cont;

    vertices_cnt = 0;


    do {
        rt = input_line(buf, (255), &len);
        cont = 0;
        if (rt == 0)
            if (len > 0)
                if (buf[0] == '#')
                    cont = 1;
    } while (cont == 1);

    cnt = 0;
    do {

        maxlen = len;
        rt = str_to_long(buf, maxlen, &len, &src);
        if (rt != 0) {
output_char('G');output_char('a');output_char('r');output_char('b');output_char('a');output_char('g');output_char('e');output_char(' ');output_char('l');output_char('i');output_char('n');output_char('e');output_char(':');output_char(' ');
            output_char_str(buf, maxlen); {output_char((10));};
            continue;
        } else {
            rt = str_to_long(&buf[len], maxlen - len, &len, &dst);
            if (rt != 0) {
output_char('G');output_char('a');output_char('r');output_char('b');output_char('a');output_char('g');output_char('e');output_char(' ');output_char('l');output_char('i');output_char('n');output_char('e');output_char(':');output_char(' ');
                output_char_str(buf, maxlen); {output_char((10));};
                continue;
            } else {

                edges[(2)*cnt+(0)] = src;
                edges[(2)*cnt+(1)] = dst;




                if (src > vertices_cnt) {
                    vertices_cnt = src;
                }

                if (dst > vertices_cnt) {
                    vertices_cnt = dst;
                }

                cnt = cnt + 1;
            }
        }


        rt = input_line(buf, (255), &len);
    } while (rt != -1);



    vertices_cnt = vertices_cnt + 1;


    edges_cnt = cnt;
    *pedges_cnt = edges_cnt;

    return;
}

void shuffle(long id)
{
    long start, end, i;
    long vstart, vend;

    if (id == 3) {
        start = 0;
        end = (((1024 * 1024 * 70) * ((2))) / (2) + 1) / 3 - (512) * 2;
        vstart = 0;
        vend = (1024 * 1024 * 5) * (3) / 3 - (512) * 2;
    } else if (id == 2) {
        start = (((1024 * 1024 * 70) * ((2))) / (2) + 1) / 3;
        end = (((1024 * 1024 * 70) * ((2))) / (2) + 1) * 2 / 3 - (512) * 2;
        vstart = (1024 * 1024 * 5) * (3) / 3;
        vend = (1024 * 1024 * 5) * (3) * 2 / 3 - (512) * 2;
    } else {
        start = (((1024 * 1024 * 70) * ((2))) / (2) + 1) * 2 / 3;
        end = (((1024 * 1024 * 70) * ((2))) / (2) + 1) - 1;
        vstart = (1024 * 1024 * 5) * (3) * 2 / 3;
        vend = (1024 * 1024 * 5) * (3) - 1;
    }

    for (i = start; i < end; i = i + (512)) {
        in_neighbors[i] = in_neighbors[i];
    }

    for (i = vstart; i < vend; i = i + (512)) {
        vertices[i] = vertices[i];
    }

    commit;
}

void init()
{
    long space;


    pedges_cnt = (long*)(((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1));
    edges = (long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + 8);


    p_vertices_cnt = (long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8);
    vertices = (long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + 8);
    in_neighbors = (long*)((((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8));



    read_input();




    pr_build_graph();




    space = (0x400000000000*(0));
    runner shuffle(0)
        using
        in_neighbors
        , vertices
        , ((long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8))[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
        , ((long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8))[0,,((1024 * 1024 * 5) * (3))]
        in space;

    space = (0x400000000000*(1));
    runner shuffle(1)
        using
        in_neighbors
        , vertices
        , ((long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8))[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
        , ((long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8))[0,,((1024 * 1024 * 5) * (3))]
        in space;

    space = (0x400000000000*(2));
    runner shuffle(2)
        using
        in_neighbors
        , vertices
        , ((long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8))[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
        , ((long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8))[0,,((1024 * 1024 * 5) * (3))]
        in space;

    commit;
}

void main()
{
    long space;

    space = (0x400000000000*(0));

    runner init()
        using
        edges, edges_cnt, pedges_cnt
        , vertices, vertices_cnt, p_vertices_cnt, in_neighbors
        , ((long*)(((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)))[0,,((1024 * 1024 * 70) * ((2)))]
        , ((long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8))[0,,((1024 * 1024 * 5) * (3))]
        , ((long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8))[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
        in space;
    commit;
}
