# 1 "strsplitted-pagerank-frompmem.c0"
# 1 "<command-line>"
# 1 "strsplitted-pagerank-frompmem.c0"





# 1 "libi0/stddef.h" 1




# 1 "libi0/stdint.h" 1
# 6 "libi0/stddef.h" 2
# 19 "libi0/stddef.h"
register long reg1;
register long reg2;
register long reg3;
register long reg4;
# 218 "libi0/stddef.h"
long get_my_task_id();



long get_new_task_id();



void task_id_to_ec_range(long id, long *base, long *len);
# 7 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/stdio.h" 1



# 1 "libi0/stddef.h" 1
# 5 "libi0/stdio.h" 2
# 1 "libi0/math.h" 1




long ipow(long base, long exp);
double exp(double x);
double sqrt(double x);
# 6 "libi0/stdio.h" 2
# 15 "libi0/stdio.h"
void output_char(long c);
# 41 "libi0/stdio.h"
void output_q(long n);



void output_q_digits(long n, long d);



void output_q_hex(long n);


void output_id();


void output_char_str(char* s, long sl);


void output_str(char* s);
# 69 "libi0/stdio.h"
char input_char();





long input_q();



long input_line(char *buf, long maxlen, long *len);
# 89 "libi0/stdio.h"
long input_long(long *result);







void output_double_binary(double d);

void output_double(double d);
# 110 "libi0/stdio.h"
long input_double(double *result);

void output_double(double d);
# 123 "libi0/stdio.h"
long input_double(double *result);
# 8 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/stdint.h" 1
# 9 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/string.h" 1
# 9 "libi0/string.h"
long strncmp(char *s1, char *s2, long n);

void memcpy(char* src, long len, char* dst);


long __memcmp_se(char* s1, char* s2, long n);
# 27 "libi0/string.h"
long memcmp(char* s1, char* s2, long n);

void memset0(char* m, long len);
# 10 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/time.h" 1
# 9 "libi0/time.h"
# 1 "libi0/stdio.h" 1
# 10 "libi0/time.h" 2
# 20 "libi0/time.h"
long gettime(long *tv_sec, long *tv_nsec);




void time_subtract(long *tv_sec_from, long *tv_nsec_from,
        long tv_sec, long tv_nsec);



void time_add(long *tv_sec_to, long *tv_nsec_to,
        long tv_sec, long tv_nsec);
# 40 "libi0/time.h"
long print_time_diff_and_update(long *base_sec, long *base_nsec);







long get_time_diff_and_update(long *base_sec, long *base_nsec);
# 11 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/malloc.h" 1
# 68 "libi0/malloc.h"
void _output_debug(long x);

void init_PR_var();
# 80 "libi0/malloc.h"
char *_syscall_malloc_ext(long size, long option);

char *_syscall_malloc(long size);


long s_align_to(long size);

long s_align_to_ext(long size);

long s_align_to_page(long size);

char *_get_new_sar(long size, long align_size);

char *_get_new_sar_ext(long size, long align_size, long option);


char *_get_from_sar_array(long size);

void* shalloc(long size);




long p_align_to(long size);

void *_get_new_pa(long size);

void *pralloc(long size);




long shalloc_ext(long size, long option);




long shalloced_replicas(long addr, long nth);
# 12 "strsplitted-pagerank-frompmem.c0" 2
# 1 "libi0/pc.h" 1







long pc_get(long phase_no, void *addr, long len, void *dst);


long pc_write(long phase_no, void *addr, long len);



bool pc_sync(long phase_no);
# 13 "strsplitted-pagerank-frompmem.c0" 2

# 1 "config.h" 1
# 15 "strsplitted-pagerank-frompmem.c0" 2


long vertices_cnt;
long *vertices;
long *in_neighbors;


long iter;


long num_tasks;


standalone long task_status[64 * (512)];

long partitions[64 * (4)];


long begin_time_sec;
long begin_time_nsec;


void new_iter_task();




void sort(long *idx, long start, long end, double *value)
{
    double pivot;
    long p;
    long i, tmp;

    long *stack;
    long stop;



    stack = (long*)pralloc(8 * (10240));
    stop = 0;


    stack[stop] = start; stop = stop + 1;
    stack[stop] = end; stop = stop + 1;

    while (stop > 0) {

        stop = stop - 1; end = stack[stop];
        stop = stop - 1; start = stack[stop];

        i = end - start;
        if (i > 0) {

            pivot = value[idx[end]];
            p = start;

            for (i = start; i < end; i = i + 1) {
                if (value[idx[i]] < pivot) {

                    tmp = idx[p];
                    idx[p] = idx[i];
                    idx[i] = tmp;
                    p = p + 1;
                }
            }

            tmp = idx[p];
            idx[p] = idx[end];
            idx[end] = tmp;



            stack[stop] = p + 1; stop = stop + 1;
            stack[stop] = end; stop = stop + 1;

            stack[stop] = start; stop = stop + 1;
            stack[stop] = p - 1; stop = stop + 1;

            if (stop > (10240)) {
output_char('s');output_char('o');output_char('r');output_char('t');output_char(' ');output_char('s');output_char('t');output_char('a');output_char('c');output_char('k');output_char(' ');output_char('o');output_char('v');output_char('e');output_char('r');output_char('f');output_char('l');output_char('o');output_char('w');{output_char((10));};
                abort;
            }
        }
    }

    return;
}


void select_topk(long *idx, long start, long end, double *value, long k)
{
    double pivot;
    long p;
    long i, tmp;

    while (1) {
        i = end - start + 1;
        if (i > k) {
# 123 "strsplitted-pagerank-frompmem.c0"
            pivot = value[idx[end]];
            p = start;

            for (i = start; i < end; i = i + 1) {
                if (value[idx[i]] < pivot) {

                    tmp = idx[p];
                    idx[p] = idx[i];
                    idx[i] = tmp;
                    p = p + 1;
                }
            }

            tmp = idx[p];
            idx[p] = idx[end];
            idx[end] = tmp;


            i = end - p + 1;
            if (i == k) {
                return;
            } else {
                if (i < k) {
                    end = p - 1;
                    k = k - i;
                } else {
                    start = p + 1;
                    while (value[idx[start]] == pivot) {
                        start = start + 1;
                        if (start >= end)
                            break;
                    }
                }
            }
        } else {
            return;
        }
    }

    return;
}

void topk(long iter)
{
    long *idx;
    long i;
    double *value;

    long topk_k;




    if (100 > vertices_cnt) {
        topk_k = vertices_cnt;
    } else {
        topk_k = 100;
    }


    idx = (long*)pralloc(8 * vertices_cnt);
    for (i = 0; i < vertices_cnt; i = i + 1) {
        idx[i] = i;
    }
    value = (double*)(((0x200200000L)) + (1024 * 1024 * 5) * 8);

    pc_sync(iter + 1);
    pc_get(iter + 1, (((0x200200000L)) + (1024 * 1024 * 5) * 8), 8 * (1024 * 1024 * 5), (((0x200200000L)) + (1024 * 1024 * 5) * 8));





    for (i = 0; i < vertices_cnt; i = i + 1) {
        value[i] = value[i] / *(double*)&vertices[(3)*i+(1)];



    }
# 213 "strsplitted-pagerank-frompmem.c0"
    select_topk(idx, 0, vertices_cnt - 1, value, topk_k);





    sort(idx, vertices_cnt - topk_k, vertices_cnt - 1, value);



output_char('T');output_char('o');output_char('p');output_char(' ');
    output_q(topk_k);
output_char(' ');output_char('a');output_char('f');output_char('t');output_char('e');output_char('r');output_char(' ');output_char('i');output_char('t');output_char('e');output_char('r');output_char(' ');
    output_q(iter);
output_char(':');{output_char((10));};

    for (i = vertices_cnt - 1; i > vertices_cnt - 1 - topk_k; i = i - 1) {
        output_char('('); output_q(idx[i]); output_char(','); output_double(value[idx[i]]); output_char(')'); {output_char((10));};
    }

    return;
}

void topk_task(long iter)
{
    topk(iter);
    commit;
}

void get_vertices_range(long id, long *v_begin, long *v_end)
{
    *v_begin = partitions[id * (4) + (0)];
    *v_end = partitions[id * (4) + (1)];

    return;
}

void get_in_neighbors_range(long id, long *n_begin, long *n_end)
{
    *n_begin = partitions[id * (4) + (2)];
    *n_end = partitions[id * (4) + (3)];
    return;
}

void _get_in_neighbors_range(long v_begin, long v_end, long *n_begin, long *n_end)
{
    long v_last;
    v_last = v_end - 1;

    *n_begin = vertices[(3)*v_begin+(2)];
    *n_end = vertices[(3)*v_last+(2)] +
        vertices[(3)*v_last+(0)];

    return;
}


void build_partitions()
{
    long i;
    long cur;
    long v_begin, v_end, n_begin, n_end;

    long cnt[64 +1];


    cnt[0]=16896;cnt[1]=16896;cnt[2]=28672;cnt[3]=23552;cnt[4]=40960;cnt[5]=40960;cnt[6]=51200;cnt[7]=61440;cnt[8]=71680;cnt[9]=61440;cnt[10]=81920;cnt[11]=51200;cnt[12]=40960;cnt[13]=81920;cnt[14]=81920;cnt[15]=102400;cnt[16]=112640;cnt[17]=92160;cnt[18]=122880;cnt[19]=143360;cnt[20]=153600;cnt[21]=133120;cnt[22]=174080;cnt[23]=194560;cnt[24]=266240;cnt[25]=307200;cnt[26]=374784;cnt[27]=415744;cnt[28]=651264;cnt[29]=851923;



    cur = 0;
    for (i = 0; i < num_tasks; i = i + 1) {
        v_begin = cur;
        cur = cur + cnt[i];
        if (cur > vertices_cnt) {
            cur = vertices_cnt;
        }
        v_end = cur;
        _get_in_neighbors_range(v_begin, v_end, &n_begin, &n_end);

        partitions[i * (4) + (0)] = v_begin;
        partitions[i * (4) + (1)] = v_end;
        partitions[i * (4) + (2)] = n_begin;
        partitions[i * (4) + (3)] = n_end;

    }

    return;
}

void create_new_iter_task()
{
    long space;





    space = (0x400000000000*(0));
    runner new_iter_task()
        using iter, num_tasks
        , task_status[0,,num_tasks*(512)]
        , vertices_cnt, vertices, in_neighbors
        , partitions[0,,64 * (4)]
        in space
        ;
    return;
}

void barrier_task(long cur_iter)
{
    long i;

    if (cur_iter != iter) {







        abortd;
    }


    for (i = 0; i < num_tasks; i = i + 1) {
        if (task_status[i*(512)] != 1) {
            abort;
        }
    }


    iter = iter + 1;
    if (iter == 30 + 1) {
output_char('R');output_char('e');output_char('a');output_char('c');output_char('h');output_char('e');output_char('d');output_char(' ');output_char('m');output_char('a');output_char('x');output_char(' ');output_char('i');output_char('t');output_char('e');output_char('r');output_char(':');
        output_q(30);
output_char('.');{output_char((10));};

output_char('T');output_char('i');output_char('m');output_char('e');output_char(' ');output_char('u');output_char('s');output_char('e');output_char('d');output_char(':');output_char(' ');
        i = print_time_diff_and_update(&begin_time_sec, &begin_time_nsec);
output_char(' ');output_char('s');output_char('e');output_char('c');output_char('o');output_char('n');output_char('d');output_char('s');output_char('.');{output_char((10));};

        runner topk_task(iter - 1)
            using
            vertices_cnt, vertices
            , vertices[0,,(1024 * 1024 * 5) * (3)]
            ;

        commitd;
    } else {







    }


    create_new_iter_task();

    commitd;
}

void calc_task(long id)
{
    long v_begin;
    long v_end;
    long n_begin;
    long n_end;
    long i;
    long j;

    long* cur_pr;
    long* pre_pr;

    long nbr;

    double new_pr;

    long *v;
    long *n;


    char* cur_changed;
    char* pre_changed;

    char changed;
# 411 "strsplitted-pagerank-frompmem.c0"
    get_vertices_range(id, &v_begin, &v_end);
    get_in_neighbors_range(id, &n_begin, &n_end);


    pre_changed = (char*)((((0x200200000L)) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 8);
    cur_changed = (char*)(((((0x200200000L)) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 1);
    pc_get(iter, (((((0x200200000L)) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 1), 1 * (1024 * 1024 * 5), ((((0x200200000L)) + (1024 * 1024 * 5) * 8) + (1024 * 1024 * 5) * 8));


    pre_pr = (long*)((0x200200000L));
    cur_pr = (long*)(((0x200200000L)) + (1024 * 1024 * 5) * 8);

    pc_get(iter, (((0x200200000L)) + (1024 * 1024 * 5) * 8), 8 * (1024 * 1024 * 5), ((0x200200000L)));


    v = (long*)((0x400000000) + 8);
    n = (long*)(((0x400000000) + 8) + ((1024 * 1024 * 5) * (3))*8);


    if (*(long*)(0x400000000) != (0x8829eff20)) {




        memcpy(&vertices[v_begin*(3)], 8 * ((v_end - v_begin + 1) * (3)), &v[v_begin*(3)]);
        memcpy(&in_neighbors[n_begin], 8 * (n_end - n_begin + 1), &n[n_begin]);
# 445 "strsplitted-pagerank-frompmem.c0"
        *(long*)(0x400000000) = (0x8829eff20);
    }





    if (iter == 0) {
        for (i = v_begin; i < v_end; i = i + 1) {

            new_pr = (0.15) * *(double*)&v[(3)*i + (1)];
            cur_changed[i] = 'y';



            *(double*)&cur_pr[i] = new_pr;




        }
    } else {
        for (i = v_begin; i < v_end; i = i + 1) {

            changed = 'n';

            new_pr = 0.0;
            n_begin = v[(3)*i + (2)];
            n_end = n_begin + v[(3)*i + (0)];
            for (j = n_begin; j < n_end; j = j + 1) {
                nbr = n[j];

                if (pre_changed[nbr] == 'y') {
                    changed = 'y';
                    new_pr = new_pr + *(double*)&pre_pr[nbr];



                }






            }



            if (changed == 'y') {
                new_pr = new_pr * (0.85);
                new_pr = new_pr + (0.15);
                new_pr = new_pr * *(double*)&v[(3)*i+(1)];
                *(double*)&cur_pr[i] = new_pr;



            }
            cur_changed[i] = changed;
# 513 "strsplitted-pagerank-frompmem.c0"
        }
    }
# 524 "strsplitted-pagerank-frompmem.c0"
    pc_write(iter+1, &cur_changed[v_begin], 1 * (v_end-v_begin));


    pc_write(iter+1, &cur_pr[v_begin], 8 * (v_end-v_begin));


    task_status[id*(512)] = 1;

    commit;
}

void new_iter_task()
{
    long i;

    long v_begin;
    long v_end;
    long n_begin;
    long n_end;

    long space;






    if (iter > 0) {
        pc_sync(iter);
    }

    for (i = 0; i < num_tasks; i = i + 1) {

        get_vertices_range(i, &v_begin, &v_end);
        get_in_neighbors_range(i, &n_begin, &n_end);
# 579 "strsplitted-pagerank-frompmem.c0"
        space = (0x400000000000*(i+1));

        if (iter == 0) {
            runner calc_task(i)
                using
                iter, num_tasks
                , vertices_cnt, vertices, in_neighbors

                , in_neighbors[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
                , vertices[0,,(1024 * 1024 * 5) * (3)]
                , task_status[i*(512),,i*(512) + 1]
                , partitions[0,,64 * (4)]
                in space
                ;
        } else {
            runner calc_task(i)
                using
                iter, num_tasks
                , vertices_cnt, vertices, in_neighbors



                , task_status[i*(512),,i*(512) + 1]
                , partitions[0,,64 * (4)]
                in space
                ;
        }


        task_status[i*(512)] = 0;
    }



    space = (0x400000000000*(0));

    runner barrier_task(iter)
        using iter, num_tasks
        , vertices_cnt, vertices, in_neighbors
        , begin_time_sec, begin_time_nsec
        watching task_status[0,,num_tasks*(512)]
        in space
        ;

    commit;
}

void init_task()
{
    long i;





    i = gettime(&begin_time_sec, &begin_time_nsec);


    vertices_cnt = *(long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8);

output_char('v');output_char('e');output_char('r');output_char('t');output_char('i');output_char('c');output_char('e');output_char('s');output_char('_');output_char('c');output_char('n');output_char('t');output_char(':');output_char(' ');
    output_q(vertices_cnt); {output_char((10));};

    vertices = (long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + 8);
    in_neighbors = (long*)((((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8));


    iter = 0;
    num_tasks = (30);






    build_partitions();


    create_new_iter_task();




    commit;
}

void main()
{
    long space;

    space = (0x400000000000*(0));
    runner init_task()
        using iter, num_tasks
        , vertices_cnt, vertices, in_neighbors
        , begin_time_sec, begin_time_nsec
        , ((long*)((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8))[0,,((1024 * 1024 * 5) * (3))]
        , ((long*)(((((((0x800000000 + 0x20000000000 - 1) + 1) + 0x20000000000 - 1) + 1)) + ((1024 * 1024 * 70) * ((2))) * 8) + (1024 * 1024 * 5) * (3) * 8))[0,,(((1024 * 1024 * 70) * ((2))) / (2) + 1)]
        , partitions[0,,64 * (4)]
        in space
        ;
    commit;
}
