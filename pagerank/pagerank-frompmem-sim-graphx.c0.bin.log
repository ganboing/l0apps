invoking "cc0 -c strsplitted-pagerank-frompmem.c0 -o strsplitted-pagerank-frompmem.o -DSIMULATE_GRAPHX -g"
temp file is: strsplitted-pagerank-frompmem.c0.tmp
Preprocessing with cmd "cpp -nostdinc --sysroot . -DSIMULATE_GRAPHX -I/home/progman/workspace/d-thinker/libi0/libi0 strsplitted-pagerank-frompmem.c0 -o strsplitted-pagerank-frompmem.c0.tmp"
--------------------------------------
parsing...
Calling altlr3CommonTokenStreamSourceNew...
Called altlr3CommonTokenStreamSourceNew...
Parse: calling translation_unit...
Parse: cleanup
finished Parse
--------------------------------------
ConstantPropagation...
--------------------------------------
ConstantPropagation...
--------------------------------------
codeDom Dump:
*************************************
FUNCTION: sort
RETURN: void
PARAMETERS:
    NAME: idx, TYPE: int64*
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
    NAME: value, TYPE: double*
BODY:
{
    (stack =     (int64*)pralloc((0x8 * 0x2800):5))
    (stop = 0x0)
    (stack[stop] = start)
    (stop = (stop + 0x1):5)
    (stack[stop] = end)
    (stop = (stop + 0x1):5)
        
LOOP
    INIT

    COND
(stop > 0x0):1
    INCR

    BODY
    {
        (stop = (stop - 0x1):5)
        (end = stack[stop])
        (stop = (stop - 0x1):5)
        (start = stack[stop])
        (i = (end - start):5)
                branch
            (i > 0x0):1:
                                {
                    (pivot = value[idx[end]])
                    (p = start)
                                        
LOOP
                    INIT
(i = start)
                    COND
(i < end):1
                    INCR
(i = (i + 0x1):5)
                    BODY
                    {
                                                branch
                            (value[idx[i]] < pivot):1:
                                                                {
                                    (tmp = idx[p])
                                    (idx[p] = idx[i])
                                    (idx[i] = tmp)
                                    (p = (p + 0x1):5)
                                }
                            default:
                                                                {
                                }

                    }


                    (tmp = idx[p])
                    (idx[p] = idx[end])
                    (idx[end] = tmp)
                    (stack[stop] = (p + 0x1):5)
                    (stop = (stop + 0x1):5)
                    (stack[stop] = end)
                    (stop = (stop + 0x1):5)
                    (stack[stop] = start)
                    (stop = (stop + 0x1):5)
                    (stack[stop] = (p - 0x1):5)
                    (stop = (stop + 0x1):5)
                                        branch
                        (stop > 0x2800):1:
                                                        {
                                output_char(0x73)
                                output_char(0x6f)
                                output_char(0x72)
                                output_char(0x74)
                                output_char(0x20)
                                output_char(0x73)
                                output_char(0x74)
                                output_char(0x61)
                                output_char(0x63)
                                output_char(0x6b)
                                output_char(0x20)
                                output_char(0x6f)
                                output_char(0x76)
                                output_char(0x65)
                                output_char(0x72)
                                output_char(0x66)
                                output_char(0x6c)
                                output_char(0x6f)
                                output_char(0x77)
                                {
                                    output_char(0xa)
                                }
                                                                

                                abort

                            }
                        default:
                                                        {
                            }

                }
            default:
                                {
                }

    }


        return

}
FUNCTION: select_topk
RETURN: void
PARAMETERS:
    NAME: idx, TYPE: int64*
    NAME: start, TYPE: int64
    NAME: end, TYPE: int64
    NAME: value, TYPE: double*
    NAME: k, TYPE: int64
BODY:
{
        
LOOP
    INIT

    COND
0x1
    INCR

    BODY
    {
        (i = ((end - start):5 + 0x1):5)
                branch
            (i > k):1:
                                {
                    (pivot = value[idx[end]])
                    (p = start)
                                        
LOOP
                    INIT
(i = start)
                    COND
(i < end):1
                    INCR
(i = (i + 0x1):5)
                    BODY
                    {
                                                branch
                            (value[idx[i]] < pivot):1:
                                                                {
                                    (tmp = idx[p])
                                    (idx[p] = idx[i])
                                    (idx[i] = tmp)
                                    (p = (p + 0x1):5)
                                }
                            default:
                                                                {
                                }

                    }


                    (tmp = idx[p])
                    (idx[p] = idx[end])
                    (idx[end] = tmp)
                    (i = ((end - p):5 + 0x1):5)
                                        branch
                        (i == k):1:
                                                        {
                                                                return

                            }
                        default:
                                                        {
                                                                branch
                                    (i < k):1:
                                                                                {
                                            (end = (p - 0x1):5)
                                            (k = (k - i):5)
                                        }
                                    default:
                                                                                {
                                            (start = (p + 0x1):5)
                                                                                        
LOOP
                                            INIT

                                            COND
(value[idx[start]] == pivot):1
                                            INCR

                                            BODY
                                            {
                                                (start = (start + 0x1):5)
                                                                                                branch
                                                    (start >= end):1:
                                                                                                                break
                                                    default:
                                                                                                                {
                                                        }

                                            }


                                        }

                            }

                }
            default:
                                {
                                        return

                }

    }


        return

}
FUNCTION: topk
RETURN: void
PARAMETERS:
    NAME: iter, TYPE: int64
BODY:
{
        branch
        (0x64 > vertices_cnt):1:
                        {
                (topk_k = vertices_cnt)
            }
        default:
                        {
                (topk_k = 0x64)
            }

    (idx =     (int64*)pralloc((0x8 * vertices_cnt):5))
        
LOOP
    INIT
(i = 0x0)
    COND
(i < vertices_cnt):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (idx[i] = i)
    }


    (value = 0x202a00000)
    pc_sync((iter + 0x1):5)
    pc_get((iter + 0x1):5, (0x200200000 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5, (0x8 * ((0x400 * 0x400):5 * 0x5):5):5, (0x200200000 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < vertices_cnt):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (value[i] = (value[i] / (*        (double*)(&vertices[((0x3 * i):5 + 0x1):5]))):12)
    }


    select_topk(idx, 0x0, (vertices_cnt - 0x1):5, value, topk_k)
    sort(idx, (vertices_cnt - topk_k):5, (vertices_cnt - 0x1):5, value)
    output_char(0x54)
    output_char(0x6f)
    output_char(0x70)
    output_char(0x20)
    output_q(topk_k)
    output_char(0x20)
    output_char(0x61)
    output_char(0x66)
    output_char(0x74)
    output_char(0x65)
    output_char(0x72)
    output_char(0x20)
    output_char(0x69)
    output_char(0x74)
    output_char(0x65)
    output_char(0x72)
    output_char(0x20)
    output_q(iter)
    output_char(0x3a)
    {
        output_char(0xa)
    }
        

        
LOOP
    INIT
(i = (vertices_cnt - 0x1):5)
    COND
(i > ((vertices_cnt - 0x1):5 - topk_k):5):1
    INCR
(i = (i - 0x1):5)
    BODY
    {
        output_char(0x28)
        output_q(idx[i])
        output_char(0x2c)
        output_double(value[idx[i]])
        output_char(0x29)
        {
            output_char(0xa)
        }
                

    }


        return

}
FUNCTION: topk_task
RETURN: void
PARAMETERS:
    NAME: iter, TYPE: int64
BODY:
{
    topk(iter)
    commit

}
FUNCTION: get_vertices_range
RETURN: void
PARAMETERS:
    NAME: id, TYPE: int64
    NAME: v_begin, TYPE: int64*
    NAME: v_end, TYPE: int64*
BODY:
{
    ((*v_begin) = partitions[((id * 0x4):5 + 0x0):5])
    ((*v_end) = partitions[((id * 0x4):5 + 0x1):5])
        return

}
FUNCTION: get_in_neighbors_range
RETURN: void
PARAMETERS:
    NAME: id, TYPE: int64
    NAME: n_begin, TYPE: int64*
    NAME: n_end, TYPE: int64*
BODY:
{
    ((*n_begin) = partitions[((id * 0x4):5 + 0x2):5])
    ((*n_end) = partitions[((id * 0x4):5 + 0x3):5])
        return

}
FUNCTION: _get_in_neighbors_range
RETURN: void
PARAMETERS:
    NAME: v_begin, TYPE: int64
    NAME: v_end, TYPE: int64
    NAME: n_begin, TYPE: int64*
    NAME: n_end, TYPE: int64*
BODY:
{
    (v_last = (v_end - 0x1):5)
    ((*n_begin) = vertices[((0x3 * v_begin):5 + 0x2):5])
    ((*n_end) = (vertices[((0x3 * v_last):5 + 0x2):5] + vertices[((0x3 * v_last):5 + 0x0):5]):5)
        return

}
FUNCTION: build_partitions
RETURN: void
PARAMETERS:
BODY:
{
    (cnt[0x0] = 0x4200)
    (cnt[0x1] = 0x4200)
    (cnt[0x2] = 0x7000)
    (cnt[0x3] = 0x5c00)
    (cnt[0x4] = 0xa000)
    (cnt[0x5] = 0xa000)
    (cnt[0x6] = 0xc800)
    (cnt[0x7] = 0xf000)
    (cnt[0x8] = 0x11800)
    (cnt[0x9] = 0xf000)
    (cnt[0xa] = 0x14000)
    (cnt[0xb] = 0xc800)
    (cnt[0xc] = 0xa000)
    (cnt[0xd] = 0x14000)
    (cnt[0xe] = 0x14000)
    (cnt[0xf] = 0x19000)
    (cnt[0x10] = 0x1b800)
    (cnt[0x11] = 0x16800)
    (cnt[0x12] = 0x1e000)
    (cnt[0x13] = 0x23000)
    (cnt[0x14] = 0x25800)
    (cnt[0x15] = 0x20800)
    (cnt[0x16] = 0x2a800)
    (cnt[0x17] = 0x2f800)
    (cnt[0x18] = 0x41000)
    (cnt[0x19] = 0x4b000)
    (cnt[0x1a] = 0x5b800)
    (cnt[0x1b] = 0x65800)
    (cnt[0x1c] = 0x9f000)
    (cnt[0x1d] = 0xcffd3)
    (cur = 0x0)
        
LOOP
    INIT
(i = 0x0)
    COND
(i < num_tasks):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        (v_begin = cur)
        (cur = (cur + cnt[i]):5)
                branch
            (cur > vertices_cnt):1:
                                {
                    (cur = vertices_cnt)
                }
            default:
                                {
                }

        (v_end = cur)
        _get_in_neighbors_range(v_begin, v_end, (&n_begin), (&n_end))
        (partitions[((i * 0x4):5 + 0x0):5] = v_begin)
        (partitions[((i * 0x4):5 + 0x1):5] = v_end)
        (partitions[((i * 0x4):5 + 0x2):5] = n_begin)
        (partitions[((i * 0x4):5 + 0x3):5] = n_end)
    }


        return

}
FUNCTION: create_new_iter_task
RETURN: void
PARAMETERS:
BODY:
{
    (space = 0x0)
    runner new_iter_task() watching () using (iter, num_tasks, task_status[0x0,, (num_tasks * 0x200):5], vertices_cnt, vertices, in_neighbors, partitions[0x0,, (0x40 * 0x4):5]) in (space)
        return

}
FUNCTION: barrier_task
RETURN: void
PARAMETERS:
    NAME: cur_iter, TYPE: int64
BODY:
{
        branch
        (cur_iter != iter):1:
                        {
                abortd

            }
        default:
                        {
            }

        
LOOP
    INIT
(i = 0x0)
    COND
(i < num_tasks):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
                branch
            (task_status[(i * 0x200):5] != 0x1):1:
                                {
                    abort

                }
            default:
                                {
                }

    }


    (iter = (iter + 0x1):5)
        branch
        (iter == 0x1f):1:
                        {
                output_char(0x52)
                output_char(0x65)
                output_char(0x61)
                output_char(0x63)
                output_char(0x68)
                output_char(0x65)
                output_char(0x64)
                output_char(0x20)
                output_char(0x6d)
                output_char(0x61)
                output_char(0x78)
                output_char(0x20)
                output_char(0x69)
                output_char(0x74)
                output_char(0x65)
                output_char(0x72)
                output_char(0x3a)
                output_q(0x1e)
                output_char(0x2e)
                {
                    output_char(0xa)
                }
                                

                output_char(0x54)
                output_char(0x69)
                output_char(0x6d)
                output_char(0x65)
                output_char(0x20)
                output_char(0x75)
                output_char(0x73)
                output_char(0x65)
                output_char(0x64)
                output_char(0x3a)
                output_char(0x20)
                (i = print_time_diff_and_update((&begin_time_sec), (&begin_time_nsec)))
                output_char(0x20)
                output_char(0x73)
                output_char(0x65)
                output_char(0x63)
                output_char(0x6f)
                output_char(0x6e)
                output_char(0x64)
                output_char(0x73)
                output_char(0x2e)
                {
                    output_char(0xa)
                }
                                

                runner topk_task((iter - 0x1):5) watching () using (vertices_cnt, vertices, vertices[0x0,, (((0x400 * 0x400):5 * 0x5):5 * 0x3):5]) in ()
                commitd

            }
        default:
                        {
            }

    create_new_iter_task()
    commitd

}
FUNCTION: calc_task
RETURN: void
PARAMETERS:
    NAME: id, TYPE: int64
BODY:
{
    get_vertices_range(id, (&v_begin), (&v_end))
    get_in_neighbors_range(id, (&n_begin), (&n_end))
    (pre_changed = 0x205200000)
    (cur_changed = 0x205700000)
    pc_get(iter, (((0x200200000 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5 + (((0x400 * 0x400):5 * 0x5):5 * 0x1):5):5, (0x1 * ((0x400 * 0x400):5 * 0x5):5):5, ((0x200200000 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5)
    (pre_pr = 0x200200000)
    (cur_pr = 0x202a00000)
    pc_get(iter, (0x200200000 + (((0x400 * 0x400):5 * 0x5):5 * 0x8):5):5, (0x8 * ((0x400 * 0x400):5 * 0x5):5):5, 0x200200000)
    (v = 0x400000008)
    (n = 0x407800008)
        branch
        ((*0x400000000) != 0x8829eff20):1:
                        {
                memcpy((&vertices[(v_begin * 0x3):5]), (0x8 * (((v_end - v_begin):5 + 0x1):5 * 0x3):5):5, (&v[(v_begin * 0x3):5]))
                memcpy((&in_neighbors[n_begin]), (0x8 * ((n_end - n_begin):5 + 0x1):5):5, (&n[n_begin]))
                ((*0x400000000) = 0x8829eff20)
            }
        default:
                        {
            }

        branch
        (iter == 0x0):1:
                        {
                                
LOOP
                INIT
(i = v_begin)
                COND
(i < v_end):1
                INCR
(i = (i + 0x1):5)
                BODY
                {
                    (new_pr = (0.150000 * (*                    (double*)(&v[((0x3 * i):5 + 0x1):5]))):12)
                    (cur_changed[i] = 0x79)
                    ((*                    (double*)(&cur_pr[i])) = new_pr)
                }


            }
        default:
                        {
                                
LOOP
                INIT
(i = v_begin)
                COND
(i < v_end):1
                INCR
(i = (i + 0x1):5)
                BODY
                {
                    (changed = 0x6e)
                    (new_pr = 0.000000)
                    (n_begin = v[((0x3 * i):5 + 0x2):5])
                    (n_end = (n_begin + v[((0x3 * i):5 + 0x0):5]):5)
                                        
LOOP
                    INIT
(j = n_begin)
                    COND
(j < n_end):1
                    INCR
(j = (j + 0x1):5)
                    BODY
                    {
                        (nbr = n[j])
                                                branch
                            (pre_changed[nbr] == 0x79):1:
                                                                {
                                    (changed = 0x79)
                                    (new_pr = (new_pr + (*                                    (double*)(&pre_pr[nbr]))):12)
                                }
                            default:
                                                                {
                                }

                    }


                                        branch
                        (changed == 0x79):1:
                                                        {
                                (new_pr = (new_pr * 0.850000):12)
                                (new_pr = (new_pr + 0.150000):12)
                                (new_pr = (new_pr * (*                                (double*)(&v[((0x3 * i):5 + 0x1):5]))):12)
                                ((*                                (double*)(&cur_pr[i])) = new_pr)
                            }
                        default:
                                                        {
                            }

                    (cur_changed[i] = changed)
                }


            }

    pc_write((iter + 0x1):5, (&cur_changed[v_begin]), (0x1 * (v_end - v_begin):5):5)
    pc_write((iter + 0x1):5, (&cur_pr[v_begin]), (0x8 * (v_end - v_begin):5):5)
    (task_status[(id * 0x200):5] = 0x1)
    commit

}
FUNCTION: new_iter_task
RETURN: void
PARAMETERS:
BODY:
{
        branch
        (iter > 0x0):1:
                        {
                pc_sync(iter)
            }
        default:
                        {
            }

        
LOOP
    INIT
(i = 0x0)
    COND
(i < num_tasks):1
    INCR
(i = (i + 0x1):5)
    BODY
    {
        get_vertices_range(i, (&v_begin), (&v_end))
        get_in_neighbors_range(i, (&n_begin), (&n_end))
        (space = (0x400000000000 * (i + 0x1):5):5)
                branch
            (iter == 0x0):1:
                                {
                    runner calc_task(i) watching () using (iter, num_tasks, vertices_cnt, vertices, in_neighbors, in_neighbors[0x0,, (((((0x400 * 0x400):5 * 0x46):5 * 0x2):5 / 0x2):5 + 0x1):5], vertices[0x0,, (((0x400 * 0x400):5 * 0x5):5 * 0x3):5], task_status[(i * 0x200):5,, ((i * 0x200):5 + 0x1):5], partitions[0x0,, (0x40 * 0x4):5]) in (space)
                }
            default:
                                {
                    runner calc_task(i) watching () using (iter, num_tasks, vertices_cnt, vertices, in_neighbors, task_status[(i * 0x200):5,, ((i * 0x200):5 + 0x1):5], partitions[0x0,, (0x40 * 0x4):5]) in (space)
                }

        (task_status[(i * 0x200):5] = 0x0)
    }


    (space = 0x0)
    runner barrier_task(iter) watching (task_status[0x0,, (num_tasks * 0x200):5]) using (iter, num_tasks, vertices_cnt, vertices, in_neighbors, begin_time_sec, begin_time_nsec) in (space)
    commit

}
FUNCTION: init_task
RETURN: void
PARAMETERS:
BODY:
{
    (i = gettime((&begin_time_sec), (&begin_time_nsec)))
    (vertices_cnt = (*0x40846000000))
    output_char(0x76)
    output_char(0x65)
    output_char(0x72)
    output_char(0x74)
    output_char(0x69)
    output_char(0x63)
    output_char(0x65)
    output_char(0x73)
    output_char(0x5f)
    output_char(0x63)
    output_char(0x6e)
    output_char(0x74)
    output_char(0x3a)
    output_char(0x20)
    output_q(vertices_cnt)
    {
        output_char(0xa)
    }
        

    (vertices = 0x40846000008)
    (in_neighbors = 0x4084d800000)
    (iter = 0x0)
    (num_tasks = 0x1e)
    build_partitions()
    create_new_iter_task()
    commit

}
FUNCTION: main
RETURN: void
PARAMETERS:
BODY:
{
    (space = 0x0)
    runner init_task() watching () using (iter, num_tasks, vertices_cnt, vertices, in_neighbors, begin_time_sec, begin_time_nsec,     (int64*)(((((((0x800000000 + 0x20000000000):5 - 0x1):5 + 0x1):5 + 0x20000000000):5 - 0x1):5 + 0x1):5 + ((((0x400 * 0x400):5 * 0x46):5 * 0x2):5 * 0x8):5):5[0x0,, (((0x400 * 0x400):5 * 0x5):5 * 0x3):5],     (int64*)((((((((0x800000000 + 0x20000000000):5 - 0x1):5 + 0x1):5 + 0x20000000000):5 - 0x1):5 + 0x1):5 + ((((0x400 * 0x400):5 * 0x46):5 * 0x2):5 * 0x8):5):5 + ((((0x400 * 0x400):5 * 0x5):5 * 0x3):5 * 0x8):5):5[0x0,, (((((0x400 * 0x400):5 * 0x46):5 * 0x2):5 / 0x2):5 + 0x1):5], partitions[0x0,, (0x40 * 0x4):5]) in (space)
    commit

}
*************************************
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 12, 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 12, 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 12, 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 2, 2
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 2, 2
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 12
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 1
DBG: IL generating: comparison: 1, 5, 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
DBG: IL generating: comparison: type 5
Optimizing: function START
Optimizing: call pralloc$0xcfc020, __temp_0$0xd82450, __temp_1$0xd82450
Optimizing: mov stack$0xd82450, __temp_0$0xd82450
Optimizing: mov stop$0xd82450, 0x0:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, start$0xd82090
Optimizing: add __temp_2$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_2$0xd82450
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: stelem stack$0xd82450, stop$0xd82450, end$0xd82090
Optimizing: add __temp_3$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_3$0xd82450
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: __temp_4$0xd82450:
Optimizing: cgt __temp_7$0xd82450, stop$0xd82450, 0x0:i8
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_7$0xd82450, __temp_6$0xd82450
Optimized: ble stop$0xd82450, 0x0:i8, __temp_6$0xd82450
Optimizing: nop
Optimizing: sub __temp_8$0xd86350, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_8$0xd86350
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: ldelem __temp_9$0xd86350, stack$0xd82450, stop$0xd82450
Optimizing: mov end$0xd82090, __temp_9$0xd86350
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem end$0xd82090, stack$0xd82450, stop$0xd82450
Optimized: nop
Optimizing: sub __temp_10$0xd86350, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_10$0xd86350
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: ldelem __temp_11$0xd86350, stack$0xd82450, stop$0xd82450
Optimizing: mov start$0xd82090, __temp_11$0xd86350
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem start$0xd82090, stack$0xd82450, stop$0xd82450
Optimized: nop
Optimizing: sub __temp_12$0xd86350, end$0xd82090, start$0xd82090
Optimizing: mov i$0xd82450, __temp_12$0xd86350
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub i$0xd82450, end$0xd82090, start$0xd82090
Optimized: nop
Optimizing: cgt __temp_14$0xd86350, i$0xd82450, 0x0:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_14$0xd86350, __temp_15$0xd86350
Optimized: blt 0x0:i8, i$0xd82450, __temp_15$0xd86350
Optimizing: nop
Optimizing: br __temp_13$0xd86350
Optimizing: __temp_15$0xd86350:
Optimizing: ldelem __temp_16$0xd88480, idx$0xd82090, end$0xd82090
Optimizing: ldelem __temp_17$0xd88480, value$0xd82090, __temp_16$0xd88480
Optimizing: mov pivot$0xd82450, __temp_17$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem pivot$0xd82450, value$0xd82090, __temp_16$0xd88480
Optimized: nop
Optimizing: mov p$0xd82450, start$0xd82090
Optimizing: mov i$0xd82450, start$0xd82090
Optimizing: __temp_18$0xd88480:
Optimizing: clt __temp_21$0xd88480, i$0xd82450, end$0xd82090
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_21$0xd88480, __temp_20$0xd88480
Optimized: ble end$0xd82090, i$0xd82450, __temp_20$0xd88480
Optimizing: nop
Optimizing: ldelem __temp_23$0xd8a120, idx$0xd82090, i$0xd82450
Optimizing: ldelem __temp_24$0xd8a120, value$0xd82090, __temp_23$0xd8a120
Optimizing: clt __temp_25$0xd8a120, __temp_24$0xd8a120, pivot$0xd82450
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_25$0xd8a120, __temp_26$0xd8a120
Optimized: blt __temp_24$0xd8a120, pivot$0xd82450, __temp_26$0xd8a120
Optimizing: nop
Optimizing: br __temp_22$0xd8a120
Optimizing: __temp_26$0xd8a120:
Optimizing: ldelem __temp_27$0xd8a9b0, idx$0xd82090, p$0xd82450
Optimizing: mov tmp$0xd82450, __temp_27$0xd8a9b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem tmp$0xd82450, idx$0xd82090, p$0xd82450
Optimized: nop
Optimizing: ldelem __temp_28$0xd8a9b0, idx$0xd82090, i$0xd82450
Optimizing: stelem idx$0xd82090, p$0xd82450, __temp_28$0xd8a9b0
Optimizing: stelem idx$0xd82090, i$0xd82450, tmp$0xd82450
Optimizing: add __temp_29$0xd8a9b0, p$0xd82450, 0x1:i8
Optimizing: mov p$0xd82450, __temp_29$0xd8a9b0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add p$0xd82450, p$0xd82450, 0x1:i8
Optimized: nop
Optimizing: __temp_22$0xd8a120:
Optimizing: __temp_19$0xd88480:
Optimizing: add __temp_30$0xd88480, i$0xd82450, 0x1:i8
Optimizing: mov i$0xd82450, __temp_30$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xd82450, i$0xd82450, 0x1:i8
Optimized: nop
Optimizing: br __temp_18$0xd88480
Optimizing: __temp_20$0xd88480:
Optimizing: ldelem __temp_31$0xd88480, idx$0xd82090, p$0xd82450
Optimizing: mov tmp$0xd82450, __temp_31$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem tmp$0xd82450, idx$0xd82090, p$0xd82450
Optimized: nop
Optimizing: ldelem __temp_32$0xd88480, idx$0xd82090, end$0xd82090
Optimizing: stelem idx$0xd82090, p$0xd82450, __temp_32$0xd88480
Optimizing: stelem idx$0xd82090, end$0xd82090, tmp$0xd82450
Optimizing: add __temp_33$0xd88480, p$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, __temp_33$0xd88480
Optimizing: add __temp_34$0xd88480, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_34$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: stelem stack$0xd82450, stop$0xd82450, end$0xd82090
Optimizing: add __temp_35$0xd88480, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_35$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: stelem stack$0xd82450, stop$0xd82450, start$0xd82090
Optimizing: add __temp_36$0xd88480, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_36$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: sub __temp_37$0xd88480, p$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, __temp_37$0xd88480
Optimizing: add __temp_38$0xd88480, stop$0xd82450, 0x1:i8
Optimizing: mov stop$0xd82450, __temp_38$0xd88480
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimized: nop
Optimizing: cgt __temp_40$0xd88480, stop$0xd82450, 0x2800:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_40$0xd88480, __temp_41$0xd88480
Optimized: blt 0x2800:i8, stop$0xd82450, __temp_41$0xd88480
Optimizing: nop
Optimizing: br __temp_39$0xd88480
Optimizing: __temp_41$0xd88480:
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6B:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x76:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x66:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6C:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x77:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: asm "exit:a"
Optimizing: __temp_39$0xd88480:
Optimizing: __temp_13$0xd86350:
Optimizing: __temp_5$0xd82450:
Optimizing: br __temp_4$0xd82450
Optimizing: __temp_6$0xd82450:
Optimized: Deleted 21 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: call pralloc$0xcfc020, __temp_0$0xd82450, __temp_1$0xd82450
Optimizing: mov stack$0xd82450, __temp_0$0xd82450
Optimizing: mov stop$0xd82450, 0x0:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, start$0xd82090
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, end$0xd82090
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: __temp_4$0xd82450:
Optimizing: ble stop$0xd82450, 0x0:i8, __temp_6$0xd82450
Optimizing: sub stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: ldelem end$0xd82090, stack$0xd82450, stop$0xd82450
Optimizing: sub stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: ldelem start$0xd82090, stack$0xd82450, stop$0xd82450
Optimizing: sub i$0xd82450, end$0xd82090, start$0xd82090
Optimizing: blt 0x0:i8, i$0xd82450, __temp_15$0xd86350
Optimizing: br __temp_13$0xd86350
Optimizing: __temp_15$0xd86350:
Optimizing: ldelem __temp_16$0xd88480, idx$0xd82090, end$0xd82090
Optimizing: ldelem pivot$0xd82450, value$0xd82090, __temp_16$0xd88480
Optimizing: mov p$0xd82450, start$0xd82090
Sadly not okay to optimize.
Optimizing: mov i$0xd82450, start$0xd82090
Optimizing: __temp_18$0xd88480:
Optimizing: ble end$0xd82090, i$0xd82450, __temp_20$0xd88480
Optimizing: ldelem __temp_23$0xd8a120, idx$0xd82090, i$0xd82450
Optimizing: ldelem __temp_24$0xd8a120, value$0xd82090, __temp_23$0xd8a120
Optimizing: blt __temp_24$0xd8a120, pivot$0xd82450, __temp_26$0xd8a120
Optimizing: br __temp_22$0xd8a120
Optimizing: __temp_26$0xd8a120:
Optimizing: ldelem tmp$0xd82450, idx$0xd82090, p$0xd82450
Optimizing: ldelem __temp_28$0xd8a9b0, idx$0xd82090, i$0xd82450
Optimizing: stelem idx$0xd82090, p$0xd82450, __temp_28$0xd8a9b0
Optimizing: stelem idx$0xd82090, i$0xd82450, tmp$0xd82450
Optimizing: add p$0xd82450, p$0xd82450, 0x1:i8
Optimizing: __temp_22$0xd8a120:
Optimizing: __temp_19$0xd88480:
Optimizing: add i$0xd82450, i$0xd82450, 0x1:i8
Optimizing: br __temp_18$0xd88480
Optimizing: __temp_20$0xd88480:
Optimizing: ldelem tmp$0xd82450, idx$0xd82090, p$0xd82450
Optimizing: ldelem __temp_32$0xd88480, idx$0xd82090, end$0xd82090
Optimizing: stelem idx$0xd82090, p$0xd82450, __temp_32$0xd88480
Optimizing: stelem idx$0xd82090, end$0xd82090, tmp$0xd82450
Optimizing: add __temp_33$0xd88480, p$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, __temp_33$0xd88480
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, end$0xd82090
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, start$0xd82090
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: sub __temp_37$0xd88480, p$0xd82450, 0x1:i8
Optimizing: stelem stack$0xd82450, stop$0xd82450, __temp_37$0xd88480
Optimizing: add stop$0xd82450, stop$0xd82450, 0x1:i8
Optimizing: blt 0x2800:i8, stop$0xd82450, __temp_41$0xd88480
Optimizing: br __temp_39$0xd88480
Optimizing: __temp_41$0xd88480:
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6B:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x76:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x66:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6C:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x77:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: asm "exit:a"
Optimizing: __temp_39$0xd88480:
Optimizing: __temp_13$0xd86350:
Optimizing: __temp_5$0xd82450:
Optimizing: br __temp_4$0xd82450
Optimizing: __temp_6$0xd82450:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bz 0x1:i8, __temp_44$0xdb41d0
Optimizing: sub __temp_45$0xdb5360, end$0xdb3db0, start$0xdb3db0
Optimizing: add __temp_46$0xdb5360, __temp_45$0xdb5360, 0x1:i8
Optimizing: mov i$0xdb41d0, __temp_46$0xdb5360
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xdb41d0, __temp_45$0xdb5360, 0x1:i8
Optimized: nop
Optimizing: cgt __temp_48$0xdb5360, i$0xdb41d0, k$0xdb3db0
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_48$0xdb5360, __temp_49$0xdb5360
Optimized: blt k$0xdb3db0, i$0xdb41d0, __temp_49$0xdb5360
Optimizing: nop
Optimizing: ret
Optimizing: br __temp_47$0xdb5360
Optimizing: __temp_49$0xdb5360:
Optimizing: ldelem __temp_50$0xdb60c0, idx$0xdb3db0, end$0xdb3db0
Optimizing: ldelem __temp_51$0xdb60c0, value$0xdb3db0, __temp_50$0xdb60c0
Optimizing: mov pivot$0xdb41d0, __temp_51$0xdb60c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem pivot$0xdb41d0, value$0xdb3db0, __temp_50$0xdb60c0
Optimized: nop
Optimizing: mov p$0xdb41d0, start$0xdb3db0
Optimizing: mov i$0xdb41d0, start$0xdb3db0
Optimizing: __temp_52$0xdb60c0:
Optimizing: clt __temp_55$0xdb60c0, i$0xdb41d0, end$0xdb3db0
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_55$0xdb60c0, __temp_54$0xdb60c0
Optimized: ble end$0xdb3db0, i$0xdb41d0, __temp_54$0xdb60c0
Optimizing: nop
Optimizing: ldelem __temp_57$0xdb7970, idx$0xdb3db0, i$0xdb41d0
Optimizing: ldelem __temp_58$0xdb7970, value$0xdb3db0, __temp_57$0xdb7970
Optimizing: clt __temp_59$0xdb7970, __temp_58$0xdb7970, pivot$0xdb41d0
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_59$0xdb7970, __temp_60$0xdb7970
Optimized: blt __temp_58$0xdb7970, pivot$0xdb41d0, __temp_60$0xdb7970
Optimizing: nop
Optimizing: br __temp_56$0xdb7970
Optimizing: __temp_60$0xdb7970:
Optimizing: ldelem __temp_61$0xdb8200, idx$0xdb3db0, p$0xdb41d0
Optimizing: mov tmp$0xdb41d0, __temp_61$0xdb8200
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem tmp$0xdb41d0, idx$0xdb3db0, p$0xdb41d0
Optimized: nop
Optimizing: ldelem __temp_62$0xdb8200, idx$0xdb3db0, i$0xdb41d0
Optimizing: stelem idx$0xdb3db0, p$0xdb41d0, __temp_62$0xdb8200
Optimizing: stelem idx$0xdb3db0, i$0xdb41d0, tmp$0xdb41d0
Optimizing: add __temp_63$0xdb8200, p$0xdb41d0, 0x1:i8
Optimizing: mov p$0xdb41d0, __temp_63$0xdb8200
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add p$0xdb41d0, p$0xdb41d0, 0x1:i8
Optimized: nop
Optimizing: __temp_56$0xdb7970:
Optimizing: __temp_53$0xdb60c0:
Optimizing: add __temp_64$0xdb60c0, i$0xdb41d0, 0x1:i8
Optimizing: mov i$0xdb41d0, __temp_64$0xdb60c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xdb41d0, i$0xdb41d0, 0x1:i8
Optimized: nop
Optimizing: br __temp_52$0xdb60c0
Optimizing: __temp_54$0xdb60c0:
Optimizing: ldelem __temp_65$0xdb60c0, idx$0xdb3db0, p$0xdb41d0
Optimizing: mov tmp$0xdb41d0, __temp_65$0xdb60c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem tmp$0xdb41d0, idx$0xdb3db0, p$0xdb41d0
Optimized: nop
Optimizing: ldelem __temp_66$0xdb60c0, idx$0xdb3db0, end$0xdb3db0
Optimizing: stelem idx$0xdb3db0, p$0xdb41d0, __temp_66$0xdb60c0
Optimizing: stelem idx$0xdb3db0, end$0xdb3db0, tmp$0xdb41d0
Optimizing: sub __temp_67$0xdb60c0, end$0xdb3db0, p$0xdb41d0
Optimizing: add __temp_68$0xdb60c0, __temp_67$0xdb60c0, 0x1:i8
Optimizing: mov i$0xdb41d0, __temp_68$0xdb60c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xdb41d0, __temp_67$0xdb60c0, 0x1:i8
Optimized: nop
Optimizing: ceq __temp_70$0xdb60c0, i$0xdb41d0, k$0xdb3db0
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_70$0xdb60c0, __temp_71$0xdb60c0
Optimized: beq i$0xdb41d0, k$0xdb3db0, __temp_71$0xdb60c0
Optimizing: nop
Optimizing: clt __temp_73$0xdbbbb0, i$0xdb41d0, k$0xdb3db0
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_73$0xdbbbb0, __temp_74$0xdbbbb0
Optimized: blt i$0xdb41d0, k$0xdb3db0, __temp_74$0xdbbbb0
Optimizing: nop
Optimizing: add __temp_75$0xdbcd70, p$0xdb41d0, 0x1:i8
Optimizing: mov start$0xdb3db0, __temp_75$0xdbcd70
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add start$0xdb3db0, p$0xdb41d0, 0x1:i8
Optimized: nop
Optimizing: __temp_76$0xdbcd70:
Optimizing: ldelem __temp_79$0xdbcd70, idx$0xdb3db0, start$0xdb3db0
Optimizing: ldelem __temp_80$0xdbcd70, value$0xdb3db0, __temp_79$0xdbcd70
Optimizing: ceq __temp_81$0xdbcd70, __temp_80$0xdbcd70, pivot$0xdb41d0
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_81$0xdbcd70, __temp_78$0xdbcd70
Optimized: bne __temp_80$0xdbcd70, pivot$0xdb41d0, __temp_78$0xdbcd70
Optimizing: nop
Optimizing: add __temp_82$0xdbdc60, start$0xdb3db0, 0x1:i8
Optimizing: mov start$0xdb3db0, __temp_82$0xdbdc60
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add start$0xdb3db0, start$0xdb3db0, 0x1:i8
Optimized: nop
Optimizing: cge __temp_84$0xdbdc60, start$0xdb3db0, end$0xdb3db0
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_84$0xdbdc60, __temp_85$0xdbdc60
Optimized: ble end$0xdb3db0, start$0xdb3db0, __temp_85$0xdbdc60
Optimizing: nop
Optimizing: br __temp_83$0xdbdc60
Optimizing: __temp_85$0xdbdc60:
Optimizing: br __temp_78$0xdbcd70
Optimizing: __temp_83$0xdbdc60:
Optimizing: __temp_77$0xdbcd70:
Optimizing: br __temp_76$0xdbcd70
Optimizing: __temp_78$0xdbcd70:
Optimizing: br __temp_72$0xdbbbb0
Optimizing: __temp_74$0xdbbbb0:
Optimizing: sub __temp_86$0xdbc040, p$0xdb41d0, 0x1:i8
Optimizing: mov end$0xdb3db0, __temp_86$0xdbc040
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub end$0xdb3db0, p$0xdb41d0, 0x1:i8
Optimized: nop
Optimizing: sub __temp_87$0xdbc040, k$0xdb3db0, i$0xdb41d0
Optimizing: mov k$0xdb3db0, __temp_87$0xdbc040
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub k$0xdb3db0, k$0xdb3db0, i$0xdb41d0
Optimized: nop
Optimizing: __temp_72$0xdbbbb0:
Optimizing: br __temp_69$0xdb60c0
Optimizing: __temp_71$0xdb60c0:
Optimizing: ret
Optimizing: __temp_69$0xdb60c0:
Optimizing: __temp_47$0xdb5360:
Optimizing: __temp_43$0xdb41d0:
Optimizing: br __temp_42$0xdb41d0
Optimizing: __temp_44$0xdb41d0:
Optimized: Deleted 18 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bz 0x1:i8, __temp_44$0xdb41d0
Optimizing: sub __temp_45$0xdb5360, end$0xdb3db0, start$0xdb3db0
Optimizing: add i$0xdb41d0, __temp_45$0xdb5360, 0x1:i8
Optimizing: blt k$0xdb3db0, i$0xdb41d0, __temp_49$0xdb5360
Optimizing: ret
Optimizing: br __temp_47$0xdb5360
Optimizing: __temp_49$0xdb5360:
Optimizing: ldelem __temp_50$0xdb60c0, idx$0xdb3db0, end$0xdb3db0
Optimizing: ldelem pivot$0xdb41d0, value$0xdb3db0, __temp_50$0xdb60c0
Optimizing: mov p$0xdb41d0, start$0xdb3db0
Sadly not okay to optimize.
Optimizing: mov i$0xdb41d0, start$0xdb3db0
Optimizing: __temp_52$0xdb60c0:
Optimizing: ble end$0xdb3db0, i$0xdb41d0, __temp_54$0xdb60c0
Optimizing: ldelem __temp_57$0xdb7970, idx$0xdb3db0, i$0xdb41d0
Optimizing: ldelem __temp_58$0xdb7970, value$0xdb3db0, __temp_57$0xdb7970
Optimizing: blt __temp_58$0xdb7970, pivot$0xdb41d0, __temp_60$0xdb7970
Optimizing: br __temp_56$0xdb7970
Optimizing: __temp_60$0xdb7970:
Optimizing: ldelem tmp$0xdb41d0, idx$0xdb3db0, p$0xdb41d0
Optimizing: ldelem __temp_62$0xdb8200, idx$0xdb3db0, i$0xdb41d0
Optimizing: stelem idx$0xdb3db0, p$0xdb41d0, __temp_62$0xdb8200
Optimizing: stelem idx$0xdb3db0, i$0xdb41d0, tmp$0xdb41d0
Optimizing: add p$0xdb41d0, p$0xdb41d0, 0x1:i8
Optimizing: __temp_56$0xdb7970:
Optimizing: __temp_53$0xdb60c0:
Optimizing: add i$0xdb41d0, i$0xdb41d0, 0x1:i8
Optimizing: br __temp_52$0xdb60c0
Optimizing: __temp_54$0xdb60c0:
Optimizing: ldelem tmp$0xdb41d0, idx$0xdb3db0, p$0xdb41d0
Optimizing: ldelem __temp_66$0xdb60c0, idx$0xdb3db0, end$0xdb3db0
Optimizing: stelem idx$0xdb3db0, p$0xdb41d0, __temp_66$0xdb60c0
Optimizing: stelem idx$0xdb3db0, end$0xdb3db0, tmp$0xdb41d0
Optimizing: sub __temp_67$0xdb60c0, end$0xdb3db0, p$0xdb41d0
Optimizing: add i$0xdb41d0, __temp_67$0xdb60c0, 0x1:i8
Optimizing: beq i$0xdb41d0, k$0xdb3db0, __temp_71$0xdb60c0
Optimizing: blt i$0xdb41d0, k$0xdb3db0, __temp_74$0xdbbbb0
Optimizing: add start$0xdb3db0, p$0xdb41d0, 0x1:i8
Optimizing: __temp_76$0xdbcd70:
Optimizing: ldelem __temp_79$0xdbcd70, idx$0xdb3db0, start$0xdb3db0
Optimizing: ldelem __temp_80$0xdbcd70, value$0xdb3db0, __temp_79$0xdbcd70
Optimizing: bne __temp_80$0xdbcd70, pivot$0xdb41d0, __temp_78$0xdbcd70
Optimizing: add start$0xdb3db0, start$0xdb3db0, 0x1:i8
Optimizing: ble end$0xdb3db0, start$0xdb3db0, __temp_85$0xdbdc60
Optimizing: br __temp_83$0xdbdc60
Optimizing: __temp_85$0xdbdc60:
Optimizing: br __temp_78$0xdbcd70
Optimizing: __temp_83$0xdbdc60:
Optimizing: __temp_77$0xdbcd70:
Optimizing: br __temp_76$0xdbcd70
Optimizing: __temp_78$0xdbcd70:
Optimizing: br __temp_72$0xdbbbb0
Optimizing: __temp_74$0xdbbbb0:
Optimizing: sub end$0xdb3db0, p$0xdb41d0, 0x1:i8
Optimizing: sub k$0xdb3db0, k$0xdb3db0, i$0xdb41d0
Optimizing: __temp_72$0xdbbbb0:
Optimizing: br __temp_69$0xdb60c0
Optimizing: __temp_71$0xdb60c0:
Optimizing: ret
Optimizing: __temp_69$0xdb60c0:
Optimizing: __temp_47$0xdb5360:
Optimizing: __temp_43$0xdb41d0:
Optimizing: br __temp_42$0xdb41d0
Optimizing: __temp_44$0xdb41d0:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_89$0xdfac90, __temp_90$0xdfac90
Optimizing: mov topk_k$0xdfac90, 0x64:i8
Optimizing: br __temp_88$0xdfac90
Optimizing: __temp_90$0xdfac90:
Optimizing: mov topk_k$0xdfac90, vertices_cnt$0xcfc020
Optimizing: __temp_88$0xdfac90:
Optimizing: mul __temp_92$0xdfac90, 0x8:i8, vertices_cnt$0xcfc020
Optimizing: call pralloc$0xcfc020, __temp_91$0xdfac90, __temp_92$0xdfac90
Optimizing: mov idx$0xdfac90, __temp_91$0xdfac90
Optimizing: mov i$0xdfac90, 0x0:i8
Optimizing: __temp_93$0xdfac90:
Optimizing: clt __temp_96$0xdfac90, i$0xdfac90, vertices_cnt$0xcfc020
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_96$0xdfac90, __temp_95$0xdfac90
Optimized: ble vertices_cnt$0xcfc020, i$0xdfac90, __temp_95$0xdfac90
Optimizing: nop
Optimizing: stelem idx$0xdfac90, i$0xdfac90, i$0xdfac90
Optimizing: __temp_94$0xdfac90:
Optimizing: add __temp_97$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: mov i$0xdfac90, __temp_97$0xdfac90
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xdfac90, i$0xdfac90, 0x1:i8
Optimized: nop
Optimizing: br __temp_93$0xdfac90
Optimizing: __temp_95$0xdfac90:
Optimizing: mov value$0xdfac90, 0x202A00000:i
Optimizing: add __temp_99$0xdfac90, iter$0xdfaa60, 0x1:i8
Optimizing: call pc_sync$0xcfc020, __temp_98$0xdfac90, __temp_99$0xdfac90
Optimizing: add __temp_101$0xdfac90, iter$0xdfaa60, 0x1:i8
Optimizing: mul __temp_102$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_103$0xdfac90, __temp_102$0xdfac90, 0x5:i8
Optimizing: mul __temp_104$0xdfac90, __temp_103$0xdfac90, 0x8:i8
Optimizing: add __temp_105$0xdfac90, 0x200200000:i8, __temp_104$0xdfac90
Optimizing: mul __temp_106$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_107$0xdfac90, __temp_106$0xdfac90, 0x5:i8
Optimizing: mul __temp_108$0xdfac90, 0x8:i8, __temp_107$0xdfac90
Optimizing: mul __temp_109$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_110$0xdfac90, __temp_109$0xdfac90, 0x5:i8
Optimizing: mul __temp_111$0xdfac90, __temp_110$0xdfac90, 0x8:i8
Optimizing: add __temp_112$0xdfac90, 0x200200000:i8, __temp_111$0xdfac90
Optimizing: call pc_get$0xcfc020, __temp_100$0xdfac90, __temp_101$0xdfac90, __temp_105$0xdfac90, __temp_108$0xdfac90, __temp_112$0xdfac90
Optimizing: mov i$0xdfac90, 0x0:i8
Optimizing: __temp_113$0xdfac90:
Optimizing: clt __temp_116$0xdfac90, i$0xdfac90, vertices_cnt$0xcfc020
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_116$0xdfac90, __temp_115$0xdfac90
Optimized: ble vertices_cnt$0xcfc020, i$0xdfac90, __temp_115$0xdfac90
Optimizing: nop
Optimizing: ldelem __temp_117$0xe03280, value$0xdfac90, i$0xdfac90
Optimizing: mul __temp_119$0xe03280, 0x3:i8, i$0xdfac90
Optimizing: add __temp_120$0xe03280, __temp_119$0xe03280, 0x1:i8
Optimizing: ldelema __temp_118$0xe03280, vertices$0xcfc020, __temp_120$0xe03280
Optimizing: ldi __temp_121$0xe03280, __temp_118$0xe03280
Optimizing: div __temp_122$0xe03280, __temp_117$0xe03280, __temp_121$0xe03280
Optimizing: stelem value$0xdfac90, i$0xdfac90, __temp_122$0xe03280
Optimizing: __temp_114$0xdfac90:
Optimizing: add __temp_123$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: mov i$0xdfac90, __temp_123$0xdfac90
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xdfac90, i$0xdfac90, 0x1:i8
Optimized: nop
Optimizing: br __temp_113$0xdfac90
Optimizing: __temp_115$0xdfac90:
Optimizing: sub __temp_124$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: call select_topk$0xcfc020, <missing>, idx$0xdfac90, 0x0:i8, __temp_124$0xdfac90, value$0xdfac90, topk_k$0xdfac90
Optimizing: sub __temp_125$0xdfac90, vertices_cnt$0xcfc020, topk_k$0xdfac90
Optimizing: sub __temp_126$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: call sort$0xcfc020, <missing>, idx$0xdfac90, __temp_125$0xdfac90, __temp_126$0xdfac90, value$0xdfac90
Optimizing: call output_char$0xcfc020, <missing>, 0x54:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x70:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, topk_k$0xdfac90
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x66:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, iter$0xdfaa60
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: sub __temp_130$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: mov i$0xdfac90, __temp_130$0xdfac90
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub i$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimized: nop
Optimizing: __temp_127$0xdfac90:
Optimizing: sub __temp_131$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: sub __temp_132$0xdfac90, __temp_131$0xdfac90, topk_k$0xdfac90
Optimizing: cgt __temp_133$0xdfac90, i$0xdfac90, __temp_132$0xdfac90
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_133$0xdfac90, __temp_129$0xdfac90
Optimized: ble i$0xdfac90, __temp_132$0xdfac90, __temp_129$0xdfac90
Optimizing: nop
Optimizing: call output_char$0xcfc020, <missing>, 0x28:i1
Optimizing: ldelem __temp_134$0xe0cb60, idx$0xdfac90, i$0xdfac90
Optimizing: call output_q$0xcfc020, <missing>, __temp_134$0xe0cb60
Optimizing: call output_char$0xcfc020, <missing>, 0x2C:i1
Optimizing: ldelem __temp_135$0xe0cb60, idx$0xdfac90, i$0xdfac90
Optimizing: ldelem __temp_136$0xe0cb60, value$0xdfac90, __temp_135$0xe0cb60
Optimizing: call output_double$0xcfc020, <missing>, __temp_136$0xe0cb60
Optimizing: call output_char$0xcfc020, <missing>, 0x29:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: __temp_128$0xdfac90:
Optimizing: sub __temp_137$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: mov i$0xdfac90, __temp_137$0xdfac90
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub i$0xdfac90, i$0xdfac90, 0x1:i8
Optimized: nop
Optimizing: br __temp_127$0xdfac90
Optimizing: __temp_129$0xdfac90:
Optimized: Deleted 7 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_89$0xdfac90, __temp_90$0xdfac90
Optimizing: mov topk_k$0xdfac90, 0x64:i8
Optimizing: br __temp_88$0xdfac90
Optimizing: __temp_90$0xdfac90:
Optimizing: mov topk_k$0xdfac90, vertices_cnt$0xcfc020
Optimizing: __temp_88$0xdfac90:
Optimizing: mul __temp_92$0xdfac90, 0x8:i8, vertices_cnt$0xcfc020
Optimizing: call pralloc$0xcfc020, __temp_91$0xdfac90, __temp_92$0xdfac90
Optimizing: mov idx$0xdfac90, __temp_91$0xdfac90
Optimizing: mov i$0xdfac90, 0x0:i8
Optimizing: __temp_93$0xdfac90:
Optimizing: ble vertices_cnt$0xcfc020, i$0xdfac90, __temp_95$0xdfac90
Optimizing: stelem idx$0xdfac90, i$0xdfac90, i$0xdfac90
Optimizing: __temp_94$0xdfac90:
Optimizing: add i$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: br __temp_93$0xdfac90
Optimizing: __temp_95$0xdfac90:
Optimizing: mov value$0xdfac90, 0x202A00000:i
Optimizing: add __temp_99$0xdfac90, iter$0xdfaa60, 0x1:i8
Optimizing: call pc_sync$0xcfc020, __temp_98$0xdfac90, __temp_99$0xdfac90
Optimizing: add __temp_101$0xdfac90, iter$0xdfaa60, 0x1:i8
Optimizing: mul __temp_102$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_103$0xdfac90, __temp_102$0xdfac90, 0x5:i8
Optimizing: mul __temp_104$0xdfac90, __temp_103$0xdfac90, 0x8:i8
Optimizing: add __temp_105$0xdfac90, 0x200200000:i8, __temp_104$0xdfac90
Optimizing: mul __temp_106$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_107$0xdfac90, __temp_106$0xdfac90, 0x5:i8
Optimizing: mul __temp_108$0xdfac90, 0x8:i8, __temp_107$0xdfac90
Optimizing: mul __temp_109$0xdfac90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_110$0xdfac90, __temp_109$0xdfac90, 0x5:i8
Optimizing: mul __temp_111$0xdfac90, __temp_110$0xdfac90, 0x8:i8
Optimizing: add __temp_112$0xdfac90, 0x200200000:i8, __temp_111$0xdfac90
Optimizing: call pc_get$0xcfc020, __temp_100$0xdfac90, __temp_101$0xdfac90, __temp_105$0xdfac90, __temp_108$0xdfac90, __temp_112$0xdfac90
Optimizing: mov i$0xdfac90, 0x0:i8
Optimizing: __temp_113$0xdfac90:
Optimizing: ble vertices_cnt$0xcfc020, i$0xdfac90, __temp_115$0xdfac90
Optimizing: ldelem __temp_117$0xe03280, value$0xdfac90, i$0xdfac90
Optimizing: mul __temp_119$0xe03280, 0x3:i8, i$0xdfac90
Optimizing: add __temp_120$0xe03280, __temp_119$0xe03280, 0x1:i8
Optimizing: ldelema __temp_118$0xe03280, vertices$0xcfc020, __temp_120$0xe03280
Optimizing: ldi __temp_121$0xe03280, __temp_118$0xe03280
Optimizing: div __temp_122$0xe03280, __temp_117$0xe03280, __temp_121$0xe03280
Optimizing: stelem value$0xdfac90, i$0xdfac90, __temp_122$0xe03280
Optimizing: __temp_114$0xdfac90:
Optimizing: add i$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: br __temp_113$0xdfac90
Optimizing: __temp_115$0xdfac90:
Optimizing: sub __temp_124$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: call select_topk$0xcfc020, <missing>, idx$0xdfac90, 0x0:i8, __temp_124$0xdfac90, value$0xdfac90, topk_k$0xdfac90
Optimizing: sub __temp_125$0xdfac90, vertices_cnt$0xcfc020, topk_k$0xdfac90
Optimizing: sub __temp_126$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: call sort$0xcfc020, <missing>, idx$0xdfac90, __temp_125$0xdfac90, __temp_126$0xdfac90, value$0xdfac90
Optimizing: call output_char$0xcfc020, <missing>, 0x54:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x70:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, topk_k$0xdfac90
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x66:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, iter$0xdfaa60
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: sub i$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: __temp_127$0xdfac90:
Optimizing: sub __temp_131$0xdfac90, vertices_cnt$0xcfc020, 0x1:i8
Optimizing: sub __temp_132$0xdfac90, __temp_131$0xdfac90, topk_k$0xdfac90
Optimizing: ble i$0xdfac90, __temp_132$0xdfac90, __temp_129$0xdfac90
Optimizing: call output_char$0xcfc020, <missing>, 0x28:i1
Optimizing: ldelem __temp_134$0xe0cb60, idx$0xdfac90, i$0xdfac90
Optimizing: call output_q$0xcfc020, <missing>, __temp_134$0xe0cb60
Optimizing: call output_char$0xcfc020, <missing>, 0x2C:i1
Optimizing: ldelem __temp_135$0xe0cb60, idx$0xdfac90, i$0xdfac90
Optimizing: ldelem __temp_136$0xe0cb60, value$0xdfac90, __temp_135$0xe0cb60
Optimizing: call output_double$0xcfc020, <missing>, __temp_136$0xe0cb60
Optimizing: call output_char$0xcfc020, <missing>, 0x29:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: __temp_128$0xdfac90:
Optimizing: sub i$0xdfac90, i$0xdfac90, 0x1:i8
Optimizing: br __temp_127$0xdfac90
Optimizing: __temp_129$0xdfac90:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: add __temp_139$0xe17b80, __temp_138$0xe17b80, 0x0:i8
Optimizing: ldelem __temp_140$0xe17b80, partitions$0xcfc020, __temp_139$0xe17b80
Optimizing: sti v_begin$0xe17810, __temp_140$0xe17b80
Optimizing: mul __temp_141$0xe17b80, id$0xe17810, 0x4:i8
Optimizing: add __temp_142$0xe17b80, __temp_141$0xe17b80, 0x1:i8
Optimizing: ldelem __temp_143$0xe17b80, partitions$0xcfc020, __temp_142$0xe17b80
Optimizing: sti v_end$0xe17810, __temp_143$0xe17b80
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: add __temp_145$0xe1f5c0, __temp_144$0xe1f5c0, 0x2:i8
Optimizing: ldelem __temp_146$0xe1f5c0, partitions$0xcfc020, __temp_145$0xe1f5c0
Optimizing: sti n_begin$0xe1f2a0, __temp_146$0xe1f5c0
Optimizing: mul __temp_147$0xe1f5c0, id$0xe1f2a0, 0x4:i8
Optimizing: add __temp_148$0xe1f5c0, __temp_147$0xe1f5c0, 0x3:i8
Optimizing: ldelem __temp_149$0xe1f5c0, partitions$0xcfc020, __temp_148$0xe1f5c0
Optimizing: sti n_end$0xe1f2a0, __temp_149$0xe1f5c0
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mov v_last$0xe2a230, __temp_150$0xe2a230
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: sub v_last$0xe2a230, v_end$0xe29e90, 0x1:i8
Optimized: nop
Optimizing: mul __temp_151$0xe2a230, 0x3:i8, v_begin$0xe29e90
Optimizing: add __temp_152$0xe2a230, __temp_151$0xe2a230, 0x2:i8
Optimizing: ldelem __temp_153$0xe2a230, vertices$0xcfc020, __temp_152$0xe2a230
Optimizing: sti n_begin$0xe29e90, __temp_153$0xe2a230
Optimizing: mul __temp_154$0xe2a230, 0x3:i8, v_last$0xe2a230
Optimizing: add __temp_155$0xe2a230, __temp_154$0xe2a230, 0x2:i8
Optimizing: ldelem __temp_156$0xe2a230, vertices$0xcfc020, __temp_155$0xe2a230
Optimizing: mul __temp_157$0xe2a230, 0x3:i8, v_last$0xe2a230
Optimizing: add __temp_158$0xe2a230, __temp_157$0xe2a230, 0x0:i8
Optimizing: ldelem __temp_159$0xe2a230, vertices$0xcfc020, __temp_158$0xe2a230
Optimizing: add __temp_160$0xe2a230, __temp_156$0xe2a230, __temp_159$0xe2a230
Optimizing: sti n_end$0xe29e90, __temp_160$0xe2a230
Optimized: Deleted 1 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: mul __temp_151$0xe2a230, 0x3:i8, v_begin$0xe29e90
Optimizing: add __temp_152$0xe2a230, __temp_151$0xe2a230, 0x2:i8
Optimizing: ldelem __temp_153$0xe2a230, vertices$0xcfc020, __temp_152$0xe2a230
Optimizing: sti n_begin$0xe29e90, __temp_153$0xe2a230
Optimizing: mul __temp_154$0xe2a230, 0x3:i8, v_last$0xe2a230
Optimizing: add __temp_155$0xe2a230, __temp_154$0xe2a230, 0x2:i8
Optimizing: ldelem __temp_156$0xe2a230, vertices$0xcfc020, __temp_155$0xe2a230
Optimizing: mul __temp_157$0xe2a230, 0x3:i8, v_last$0xe2a230
Optimizing: add __temp_158$0xe2a230, __temp_157$0xe2a230, 0x0:i8
Optimizing: ldelem __temp_159$0xe2a230, vertices$0xcfc020, __temp_158$0xe2a230
Optimizing: add __temp_160$0xe2a230, __temp_156$0xe2a230, __temp_159$0xe2a230
Optimizing: sti n_end$0xe29e90, __temp_160$0xe2a230
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: stelem cnt$0xe61080, 0x1:i8, 0x4200:i8
Optimizing: stelem cnt$0xe61080, 0x2:i8, 0x7000:i8
Optimizing: stelem cnt$0xe61080, 0x3:i8, 0x5C00:i8
Optimizing: stelem cnt$0xe61080, 0x4:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0x5:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0x6:i8, 0xC800:i8
Optimizing: stelem cnt$0xe61080, 0x7:i8, 0xF000:i8
Optimizing: stelem cnt$0xe61080, 0x8:i8, 0x11800:i8
Optimizing: stelem cnt$0xe61080, 0x9:i8, 0xF000:i8
Optimizing: stelem cnt$0xe61080, 0xA:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xB:i8, 0xC800:i8
Optimizing: stelem cnt$0xe61080, 0xC:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0xD:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xE:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xF:i8, 0x19000:i8
Optimizing: stelem cnt$0xe61080, 0x10:i8, 0x1B800:i8
Optimizing: stelem cnt$0xe61080, 0x11:i8, 0x16800:i8
Optimizing: stelem cnt$0xe61080, 0x12:i8, 0x1E000:i8
Optimizing: stelem cnt$0xe61080, 0x13:i8, 0x23000:i8
Optimizing: stelem cnt$0xe61080, 0x14:i8, 0x25800:i8
Optimizing: stelem cnt$0xe61080, 0x15:i8, 0x20800:i8
Optimizing: stelem cnt$0xe61080, 0x16:i8, 0x2A800:i8
Optimizing: stelem cnt$0xe61080, 0x17:i8, 0x2F800:i8
Optimizing: stelem cnt$0xe61080, 0x18:i8, 0x41000:i8
Optimizing: stelem cnt$0xe61080, 0x19:i8, 0x4B000:i8
Optimizing: stelem cnt$0xe61080, 0x1A:i8, 0x5B800:i8
Optimizing: stelem cnt$0xe61080, 0x1B:i8, 0x65800:i8
Optimizing: stelem cnt$0xe61080, 0x1C:i8, 0x9F000:i8
Optimizing: stelem cnt$0xe61080, 0x1D:i8, 0xCFFD3:i8
Optimizing: mov cur$0xe61080, 0x0:i8
Optimizing: mov i$0xe61080, 0x0:i8
Optimizing: __temp_161$0xe61080:
Optimizing: clt __temp_164$0xe61080, i$0xe61080, num_tasks$0xcfc020
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_164$0xe61080, __temp_163$0xe61080
Optimized: ble num_tasks$0xcfc020, i$0xe61080, __temp_163$0xe61080
Optimizing: nop
Optimizing: mov v_begin$0xe61080, cur$0xe61080
Optimizing: ldelem __temp_165$0xe6fbf0, cnt$0xe61080, i$0xe61080
Optimizing: add __temp_166$0xe6fbf0, cur$0xe61080, __temp_165$0xe6fbf0
Optimizing: mov cur$0xe61080, __temp_166$0xe6fbf0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add cur$0xe61080, cur$0xe61080, __temp_165$0xe6fbf0
Optimized: nop
Optimizing: cgt __temp_168$0xe6fbf0, cur$0xe61080, vertices_cnt$0xcfc020
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_168$0xe6fbf0, __temp_169$0xe6fbf0
Optimized: blt vertices_cnt$0xcfc020, cur$0xe61080, __temp_169$0xe6fbf0
Optimizing: nop
Optimizing: br __temp_167$0xe6fbf0
Optimizing: __temp_169$0xe6fbf0:
Optimizing: mov cur$0xe61080, vertices_cnt$0xcfc020
Optimizing: __temp_167$0xe6fbf0:
Optimizing: mov v_end$0xe61080, cur$0xe61080
Optimizing: lda __temp_170$0xe6fbf0, n_begin$0xe61080
Optimizing: lda __temp_171$0xe6fbf0, n_end$0xe61080
Optimizing: call _get_in_neighbors_range$0xcfc020, <missing>, v_begin$0xe61080, v_end$0xe61080, __temp_170$0xe6fbf0, __temp_171$0xe6fbf0
Optimizing: mul __temp_172$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_173$0xe6fbf0, __temp_172$0xe6fbf0, 0x0:i8
Optimizing: stelem partitions$0xcfc020, __temp_173$0xe6fbf0, v_begin$0xe61080
Optimizing: mul __temp_174$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_175$0xe6fbf0, __temp_174$0xe6fbf0, 0x1:i8
Optimizing: stelem partitions$0xcfc020, __temp_175$0xe6fbf0, v_end$0xe61080
Optimizing: mul __temp_176$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_177$0xe6fbf0, __temp_176$0xe6fbf0, 0x2:i8
Optimizing: stelem partitions$0xcfc020, __temp_177$0xe6fbf0, n_begin$0xe61080
Optimizing: mul __temp_178$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_179$0xe6fbf0, __temp_178$0xe6fbf0, 0x3:i8
Optimizing: stelem partitions$0xcfc020, __temp_179$0xe6fbf0, n_end$0xe61080
Optimizing: __temp_162$0xe61080:
Optimizing: add __temp_180$0xe61080, i$0xe61080, 0x1:i8
Optimizing: mov i$0xe61080, __temp_180$0xe61080
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xe61080, i$0xe61080, 0x1:i8
Optimized: nop
Optimizing: br __temp_161$0xe61080
Optimizing: __temp_163$0xe61080:
Optimized: Deleted 4 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: stelem cnt$0xe61080, 0x1:i8, 0x4200:i8
Optimizing: stelem cnt$0xe61080, 0x2:i8, 0x7000:i8
Optimizing: stelem cnt$0xe61080, 0x3:i8, 0x5C00:i8
Optimizing: stelem cnt$0xe61080, 0x4:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0x5:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0x6:i8, 0xC800:i8
Optimizing: stelem cnt$0xe61080, 0x7:i8, 0xF000:i8
Optimizing: stelem cnt$0xe61080, 0x8:i8, 0x11800:i8
Optimizing: stelem cnt$0xe61080, 0x9:i8, 0xF000:i8
Optimizing: stelem cnt$0xe61080, 0xA:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xB:i8, 0xC800:i8
Optimizing: stelem cnt$0xe61080, 0xC:i8, 0xA000:i8
Optimizing: stelem cnt$0xe61080, 0xD:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xE:i8, 0x14000:i8
Optimizing: stelem cnt$0xe61080, 0xF:i8, 0x19000:i8
Optimizing: stelem cnt$0xe61080, 0x10:i8, 0x1B800:i8
Optimizing: stelem cnt$0xe61080, 0x11:i8, 0x16800:i8
Optimizing: stelem cnt$0xe61080, 0x12:i8, 0x1E000:i8
Optimizing: stelem cnt$0xe61080, 0x13:i8, 0x23000:i8
Optimizing: stelem cnt$0xe61080, 0x14:i8, 0x25800:i8
Optimizing: stelem cnt$0xe61080, 0x15:i8, 0x20800:i8
Optimizing: stelem cnt$0xe61080, 0x16:i8, 0x2A800:i8
Optimizing: stelem cnt$0xe61080, 0x17:i8, 0x2F800:i8
Optimizing: stelem cnt$0xe61080, 0x18:i8, 0x41000:i8
Optimizing: stelem cnt$0xe61080, 0x19:i8, 0x4B000:i8
Optimizing: stelem cnt$0xe61080, 0x1A:i8, 0x5B800:i8
Optimizing: stelem cnt$0xe61080, 0x1B:i8, 0x65800:i8
Optimizing: stelem cnt$0xe61080, 0x1C:i8, 0x9F000:i8
Optimizing: stelem cnt$0xe61080, 0x1D:i8, 0xCFFD3:i8
Optimizing: mov cur$0xe61080, 0x0:i8
Optimizing: mov i$0xe61080, 0x0:i8
Optimizing: __temp_161$0xe61080:
Optimizing: ble num_tasks$0xcfc020, i$0xe61080, __temp_163$0xe61080
Optimizing: mov v_begin$0xe61080, cur$0xe61080
Optimizing: ldelem __temp_165$0xe6fbf0, cnt$0xe61080, i$0xe61080
Optimizing: add cur$0xe61080, cur$0xe61080, __temp_165$0xe6fbf0
Optimizing: blt vertices_cnt$0xcfc020, cur$0xe61080, __temp_169$0xe6fbf0
Optimizing: br __temp_167$0xe6fbf0
Optimizing: __temp_169$0xe6fbf0:
Optimizing: mov cur$0xe61080, vertices_cnt$0xcfc020
Optimizing: __temp_167$0xe6fbf0:
Optimizing: mov v_end$0xe61080, cur$0xe61080
Optimizing: lda __temp_170$0xe6fbf0, n_begin$0xe61080
Optimizing: lda __temp_171$0xe6fbf0, n_end$0xe61080
Optimizing: call _get_in_neighbors_range$0xcfc020, <missing>, v_begin$0xe61080, v_end$0xe61080, __temp_170$0xe6fbf0, __temp_171$0xe6fbf0
Optimizing: mul __temp_172$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_173$0xe6fbf0, __temp_172$0xe6fbf0, 0x0:i8
Optimizing: stelem partitions$0xcfc020, __temp_173$0xe6fbf0, v_begin$0xe61080
Optimizing: mul __temp_174$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_175$0xe6fbf0, __temp_174$0xe6fbf0, 0x1:i8
Optimizing: stelem partitions$0xcfc020, __temp_175$0xe6fbf0, v_end$0xe61080
Optimizing: mul __temp_176$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_177$0xe6fbf0, __temp_176$0xe6fbf0, 0x2:i8
Optimizing: stelem partitions$0xcfc020, __temp_177$0xe6fbf0, n_begin$0xe61080
Optimizing: mul __temp_178$0xe6fbf0, i$0xe61080, 0x4:i8
Optimizing: add __temp_179$0xe6fbf0, __temp_178$0xe6fbf0, 0x3:i8
Optimizing: stelem partitions$0xcfc020, __temp_179$0xe6fbf0, n_end$0xe61080
Optimizing: __temp_162$0xe61080:
Optimizing: add i$0xe61080, i$0xe61080, 0x1:i8
Optimizing: br __temp_161$0xe61080
Optimizing: __temp_163$0xe61080:
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x7:msq, 0x200001010:msq"
Optimizing: lda __temp_184$0xe81630, iter$0xcfc020
Optimizing: mov __temp_185$0xe81630, 0x8:i
Optimizing: sti 0x200001018:i, __temp_184$0xe81630
Optimizing: sti 0x200001020:i, __temp_185$0xe81630
Optimizing: lda __temp_186$0xe81630, num_tasks$0xcfc020
Optimizing: mov __temp_187$0xe81630, 0x8:i
Optimizing: sti 0x200001028:i, __temp_186$0xe81630
Optimizing: sti 0x200001030:i, __temp_187$0xe81630
Optimizing: mul __temp_190$0xe81630, num_tasks$0xcfc020, 0x200:i8
Optimizing: ldelema __temp_188$0xe81630, task_status$0xcfc020, 0x0:i8
Optimizing: sub __temp_189$0xe81630, __temp_190$0xe81630, 0x0:i8
Optimizing: mul __temp_189$0xe81630, 0x8:i, __temp_189$0xe81630
Optimizing: sti 0x200001038:i, __temp_188$0xe81630
Optimizing: sti 0x200001040:i, __temp_189$0xe81630
Optimizing: lda __temp_191$0xe81630, vertices_cnt$0xcfc020
Optimizing: mov __temp_192$0xe81630, 0x8:i
Optimizing: sti 0x200001048:i, __temp_191$0xe81630
Optimizing: sti 0x200001050:i, __temp_192$0xe81630
Optimizing: lda __temp_193$0xe81630, vertices$0xcfc020
Optimizing: mov __temp_194$0xe81630, 0x8:i
Optimizing: sti 0x200001058:i, __temp_193$0xe81630
Optimizing: sti 0x200001060:i, __temp_194$0xe81630
Optimizing: lda __temp_195$0xe81630, in_neighbors$0xcfc020
Optimizing: mov __temp_196$0xe81630, 0x8:i
Optimizing: sti 0x200001068:i, __temp_195$0xe81630
Optimizing: sti 0x200001070:i, __temp_196$0xe81630
Optimizing: mul __temp_199$0xe81630, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_197$0xe81630, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_198$0xe81630, __temp_199$0xe81630, 0x0:i8
Optimizing: mul __temp_198$0xe81630, 0x8:i, __temp_198$0xe81630
Optimizing: sti 0x200001078:i, __temp_197$0xe81630
Optimizing: sti 0x200001080:i, __temp_198$0xe81630
Optimizing: asm "mov $0x0:msq, 0x200001088:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001090:msq"
Optimizing: mov __temp_200$0xe81630, space$0xe81630
Optimizing: sti 0x200001098:i, __temp_200$0xe81630
Optimizing: asm "mov $0x200001000:msq, 0x2000010a0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010a8:msq"
Optimizing: asm "mov $0x200001088:msq, 0x2000010b0:msq"
Optimizing: asm "mov $0x200001090:msq, 0x2000010b8:msq"
Optimizing: asm "mov $0x200001098:msq, 0x2000010c0:msq"
Optimizing: asm "spawnx 0x2000010a0, 0x2000010a8, 0x2000010b0, 0x2000010b8, 0x2000010c0"
Optimizing: ldi __temp_181$0xe81630, 0x100000400:i
Optimizing: ldi __temp_182$0xe81630, 0x100000408:i
Optimizing: add __temp_183$0xe81630, __temp_181$0xe81630, __temp_182$0xe81630
Optimizing: lda __temp_201$0xe81630, new_iter_task$0xcfc020
Optimizing: sub __temp_183$0xe81630, __temp_183$0xe81630, 0x8:i8
Optimizing: sti __temp_183$0xe81630, __temp_201$0xe81630
Optimizing: sub __temp_183$0xe81630, __temp_183$0xe81630, 0x8:i8
Optimizing: sti __temp_183$0xe81630, 0x0:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_203$0xeb8fb0, __temp_204$0xeb8fb0
Optimizing: br __temp_202$0xeb8fb0
Optimizing: __temp_204$0xeb8fb0:
Optimizing: asm "exit:ad"
Optimizing: __temp_202$0xeb8fb0:
Optimizing: mov i$0xeb8fb0, 0x0:i8
Optimizing: __temp_205$0xeb8fb0:
Optimizing: clt __temp_208$0xeb8fb0, i$0xeb8fb0, num_tasks$0xcfc020
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_208$0xeb8fb0, __temp_207$0xeb8fb0
Optimized: ble num_tasks$0xcfc020, i$0xeb8fb0, __temp_207$0xeb8fb0
Optimizing: nop
Optimizing: mul __temp_210$0xeba890, i$0xeb8fb0, 0x200:i8
Optimizing: ldelem __temp_211$0xeba890, task_status$0xcfc020, __temp_210$0xeba890
Optimizing: cne __temp_212$0xeba890, __temp_211$0xeba890, 0x1:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_212$0xeba890, __temp_213$0xeba890
Optimized: bne __temp_211$0xeba890, 0x1:i8, __temp_213$0xeba890
Optimizing: nop
Optimizing: br __temp_209$0xeba890
Optimizing: __temp_213$0xeba890:
Optimizing: asm "exit:a"
Optimizing: __temp_209$0xeba890:
Optimizing: __temp_206$0xeb8fb0:
Optimizing: add __temp_214$0xeb8fb0, i$0xeb8fb0, 0x1:i8
Optimizing: mov i$0xeb8fb0, __temp_214$0xeb8fb0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xeb8fb0, i$0xeb8fb0, 0x1:i8
Optimized: nop
Optimizing: br __temp_205$0xeb8fb0
Optimizing: __temp_207$0xeb8fb0:
Optimizing: add __temp_215$0xeb8fb0, iter$0xcfc020, 0x1:i8
Optimizing: mov iter$0xcfc020, __temp_215$0xeb8fb0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add iter$0xcfc020, iter$0xcfc020, 0x1:i8
Optimized: nop
Optimizing: ceq __temp_217$0xeb8fb0, iter$0xcfc020, 0x1F:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_217$0xeb8fb0, __temp_218$0xeb8fb0
Optimized: beq iter$0xcfc020, 0x1F:i8, __temp_218$0xeb8fb0
Optimizing: nop
Optimizing: br __temp_216$0xeb8fb0
Optimizing: __temp_218$0xeb8fb0:
Optimizing: call output_char$0xcfc020, <missing>, 0x52:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x68:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6D:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x78:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_q$0xcfc020, <missing>, 0x1E:i8
Optimizing: call output_char$0xcfc020, <missing>, 0x2E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: call output_char$0xcfc020, <missing>, 0x54:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6D:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x75:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: lda __temp_220$0xebc1e0, begin_time_sec$0xcfc020
Optimizing: lda __temp_221$0xebc1e0, begin_time_nsec$0xcfc020
Optimizing: call print_time_diff_and_update$0xcfc020, __temp_219$0xebc1e0, __temp_220$0xebc1e0, __temp_221$0xebc1e0
Optimizing: mov i$0xeb8fb0, __temp_219$0xebc1e0
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x2E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x3:msq, 0x200001010:msq"
Optimizing: lda __temp_225$0xebc1e0, vertices_cnt$0xcfc020
Optimizing: mov __temp_226$0xebc1e0, 0x8:i
Optimizing: sti 0x200001018:i, __temp_225$0xebc1e0
Optimizing: sti 0x200001020:i, __temp_226$0xebc1e0
Optimizing: lda __temp_227$0xebc1e0, vertices$0xcfc020
Optimizing: mov __temp_228$0xebc1e0, 0x8:i
Optimizing: sti 0x200001028:i, __temp_227$0xebc1e0
Optimizing: sti 0x200001030:i, __temp_228$0xebc1e0
Optimizing: mul __temp_231$0xebc1e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_232$0xebc1e0, __temp_231$0xebc1e0, 0x5:i8
Optimizing: mul __temp_233$0xebc1e0, __temp_232$0xebc1e0, 0x3:i8
Optimizing: ldelema __temp_229$0xebc1e0, vertices$0xcfc020, 0x0:i8
Optimizing: sub __temp_230$0xebc1e0, __temp_233$0xebc1e0, 0x0:i8
Optimizing: mul __temp_230$0xebc1e0, 0x8:i, __temp_230$0xebc1e0
Optimizing: sti 0x200001038:i, __temp_229$0xebc1e0
Optimizing: sti 0x200001040:i, __temp_230$0xebc1e0
Optimizing: asm "mov $0x0:msq, 0x200001048:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001050:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001058:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001060:msq"
Optimizing: asm "mov $0x200001048:msq, 0x200001068:msq"
Optimizing: asm "mov $0x200001050:msq, 0x200001070:msq"
Optimizing: asm "newr 0x200001058, 0x200001060, 0x200001068, 0x200001070"
Optimizing: ldi __temp_222$0xebc1e0, 0x100000400:i
Optimizing: ldi __temp_223$0xebc1e0, 0x100000408:i
Optimizing: add __temp_224$0xebc1e0, __temp_222$0xebc1e0, __temp_223$0xebc1e0
Optimizing: lda __temp_234$0xebc1e0, topk_task$0xcfc020
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, __temp_234$0xebc1e0
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, 0x8:i8
Optimizing: sub __temp_235$0xebc1e0, iter$0xcfc020, 0x1:i8
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, __temp_235$0xebc1e0
Optimizing: asm "exit:cd"
Optimizing: __temp_216$0xeb8fb0:
Optimizing: call create_new_iter_task$0xcfc020, <missing>
Optimized: Deleted 5 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_203$0xeb8fb0, __temp_204$0xeb8fb0
Optimizing: br __temp_202$0xeb8fb0
Optimizing: __temp_204$0xeb8fb0:
Optimizing: asm "exit:ad"
Optimizing: __temp_202$0xeb8fb0:
Optimizing: mov i$0xeb8fb0, 0x0:i8
Optimizing: __temp_205$0xeb8fb0:
Optimizing: ble num_tasks$0xcfc020, i$0xeb8fb0, __temp_207$0xeb8fb0
Optimizing: mul __temp_210$0xeba890, i$0xeb8fb0, 0x200:i8
Optimizing: ldelem __temp_211$0xeba890, task_status$0xcfc020, __temp_210$0xeba890
Optimizing: bne __temp_211$0xeba890, 0x1:i8, __temp_213$0xeba890
Optimizing: br __temp_209$0xeba890
Optimizing: __temp_213$0xeba890:
Optimizing: asm "exit:a"
Optimizing: __temp_209$0xeba890:
Optimizing: __temp_206$0xeb8fb0:
Optimizing: add i$0xeb8fb0, i$0xeb8fb0, 0x1:i8
Optimizing: br __temp_205$0xeb8fb0
Optimizing: __temp_207$0xeb8fb0:
Optimizing: add iter$0xcfc020, iter$0xcfc020, 0x1:i8
Optimizing: beq iter$0xcfc020, 0x1F:i8, __temp_218$0xeb8fb0
Optimizing: br __temp_216$0xeb8fb0
Optimizing: __temp_218$0xeb8fb0:
Optimizing: call output_char$0xcfc020, <missing>, 0x52:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x68:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6D:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x61:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x78:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_q$0xcfc020, <missing>, 0x1E:i8
Optimizing: call output_char$0xcfc020, <missing>, 0x2E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: call output_char$0xcfc020, <missing>, 0x54:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6D:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x75:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: lda __temp_220$0xebc1e0, begin_time_sec$0xcfc020
Optimizing: lda __temp_221$0xebc1e0, begin_time_nsec$0xcfc020
Optimizing: call print_time_diff_and_update$0xcfc020, __temp_219$0xebc1e0, __temp_220$0xebc1e0, __temp_221$0xebc1e0
Optimizing: mov i$0xeb8fb0, __temp_219$0xebc1e0
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x64:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x2E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x3:msq, 0x200001010:msq"
Optimizing: lda __temp_225$0xebc1e0, vertices_cnt$0xcfc020
Optimizing: mov __temp_226$0xebc1e0, 0x8:i
Optimizing: sti 0x200001018:i, __temp_225$0xebc1e0
Optimizing: sti 0x200001020:i, __temp_226$0xebc1e0
Optimizing: lda __temp_227$0xebc1e0, vertices$0xcfc020
Optimizing: mov __temp_228$0xebc1e0, 0x8:i
Optimizing: sti 0x200001028:i, __temp_227$0xebc1e0
Optimizing: sti 0x200001030:i, __temp_228$0xebc1e0
Optimizing: mul __temp_231$0xebc1e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_232$0xebc1e0, __temp_231$0xebc1e0, 0x5:i8
Optimizing: mul __temp_233$0xebc1e0, __temp_232$0xebc1e0, 0x3:i8
Optimizing: ldelema __temp_229$0xebc1e0, vertices$0xcfc020, 0x0:i8
Optimizing: sub __temp_230$0xebc1e0, __temp_233$0xebc1e0, 0x0:i8
Optimizing: mul __temp_230$0xebc1e0, 0x8:i, __temp_230$0xebc1e0
Optimizing: sti 0x200001038:i, __temp_229$0xebc1e0
Optimizing: sti 0x200001040:i, __temp_230$0xebc1e0
Optimizing: asm "mov $0x0:msq, 0x200001048:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001050:msq"
Optimizing: asm "mov $0x200001000:msq, 0x200001058:msq"
Optimizing: asm "mov $0x200001010:msq, 0x200001060:msq"
Optimizing: asm "mov $0x200001048:msq, 0x200001068:msq"
Optimizing: asm "mov $0x200001050:msq, 0x200001070:msq"
Optimizing: asm "newr 0x200001058, 0x200001060, 0x200001068, 0x200001070"
Optimizing: ldi __temp_222$0xebc1e0, 0x100000400:i
Optimizing: ldi __temp_223$0xebc1e0, 0x100000408:i
Optimizing: add __temp_224$0xebc1e0, __temp_222$0xebc1e0, __temp_223$0xebc1e0
Optimizing: lda __temp_234$0xebc1e0, topk_task$0xcfc020
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, __temp_234$0xebc1e0
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, 0x8:i8
Optimizing: sub __temp_235$0xebc1e0, iter$0xcfc020, 0x1:i8
Optimizing: sub __temp_224$0xebc1e0, __temp_224$0xebc1e0, 0x8:i8
Optimizing: sti __temp_224$0xebc1e0, __temp_235$0xebc1e0
Optimizing: asm "exit:cd"
Optimizing: __temp_216$0xeb8fb0:
Optimizing: call create_new_iter_task$0xcfc020, <missing>
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: lda __temp_237$0xf2b610, v_end$0xf2b610
Optimizing: call get_vertices_range$0xcfc020, <missing>, id$0xf2b3f0, __temp_236$0xf2b610, __temp_237$0xf2b610
Optimizing: lda __temp_238$0xf2b610, n_begin$0xf2b610
Optimizing: lda __temp_239$0xf2b610, n_end$0xf2b610
Optimizing: call get_in_neighbors_range$0xcfc020, <missing>, id$0xf2b3f0, __temp_238$0xf2b610, __temp_239$0xf2b610
Optimizing: mov pre_changed$0xf2b610, 0x205200000:i
Optimizing: mov cur_changed$0xf2b610, 0x205700000:i
Optimizing: mul __temp_241$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_242$0xf2b610, __temp_241$0xf2b610, 0x5:i8
Optimizing: mul __temp_243$0xf2b610, __temp_242$0xf2b610, 0x8:i8
Optimizing: add __temp_244$0xf2b610, 0x200200000:i8, __temp_243$0xf2b610
Optimizing: mul __temp_245$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_246$0xf2b610, __temp_245$0xf2b610, 0x5:i8
Optimizing: mul __temp_247$0xf2b610, __temp_246$0xf2b610, 0x8:i8
Optimizing: add __temp_248$0xf2b610, __temp_244$0xf2b610, __temp_247$0xf2b610
Optimizing: mul __temp_249$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_250$0xf2b610, __temp_249$0xf2b610, 0x5:i8
Optimizing: mul __temp_251$0xf2b610, __temp_250$0xf2b610, 0x1:i8
Optimizing: add __temp_252$0xf2b610, __temp_248$0xf2b610, __temp_251$0xf2b610
Optimizing: mul __temp_253$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_254$0xf2b610, __temp_253$0xf2b610, 0x5:i8
Optimizing: mul __temp_255$0xf2b610, 0x1:i8, __temp_254$0xf2b610
Optimizing: mul __temp_256$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_257$0xf2b610, __temp_256$0xf2b610, 0x5:i8
Optimizing: mul __temp_258$0xf2b610, __temp_257$0xf2b610, 0x8:i8
Optimizing: add __temp_259$0xf2b610, 0x200200000:i8, __temp_258$0xf2b610
Optimizing: mul __temp_260$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_261$0xf2b610, __temp_260$0xf2b610, 0x5:i8
Optimizing: mul __temp_262$0xf2b610, __temp_261$0xf2b610, 0x8:i8
Optimizing: add __temp_263$0xf2b610, __temp_259$0xf2b610, __temp_262$0xf2b610
Optimizing: call pc_get$0xcfc020, __temp_240$0xf2b610, iter$0xcfc020, __temp_252$0xf2b610, __temp_255$0xf2b610, __temp_263$0xf2b610
Optimizing: mov pre_pr$0xf2b610, 0x200200000:i
Optimizing: mov cur_pr$0xf2b610, 0x202A00000:i
Optimizing: mul __temp_265$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_266$0xf2b610, __temp_265$0xf2b610, 0x5:i8
Optimizing: mul __temp_267$0xf2b610, __temp_266$0xf2b610, 0x8:i8
Optimizing: add __temp_268$0xf2b610, 0x200200000:i8, __temp_267$0xf2b610
Optimizing: mul __temp_269$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_270$0xf2b610, __temp_269$0xf2b610, 0x5:i8
Optimizing: mul __temp_271$0xf2b610, 0x8:i8, __temp_270$0xf2b610
Optimizing: call pc_get$0xcfc020, __temp_264$0xf2b610, iter$0xcfc020, __temp_268$0xf2b610, __temp_271$0xf2b610, 0x200200000:i8
Optimizing: mov v$0xf2b610, 0x400000008:i
Optimizing: mov n$0xf2b610, 0x407800008:i
Optimizing: ldi __temp_273$0xf2b610, 0x400000000:i
Optimizing: cne __temp_274$0xf2b610, __temp_273$0xf2b610, 0x8829EFF20:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_274$0xf2b610, __temp_275$0xf2b610
Optimized: bne __temp_273$0xf2b610, 0x8829EFF20:i8, __temp_275$0xf2b610
Optimizing: nop
Optimizing: br __temp_272$0xf2b610
Optimizing: __temp_275$0xf2b610:
Optimizing: mul __temp_277$0xf3c770, v_begin$0xf2b610, 0x3:i8
Optimizing: ldelema __temp_276$0xf3c770, vertices$0xcfc020, __temp_277$0xf3c770
Optimizing: sub __temp_278$0xf3c770, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: add __temp_279$0xf3c770, __temp_278$0xf3c770, 0x1:i8
Optimizing: mul __temp_280$0xf3c770, __temp_279$0xf3c770, 0x3:i8
Optimizing: mul __temp_281$0xf3c770, 0x8:i8, __temp_280$0xf3c770
Optimizing: mul __temp_283$0xf3c770, v_begin$0xf2b610, 0x3:i8
Optimizing: ldelema __temp_282$0xf3c770, v$0xf2b610, __temp_283$0xf3c770
Optimizing: call memcpy$0xcfc020, <missing>, __temp_276$0xf3c770, __temp_281$0xf3c770, __temp_282$0xf3c770
Optimizing: ldelema __temp_284$0xf3c770, in_neighbors$0xcfc020, n_begin$0xf2b610
Optimizing: sub __temp_285$0xf3c770, n_end$0xf2b610, n_begin$0xf2b610
Optimizing: add __temp_286$0xf3c770, __temp_285$0xf3c770, 0x1:i8
Optimizing: mul __temp_287$0xf3c770, 0x8:i8, __temp_286$0xf3c770
Optimizing: ldelema __temp_288$0xf3c770, n$0xf2b610, n_begin$0xf2b610
Optimizing: call memcpy$0xcfc020, <missing>, __temp_284$0xf3c770, __temp_287$0xf3c770, __temp_288$0xf3c770
Optimizing: sti 0x400000000:i, 0x8829EFF20:i8
Optimizing: __temp_272$0xf2b610:
Optimizing: ceq __temp_290$0xf2b610, iter$0xcfc020, 0x0:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_290$0xf2b610, __temp_291$0xf2b610
Optimized: beq iter$0xcfc020, 0x0:i8, __temp_291$0xf2b610
Optimizing: nop
Optimizing: mov i$0xf2b610, v_begin$0xf2b610
Optimizing: __temp_292$0xf42d90:
Optimizing: clt __temp_295$0xf42d90, i$0xf2b610, v_end$0xf2b610
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_295$0xf42d90, __temp_294$0xf42d90
Optimized: ble v_end$0xf2b610, i$0xf2b610, __temp_294$0xf42d90
Optimizing: nop
Optimizing: mov changed$0xf2b610, 0x6E:i1
Optimizing: mov new_pr$0xf2b610, 0.000000:r8
Optimizing: mul __temp_296$0xf43b10, 0x3:i8, i$0xf2b610
Optimizing: add __temp_297$0xf43b10, __temp_296$0xf43b10, 0x2:i8
Optimizing: ldelem __temp_298$0xf43b10, v$0xf2b610, __temp_297$0xf43b10
Optimizing: mov n_begin$0xf2b610, __temp_298$0xf43b10
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem n_begin$0xf2b610, v$0xf2b610, __temp_297$0xf43b10
Optimized: nop
Optimizing: mul __temp_299$0xf43b10, 0x3:i8, i$0xf2b610
Optimizing: add __temp_300$0xf43b10, __temp_299$0xf43b10, 0x0:i8
Optimizing: ldelem __temp_301$0xf43b10, v$0xf2b610, __temp_300$0xf43b10
Optimizing: add __temp_302$0xf43b10, n_begin$0xf2b610, __temp_301$0xf43b10
Optimizing: mov n_end$0xf2b610, __temp_302$0xf43b10
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add n_end$0xf2b610, n_begin$0xf2b610, __temp_301$0xf43b10
Optimized: nop
Optimizing: mov j$0xf2b610, n_begin$0xf2b610
Optimizing: __temp_303$0xf43b10:
Optimizing: clt __temp_306$0xf43b10, j$0xf2b610, n_end$0xf2b610
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_306$0xf43b10, __temp_305$0xf43b10
Optimized: ble n_end$0xf2b610, j$0xf2b610, __temp_305$0xf43b10
Optimizing: nop
Optimizing: ldelem __temp_307$0xf466c0, n$0xf2b610, j$0xf2b610
Optimizing: mov nbr$0xf2b610, __temp_307$0xf466c0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: ldelem nbr$0xf2b610, n$0xf2b610, j$0xf2b610
Optimized: nop
Optimizing: ldelem __temp_309$0xf466c0, pre_changed$0xf2b610, nbr$0xf2b610
Optimizing: ceq __temp_310$0xf466c0, __temp_309$0xf466c0, 0x79:i1
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_310$0xf466c0, __temp_311$0xf466c0
Optimized: beq __temp_309$0xf466c0, 0x79:i1, __temp_311$0xf466c0
Optimizing: nop
Optimizing: br __temp_308$0xf466c0
Optimizing: __temp_311$0xf466c0:
Optimizing: mov changed$0xf2b610, 0x79:i1
Optimizing: ldelema __temp_312$0xf473f0, pre_pr$0xf2b610, nbr$0xf2b610
Optimizing: ldi __temp_313$0xf473f0, __temp_312$0xf473f0
Optimizing: add __temp_314$0xf473f0, new_pr$0xf2b610, __temp_313$0xf473f0
Optimizing: mov new_pr$0xf2b610, __temp_314$0xf473f0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add new_pr$0xf2b610, new_pr$0xf2b610, __temp_313$0xf473f0
Optimized: nop
Optimizing: __temp_308$0xf466c0:
Optimizing: __temp_304$0xf43b10:
Optimizing: add __temp_315$0xf43b10, j$0xf2b610, 0x1:i8
Optimizing: mov j$0xf2b610, __temp_315$0xf43b10
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add j$0xf2b610, j$0xf2b610, 0x1:i8
Optimized: nop
Optimizing: br __temp_303$0xf43b10
Optimizing: __temp_305$0xf43b10:
Optimizing: ceq __temp_317$0xf43b10, changed$0xf2b610, 0x79:i1
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_317$0xf43b10, __temp_318$0xf43b10
Optimized: beq changed$0xf2b610, 0x79:i1, __temp_318$0xf43b10
Optimizing: nop
Optimizing: br __temp_316$0xf43b10
Optimizing: __temp_318$0xf43b10:
Optimizing: mul __temp_319$0xf48980, new_pr$0xf2b610, 0.850000:r8
Optimizing: mov new_pr$0xf2b610, __temp_319$0xf48980
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: mul new_pr$0xf2b610, new_pr$0xf2b610, 0.850000:r8
Optimized: nop
Optimizing: add __temp_320$0xf48980, new_pr$0xf2b610, 0.150000:r8
Optimizing: mov new_pr$0xf2b610, __temp_320$0xf48980
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add new_pr$0xf2b610, new_pr$0xf2b610, 0.150000:r8
Optimized: nop
Optimizing: mul __temp_322$0xf48980, 0x3:i8, i$0xf2b610
Optimizing: add __temp_323$0xf48980, __temp_322$0xf48980, 0x1:i8
Optimizing: ldelema __temp_321$0xf48980, v$0xf2b610, __temp_323$0xf48980
Optimizing: ldi __temp_324$0xf48980, __temp_321$0xf48980
Optimizing: mul __temp_325$0xf48980, new_pr$0xf2b610, __temp_324$0xf48980
Optimizing: mov new_pr$0xf2b610, __temp_325$0xf48980
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: mul new_pr$0xf2b610, new_pr$0xf2b610, __temp_324$0xf48980
Optimized: nop
Optimizing: ldelema __temp_326$0xf48980, cur_pr$0xf2b610, i$0xf2b610
Optimizing: sti __temp_326$0xf48980, new_pr$0xf2b610
Optimizing: __temp_316$0xf43b10:
Optimizing: stelem cur_changed$0xf2b610, i$0xf2b610, changed$0xf2b610
Optimizing: __temp_293$0xf42d90:
Optimizing: add __temp_327$0xf42d90, i$0xf2b610, 0x1:i8
Optimizing: mov i$0xf2b610, __temp_327$0xf42d90
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xf2b610, i$0xf2b610, 0x1:i8
Optimized: nop
Optimizing: br __temp_292$0xf42d90
Optimizing: __temp_294$0xf42d90:
Optimizing: br __temp_289$0xf2b610
Optimizing: __temp_291$0xf2b610:
Optimizing: mov i$0xf2b610, v_begin$0xf2b610
Optimizing: __temp_328$0xf401d0:
Optimizing: clt __temp_331$0xf401d0, i$0xf2b610, v_end$0xf2b610
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_331$0xf401d0, __temp_330$0xf401d0
Optimized: ble v_end$0xf2b610, i$0xf2b610, __temp_330$0xf401d0
Optimizing: nop
Optimizing: mul __temp_333$0xf40f30, 0x3:i8, i$0xf2b610
Optimizing: add __temp_334$0xf40f30, __temp_333$0xf40f30, 0x1:i8
Optimizing: ldelema __temp_332$0xf40f30, v$0xf2b610, __temp_334$0xf40f30
Optimizing: ldi __temp_335$0xf40f30, __temp_332$0xf40f30
Optimizing: mul __temp_336$0xf40f30, 0.150000:r8, __temp_335$0xf40f30
Optimizing: mov new_pr$0xf2b610, __temp_336$0xf40f30
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: mul new_pr$0xf2b610, 0.150000:r8, __temp_335$0xf40f30
Optimized: nop
Optimizing: stelem cur_changed$0xf2b610, i$0xf2b610, 0x79:i1
Optimizing: ldelema __temp_337$0xf40f30, cur_pr$0xf2b610, i$0xf2b610
Optimizing: sti __temp_337$0xf40f30, new_pr$0xf2b610
Optimizing: __temp_329$0xf401d0:
Optimizing: add __temp_338$0xf401d0, i$0xf2b610, 0x1:i8
Optimizing: mov i$0xf2b610, __temp_338$0xf401d0
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xf2b610, i$0xf2b610, 0x1:i8
Optimized: nop
Optimizing: br __temp_328$0xf401d0
Optimizing: __temp_330$0xf401d0:
Optimizing: __temp_289$0xf2b610:
Optimizing: add __temp_340$0xf2b610, iter$0xcfc020, 0x1:i8
Optimizing: ldelema __temp_341$0xf2b610, cur_changed$0xf2b610, v_begin$0xf2b610
Optimizing: sub __temp_342$0xf2b610, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: mul __temp_343$0xf2b610, 0x1:i8, __temp_342$0xf2b610
Optimizing: call pc_write$0xcfc020, __temp_339$0xf2b610, __temp_340$0xf2b610, __temp_341$0xf2b610, __temp_343$0xf2b610
Optimizing: add __temp_345$0xf2b610, iter$0xcfc020, 0x1:i8
Optimizing: ldelema __temp_346$0xf2b610, cur_pr$0xf2b610, v_begin$0xf2b610
Optimizing: sub __temp_347$0xf2b610, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: mul __temp_348$0xf2b610, 0x8:i8, __temp_347$0xf2b610
Optimizing: call pc_write$0xcfc020, __temp_344$0xf2b610, __temp_345$0xf2b610, __temp_346$0xf2b610, __temp_348$0xf2b610
Optimizing: mul __temp_349$0xf2b610, id$0xf2b3f0, 0x200:i8
Optimizing: stelem task_status$0xcfc020, __temp_349$0xf2b610, 0x1:i8
Optimized: Deleted 18 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: lda __temp_237$0xf2b610, v_end$0xf2b610
Optimizing: call get_vertices_range$0xcfc020, <missing>, id$0xf2b3f0, __temp_236$0xf2b610, __temp_237$0xf2b610
Optimizing: lda __temp_238$0xf2b610, n_begin$0xf2b610
Optimizing: lda __temp_239$0xf2b610, n_end$0xf2b610
Optimizing: call get_in_neighbors_range$0xcfc020, <missing>, id$0xf2b3f0, __temp_238$0xf2b610, __temp_239$0xf2b610
Optimizing: mov pre_changed$0xf2b610, 0x205200000:i
Optimizing: mov cur_changed$0xf2b610, 0x205700000:i
Optimizing: mul __temp_241$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_242$0xf2b610, __temp_241$0xf2b610, 0x5:i8
Optimizing: mul __temp_243$0xf2b610, __temp_242$0xf2b610, 0x8:i8
Optimizing: add __temp_244$0xf2b610, 0x200200000:i8, __temp_243$0xf2b610
Optimizing: mul __temp_245$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_246$0xf2b610, __temp_245$0xf2b610, 0x5:i8
Optimizing: mul __temp_247$0xf2b610, __temp_246$0xf2b610, 0x8:i8
Optimizing: add __temp_248$0xf2b610, __temp_244$0xf2b610, __temp_247$0xf2b610
Optimizing: mul __temp_249$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_250$0xf2b610, __temp_249$0xf2b610, 0x5:i8
Optimizing: mul __temp_251$0xf2b610, __temp_250$0xf2b610, 0x1:i8
Optimizing: add __temp_252$0xf2b610, __temp_248$0xf2b610, __temp_251$0xf2b610
Optimizing: mul __temp_253$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_254$0xf2b610, __temp_253$0xf2b610, 0x5:i8
Optimizing: mul __temp_255$0xf2b610, 0x1:i8, __temp_254$0xf2b610
Optimizing: mul __temp_256$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_257$0xf2b610, __temp_256$0xf2b610, 0x5:i8
Optimizing: mul __temp_258$0xf2b610, __temp_257$0xf2b610, 0x8:i8
Optimizing: add __temp_259$0xf2b610, 0x200200000:i8, __temp_258$0xf2b610
Optimizing: mul __temp_260$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_261$0xf2b610, __temp_260$0xf2b610, 0x5:i8
Optimizing: mul __temp_262$0xf2b610, __temp_261$0xf2b610, 0x8:i8
Optimizing: add __temp_263$0xf2b610, __temp_259$0xf2b610, __temp_262$0xf2b610
Optimizing: call pc_get$0xcfc020, __temp_240$0xf2b610, iter$0xcfc020, __temp_252$0xf2b610, __temp_255$0xf2b610, __temp_263$0xf2b610
Optimizing: mov pre_pr$0xf2b610, 0x200200000:i
Optimizing: mov cur_pr$0xf2b610, 0x202A00000:i
Optimizing: mul __temp_265$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_266$0xf2b610, __temp_265$0xf2b610, 0x5:i8
Optimizing: mul __temp_267$0xf2b610, __temp_266$0xf2b610, 0x8:i8
Optimizing: add __temp_268$0xf2b610, 0x200200000:i8, __temp_267$0xf2b610
Optimizing: mul __temp_269$0xf2b610, 0x400:i8, 0x400:i8
Optimizing: mul __temp_270$0xf2b610, __temp_269$0xf2b610, 0x5:i8
Optimizing: mul __temp_271$0xf2b610, 0x8:i8, __temp_270$0xf2b610
Optimizing: call pc_get$0xcfc020, __temp_264$0xf2b610, iter$0xcfc020, __temp_268$0xf2b610, __temp_271$0xf2b610, 0x200200000:i8
Optimizing: mov v$0xf2b610, 0x400000008:i
Optimizing: mov n$0xf2b610, 0x407800008:i
Optimizing: ldi __temp_273$0xf2b610, 0x400000000:i
Optimizing: bne __temp_273$0xf2b610, 0x8829EFF20:i8, __temp_275$0xf2b610
Optimizing: br __temp_272$0xf2b610
Optimizing: __temp_275$0xf2b610:
Optimizing: mul __temp_277$0xf3c770, v_begin$0xf2b610, 0x3:i8
Optimizing: ldelema __temp_276$0xf3c770, vertices$0xcfc020, __temp_277$0xf3c770
Optimizing: sub __temp_278$0xf3c770, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: add __temp_279$0xf3c770, __temp_278$0xf3c770, 0x1:i8
Optimizing: mul __temp_280$0xf3c770, __temp_279$0xf3c770, 0x3:i8
Optimizing: mul __temp_281$0xf3c770, 0x8:i8, __temp_280$0xf3c770
Optimizing: mul __temp_283$0xf3c770, v_begin$0xf2b610, 0x3:i8
Optimizing: ldelema __temp_282$0xf3c770, v$0xf2b610, __temp_283$0xf3c770
Optimizing: call memcpy$0xcfc020, <missing>, __temp_276$0xf3c770, __temp_281$0xf3c770, __temp_282$0xf3c770
Optimizing: ldelema __temp_284$0xf3c770, in_neighbors$0xcfc020, n_begin$0xf2b610
Optimizing: sub __temp_285$0xf3c770, n_end$0xf2b610, n_begin$0xf2b610
Optimizing: add __temp_286$0xf3c770, __temp_285$0xf3c770, 0x1:i8
Optimizing: mul __temp_287$0xf3c770, 0x8:i8, __temp_286$0xf3c770
Optimizing: ldelema __temp_288$0xf3c770, n$0xf2b610, n_begin$0xf2b610
Optimizing: call memcpy$0xcfc020, <missing>, __temp_284$0xf3c770, __temp_287$0xf3c770, __temp_288$0xf3c770
Optimizing: sti 0x400000000:i, 0x8829EFF20:i8
Optimizing: __temp_272$0xf2b610:
Optimizing: beq iter$0xcfc020, 0x0:i8, __temp_291$0xf2b610
Optimizing: mov i$0xf2b610, v_begin$0xf2b610
Optimizing: __temp_292$0xf42d90:
Optimizing: ble v_end$0xf2b610, i$0xf2b610, __temp_294$0xf42d90
Optimizing: mov changed$0xf2b610, 0x6E:i1
Optimizing: mov new_pr$0xf2b610, 0.000000:r8
Optimizing: mul __temp_296$0xf43b10, 0x3:i8, i$0xf2b610
Optimizing: add __temp_297$0xf43b10, __temp_296$0xf43b10, 0x2:i8
Optimizing: ldelem n_begin$0xf2b610, v$0xf2b610, __temp_297$0xf43b10
Optimizing: mul __temp_299$0xf43b10, 0x3:i8, i$0xf2b610
Optimizing: add __temp_300$0xf43b10, __temp_299$0xf43b10, 0x0:i8
Optimizing: ldelem __temp_301$0xf43b10, v$0xf2b610, __temp_300$0xf43b10
Optimizing: add n_end$0xf2b610, n_begin$0xf2b610, __temp_301$0xf43b10
Optimizing: mov j$0xf2b610, n_begin$0xf2b610
Sadly not okay to optimize.
Optimizing: __temp_303$0xf43b10:
Optimizing: ble n_end$0xf2b610, j$0xf2b610, __temp_305$0xf43b10
Optimizing: ldelem nbr$0xf2b610, n$0xf2b610, j$0xf2b610
Optimizing: ldelem __temp_309$0xf466c0, pre_changed$0xf2b610, nbr$0xf2b610
Optimizing: beq __temp_309$0xf466c0, 0x79:i1, __temp_311$0xf466c0
Optimizing: br __temp_308$0xf466c0
Optimizing: __temp_311$0xf466c0:
Optimizing: mov changed$0xf2b610, 0x79:i1
Optimizing: ldelema __temp_312$0xf473f0, pre_pr$0xf2b610, nbr$0xf2b610
Optimizing: ldi __temp_313$0xf473f0, __temp_312$0xf473f0
Optimizing: add new_pr$0xf2b610, new_pr$0xf2b610, __temp_313$0xf473f0
Optimizing: __temp_308$0xf466c0:
Optimizing: __temp_304$0xf43b10:
Optimizing: add j$0xf2b610, j$0xf2b610, 0x1:i8
Optimizing: br __temp_303$0xf43b10
Optimizing: __temp_305$0xf43b10:
Optimizing: beq changed$0xf2b610, 0x79:i1, __temp_318$0xf43b10
Optimizing: br __temp_316$0xf43b10
Optimizing: __temp_318$0xf43b10:
Optimizing: mul new_pr$0xf2b610, new_pr$0xf2b610, 0.850000:r8
Optimizing: add new_pr$0xf2b610, new_pr$0xf2b610, 0.150000:r8
Optimizing: mul __temp_322$0xf48980, 0x3:i8, i$0xf2b610
Optimizing: add __temp_323$0xf48980, __temp_322$0xf48980, 0x1:i8
Optimizing: ldelema __temp_321$0xf48980, v$0xf2b610, __temp_323$0xf48980
Optimizing: ldi __temp_324$0xf48980, __temp_321$0xf48980
Optimizing: mul new_pr$0xf2b610, new_pr$0xf2b610, __temp_324$0xf48980
Optimizing: ldelema __temp_326$0xf48980, cur_pr$0xf2b610, i$0xf2b610
Optimizing: sti __temp_326$0xf48980, new_pr$0xf2b610
Optimizing: __temp_316$0xf43b10:
Optimizing: stelem cur_changed$0xf2b610, i$0xf2b610, changed$0xf2b610
Optimizing: __temp_293$0xf42d90:
Optimizing: add i$0xf2b610, i$0xf2b610, 0x1:i8
Optimizing: br __temp_292$0xf42d90
Optimizing: __temp_294$0xf42d90:
Optimizing: br __temp_289$0xf2b610
Optimizing: __temp_291$0xf2b610:
Optimizing: mov i$0xf2b610, v_begin$0xf2b610
Optimizing: __temp_328$0xf401d0:
Optimizing: ble v_end$0xf2b610, i$0xf2b610, __temp_330$0xf401d0
Optimizing: mul __temp_333$0xf40f30, 0x3:i8, i$0xf2b610
Optimizing: add __temp_334$0xf40f30, __temp_333$0xf40f30, 0x1:i8
Optimizing: ldelema __temp_332$0xf40f30, v$0xf2b610, __temp_334$0xf40f30
Optimizing: ldi __temp_335$0xf40f30, __temp_332$0xf40f30
Optimizing: mul new_pr$0xf2b610, 0.150000:r8, __temp_335$0xf40f30
Optimizing: stelem cur_changed$0xf2b610, i$0xf2b610, 0x79:i1
Optimizing: ldelema __temp_337$0xf40f30, cur_pr$0xf2b610, i$0xf2b610
Optimizing: sti __temp_337$0xf40f30, new_pr$0xf2b610
Optimizing: __temp_329$0xf401d0:
Optimizing: add i$0xf2b610, i$0xf2b610, 0x1:i8
Optimizing: br __temp_328$0xf401d0
Optimizing: __temp_330$0xf401d0:
Optimizing: __temp_289$0xf2b610:
Optimizing: add __temp_340$0xf2b610, iter$0xcfc020, 0x1:i8
Optimizing: ldelema __temp_341$0xf2b610, cur_changed$0xf2b610, v_begin$0xf2b610
Optimizing: sub __temp_342$0xf2b610, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: mul __temp_343$0xf2b610, 0x1:i8, __temp_342$0xf2b610
Optimizing: call pc_write$0xcfc020, __temp_339$0xf2b610, __temp_340$0xf2b610, __temp_341$0xf2b610, __temp_343$0xf2b610
Optimizing: add __temp_345$0xf2b610, iter$0xcfc020, 0x1:i8
Optimizing: ldelema __temp_346$0xf2b610, cur_pr$0xf2b610, v_begin$0xf2b610
Optimizing: sub __temp_347$0xf2b610, v_end$0xf2b610, v_begin$0xf2b610
Optimizing: mul __temp_348$0xf2b610, 0x8:i8, __temp_347$0xf2b610
Optimizing: call pc_write$0xcfc020, __temp_344$0xf2b610, __temp_345$0xf2b610, __temp_346$0xf2b610, __temp_348$0xf2b610
Optimizing: mul __temp_349$0xf2b610, id$0xf2b3f0, 0x200:i8
Optimizing: stelem task_status$0xcfc020, __temp_349$0xf2b610, 0x1:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_351$0xf78630, __temp_352$0xf78630
Optimizing: br __temp_350$0xf78630
Optimizing: __temp_352$0xf78630:
Optimizing: call pc_sync$0xcfc020, __temp_353$0xf7a2f0, iter$0xcfc020
Optimizing: __temp_350$0xf78630:
Optimizing: mov i$0xf78630, 0x0:i8
Optimizing: __temp_354$0xf78630:
Optimizing: clt __temp_357$0xf78630, i$0xf78630, num_tasks$0xcfc020
Ah ha! I got you! bz after clt -->Good to optimize.
Optimizing: bz __temp_357$0xf78630, __temp_356$0xf78630
Optimized: ble num_tasks$0xcfc020, i$0xf78630, __temp_356$0xf78630
Optimizing: nop
Optimizing: lda __temp_358$0xf7b790, v_begin$0xf78630
Optimizing: lda __temp_359$0xf7b790, v_end$0xf78630
Optimizing: call get_vertices_range$0xcfc020, <missing>, i$0xf78630, __temp_358$0xf7b790, __temp_359$0xf7b790
Optimizing: lda __temp_360$0xf7b790, n_begin$0xf78630
Optimizing: lda __temp_361$0xf7b790, n_end$0xf78630
Optimizing: call get_in_neighbors_range$0xcfc020, <missing>, i$0xf78630, __temp_360$0xf7b790, __temp_361$0xf7b790
Optimizing: add __temp_362$0xf7b790, i$0xf78630, 0x1:i8
Optimizing: mul __temp_363$0xf7b790, 0x400000000000:i8, __temp_362$0xf7b790
Optimizing: mov space$0xf78630, __temp_363$0xf7b790
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: mul space$0xf78630, 0x400000000000:i8, __temp_362$0xf7b790
Optimized: nop
Optimizing: ceq __temp_365$0xf7b790, iter$0xcfc020, 0x0:i8
Ah ha! I got you! bnz after clt -->Good to optimize.
Optimizing: bnz __temp_365$0xf7b790, __temp_366$0xf7b790
Optimized: beq iter$0xcfc020, 0x0:i8, __temp_366$0xf7b790
Optimizing: nop
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x7:msq, 0x200001010:msq"
Optimizing: lda __temp_370$0xf81720, iter$0xcfc020
Optimizing: mov __temp_371$0xf81720, 0x8:i
Optimizing: sti 0x200001018:i, __temp_370$0xf81720
Optimizing: sti 0x200001020:i, __temp_371$0xf81720
Optimizing: lda __temp_372$0xf81720, num_tasks$0xcfc020
Optimizing: mov __temp_373$0xf81720, 0x8:i
Optimizing: sti 0x200001028:i, __temp_372$0xf81720
Optimizing: sti 0x200001030:i, __temp_373$0xf81720
Optimizing: lda __temp_374$0xf81720, vertices_cnt$0xcfc020
Optimizing: mov __temp_375$0xf81720, 0x8:i
Optimizing: sti 0x200001038:i, __temp_374$0xf81720
Optimizing: sti 0x200001040:i, __temp_375$0xf81720
Optimizing: lda __temp_376$0xf81720, vertices$0xcfc020
Optimizing: mov __temp_377$0xf81720, 0x8:i
Optimizing: sti 0x200001048:i, __temp_376$0xf81720
Optimizing: sti 0x200001050:i, __temp_377$0xf81720
Optimizing: lda __temp_378$0xf81720, in_neighbors$0xcfc020
Optimizing: mov __temp_379$0xf81720, 0x8:i
Optimizing: sti 0x200001058:i, __temp_378$0xf81720
Optimizing: sti 0x200001060:i, __temp_379$0xf81720
Optimizing: mul __temp_382$0xf81720, i$0xf78630, 0x200:i8
Optimizing: mul __temp_383$0xf81720, i$0xf78630, 0x200:i8
Optimizing: add __temp_384$0xf81720, __temp_383$0xf81720, 0x1:i8
Optimizing: ldelema __temp_380$0xf81720, task_status$0xcfc020, __temp_382$0xf81720
Optimizing: sub __temp_381$0xf81720, __temp_384$0xf81720, __temp_382$0xf81720
Optimizing: mul __temp_381$0xf81720, 0x8:i, __temp_381$0xf81720
Optimizing: sti 0x200001068:i, __temp_380$0xf81720
Optimizing: sti 0x200001070:i, __temp_381$0xf81720
Optimizing: mul __temp_387$0xf81720, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_385$0xf81720, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_386$0xf81720, __temp_387$0xf81720, 0x0:i8
Optimizing: mul __temp_386$0xf81720, 0x8:i, __temp_386$0xf81720
Optimizing: sti 0x200001078:i, __temp_385$0xf81720
Optimizing: sti 0x200001080:i, __temp_386$0xf81720
Optimizing: asm "mov $0x0:msq, 0x200001088:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001090:msq"
Optimizing: mov __temp_388$0xf81720, space$0xf78630
Optimizing: sti 0x200001098:i, __temp_388$0xf81720
Optimizing: asm "mov $0x200001000:msq, 0x2000010a0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010a8:msq"
Optimizing: asm "mov $0x200001088:msq, 0x2000010b0:msq"
Optimizing: asm "mov $0x200001090:msq, 0x2000010b8:msq"
Optimizing: asm "mov $0x200001098:msq, 0x2000010c0:msq"
Optimizing: asm "spawnx 0x2000010a0, 0x2000010a8, 0x2000010b0, 0x2000010b8, 0x2000010c0"
Optimizing: ldi __temp_367$0xf81720, 0x100000400:i
Optimizing: ldi __temp_368$0xf81720, 0x100000408:i
Optimizing: add __temp_369$0xf81720, __temp_367$0xf81720, __temp_368$0xf81720
Optimizing: lda __temp_389$0xf81720, calc_task$0xcfc020
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, __temp_389$0xf81720
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, 0x8:i8
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, i$0xf78630
Optimizing: br __temp_364$0xf7b790
Optimizing: __temp_366$0xf7b790:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x9:msq, 0x200001010:msq"
Optimizing: lda __temp_393$0xf7d5e0, iter$0xcfc020
Optimizing: mov __temp_394$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001018:i, __temp_393$0xf7d5e0
Optimizing: sti 0x200001020:i, __temp_394$0xf7d5e0
Optimizing: lda __temp_395$0xf7d5e0, num_tasks$0xcfc020
Optimizing: mov __temp_396$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001028:i, __temp_395$0xf7d5e0
Optimizing: sti 0x200001030:i, __temp_396$0xf7d5e0
Optimizing: lda __temp_397$0xf7d5e0, vertices_cnt$0xcfc020
Optimizing: mov __temp_398$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001038:i, __temp_397$0xf7d5e0
Optimizing: sti 0x200001040:i, __temp_398$0xf7d5e0
Optimizing: lda __temp_399$0xf7d5e0, vertices$0xcfc020
Optimizing: mov __temp_400$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001048:i, __temp_399$0xf7d5e0
Optimizing: sti 0x200001050:i, __temp_400$0xf7d5e0
Optimizing: lda __temp_401$0xf7d5e0, in_neighbors$0xcfc020
Optimizing: mov __temp_402$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001058:i, __temp_401$0xf7d5e0
Optimizing: sti 0x200001060:i, __temp_402$0xf7d5e0
Optimizing: mul __temp_405$0xf7d5e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_406$0xf7d5e0, __temp_405$0xf7d5e0, 0x46:i8
Optimizing: mul __temp_407$0xf7d5e0, __temp_406$0xf7d5e0, 0x2:i8
Optimizing: div __temp_408$0xf7d5e0, __temp_407$0xf7d5e0, 0x2:i8
Optimizing: add __temp_409$0xf7d5e0, __temp_408$0xf7d5e0, 0x1:i8
Optimizing: ldelema __temp_403$0xf7d5e0, in_neighbors$0xcfc020, 0x0:i8
Optimizing: sub __temp_404$0xf7d5e0, __temp_409$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_404$0xf7d5e0, 0x8:i, __temp_404$0xf7d5e0
Optimizing: sti 0x200001068:i, __temp_403$0xf7d5e0
Optimizing: sti 0x200001070:i, __temp_404$0xf7d5e0
Optimizing: mul __temp_412$0xf7d5e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_413$0xf7d5e0, __temp_412$0xf7d5e0, 0x5:i8
Optimizing: mul __temp_414$0xf7d5e0, __temp_413$0xf7d5e0, 0x3:i8
Optimizing: ldelema __temp_410$0xf7d5e0, vertices$0xcfc020, 0x0:i8
Optimizing: sub __temp_411$0xf7d5e0, __temp_414$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_411$0xf7d5e0, 0x8:i, __temp_411$0xf7d5e0
Optimizing: sti 0x200001078:i, __temp_410$0xf7d5e0
Optimizing: sti 0x200001080:i, __temp_411$0xf7d5e0
Optimizing: mul __temp_417$0xf7d5e0, i$0xf78630, 0x200:i8
Optimizing: mul __temp_418$0xf7d5e0, i$0xf78630, 0x200:i8
Optimizing: add __temp_419$0xf7d5e0, __temp_418$0xf7d5e0, 0x1:i8
Optimizing: ldelema __temp_415$0xf7d5e0, task_status$0xcfc020, __temp_417$0xf7d5e0
Optimizing: sub __temp_416$0xf7d5e0, __temp_419$0xf7d5e0, __temp_417$0xf7d5e0
Optimizing: mul __temp_416$0xf7d5e0, 0x8:i, __temp_416$0xf7d5e0
Optimizing: sti 0x200001088:i, __temp_415$0xf7d5e0
Optimizing: sti 0x200001090:i, __temp_416$0xf7d5e0
Optimizing: mul __temp_422$0xf7d5e0, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_420$0xf7d5e0, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_421$0xf7d5e0, __temp_422$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_421$0xf7d5e0, 0x8:i, __temp_421$0xf7d5e0
Optimizing: sti 0x200001098:i, __temp_420$0xf7d5e0
Optimizing: sti 0x2000010A0:i, __temp_421$0xf7d5e0
Optimizing: asm "mov $0x0:msq, 0x2000010a8:msq"
Optimizing: asm "mov $__newr0:msq, 0x2000010b0:msq"
Optimizing: mov __temp_423$0xf7d5e0, space$0xf78630
Optimizing: sti 0x2000010B8:i, __temp_423$0xf7d5e0
Optimizing: asm "mov $0x200001000:msq, 0x2000010c0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010c8:msq"
Optimizing: asm "mov $0x2000010a8:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x2000010b0:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e0:msq"
Optimizing: asm "spawnx 0x2000010c0, 0x2000010c8, 0x2000010d0, 0x2000010d8, 0x2000010e0"
Optimizing: ldi __temp_390$0xf7d5e0, 0x100000400:i
Optimizing: ldi __temp_391$0xf7d5e0, 0x100000408:i
Optimizing: add __temp_392$0xf7d5e0, __temp_390$0xf7d5e0, __temp_391$0xf7d5e0
Optimizing: lda __temp_424$0xf7d5e0, calc_task$0xcfc020
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, __temp_424$0xf7d5e0
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, i$0xf78630
Optimizing: __temp_364$0xf7b790:
Optimizing: mul __temp_425$0xf7b790, i$0xf78630, 0x200:i8
Optimizing: stelem task_status$0xcfc020, __temp_425$0xf7b790, 0x0:i8
Optimizing: __temp_355$0xf78630:
Optimizing: add __temp_426$0xf78630, i$0xf78630, 0x1:i8
Optimizing: mov i$0xf78630, __temp_426$0xf78630
Ah ha! I got you! mov after some instructions -->Good to optimize.
Optimized: add i$0xf78630, i$0xf78630, 0x1:i8
Optimized: nop
Optimizing: br __temp_354$0xf78630
Optimizing: __temp_356$0xf78630:
Optimizing: mov space$0xf78630, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x7:msq, 0x200001010:msq"
Optimizing: lda __temp_430$0xf78630, iter$0xcfc020
Optimizing: mov __temp_431$0xf78630, 0x8:i
Optimizing: sti 0x200001018:i, __temp_430$0xf78630
Optimizing: sti 0x200001020:i, __temp_431$0xf78630
Optimizing: lda __temp_432$0xf78630, num_tasks$0xcfc020
Optimizing: mov __temp_433$0xf78630, 0x8:i
Optimizing: sti 0x200001028:i, __temp_432$0xf78630
Optimizing: sti 0x200001030:i, __temp_433$0xf78630
Optimizing: lda __temp_434$0xf78630, vertices_cnt$0xcfc020
Optimizing: mov __temp_435$0xf78630, 0x8:i
Optimizing: sti 0x200001038:i, __temp_434$0xf78630
Optimizing: sti 0x200001040:i, __temp_435$0xf78630
Optimizing: lda __temp_436$0xf78630, vertices$0xcfc020
Optimizing: mov __temp_437$0xf78630, 0x8:i
Optimizing: sti 0x200001048:i, __temp_436$0xf78630
Optimizing: sti 0x200001050:i, __temp_437$0xf78630
Optimizing: lda __temp_438$0xf78630, in_neighbors$0xcfc020
Optimizing: mov __temp_439$0xf78630, 0x8:i
Optimizing: sti 0x200001058:i, __temp_438$0xf78630
Optimizing: sti 0x200001060:i, __temp_439$0xf78630
Optimizing: lda __temp_440$0xf78630, begin_time_sec$0xcfc020
Optimizing: mov __temp_441$0xf78630, 0x8:i
Optimizing: sti 0x200001068:i, __temp_440$0xf78630
Optimizing: sti 0x200001070:i, __temp_441$0xf78630
Optimizing: lda __temp_442$0xf78630, begin_time_nsec$0xcfc020
Optimizing: mov __temp_443$0xf78630, 0x8:i
Optimizing: sti 0x200001078:i, __temp_442$0xf78630
Optimizing: sti 0x200001080:i, __temp_443$0xf78630
Optimizing: asm "mov $0x1:msq, 0x200001088:msq"
Optimizing: mul __temp_446$0xf78630, num_tasks$0xcfc020, 0x200:i8
Optimizing: ldelema __temp_444$0xf78630, task_status$0xcfc020, 0x0:i8
Optimizing: sub __temp_445$0xf78630, __temp_446$0xf78630, 0x0:i8
Optimizing: mul __temp_445$0xf78630, 0x8:i, __temp_445$0xf78630
Optimizing: sti 0x200001090:i, __temp_444$0xf78630
Optimizing: sti 0x200001098:i, __temp_445$0xf78630
Optimizing: asm "mov $__newr0:msq, 0x2000010a0:msq"
Optimizing: mov __temp_447$0xf78630, space$0xf78630
Optimizing: sti 0x2000010A8:i, __temp_447$0xf78630
Optimizing: asm "mov $0x200001000:msq, 0x2000010b0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010b8:msq"
Optimizing: asm "mov $0x200001088:msq, 0x2000010c0:msq"
Optimizing: asm "mov $0x2000010a0:msq, 0x2000010c8:msq"
Optimizing: asm "mov $0x2000010a8:msq, 0x2000010d0:msq"
Optimizing: asm "spawnx 0x2000010b0, 0x2000010b8, 0x2000010c0, 0x2000010c8, 0x2000010d0"
Optimizing: ldi __temp_427$0xf78630, 0x100000400:i
Optimizing: ldi __temp_428$0xf78630, 0x100000408:i
Optimizing: add __temp_429$0xf78630, __temp_427$0xf78630, __temp_428$0xf78630
Optimizing: lda __temp_448$0xf78630, barrier_task$0xcfc020
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, __temp_448$0xf78630
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, 0x8:i8
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, iter$0xcfc020
Optimized: Deleted 4 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: bnz __temp_351$0xf78630, __temp_352$0xf78630
Optimizing: br __temp_350$0xf78630
Optimizing: __temp_352$0xf78630:
Optimizing: call pc_sync$0xcfc020, __temp_353$0xf7a2f0, iter$0xcfc020
Optimizing: __temp_350$0xf78630:
Optimizing: mov i$0xf78630, 0x0:i8
Optimizing: __temp_354$0xf78630:
Optimizing: ble num_tasks$0xcfc020, i$0xf78630, __temp_356$0xf78630
Optimizing: lda __temp_358$0xf7b790, v_begin$0xf78630
Optimizing: lda __temp_359$0xf7b790, v_end$0xf78630
Optimizing: call get_vertices_range$0xcfc020, <missing>, i$0xf78630, __temp_358$0xf7b790, __temp_359$0xf7b790
Optimizing: lda __temp_360$0xf7b790, n_begin$0xf78630
Optimizing: lda __temp_361$0xf7b790, n_end$0xf78630
Optimizing: call get_in_neighbors_range$0xcfc020, <missing>, i$0xf78630, __temp_360$0xf7b790, __temp_361$0xf7b790
Optimizing: add __temp_362$0xf7b790, i$0xf78630, 0x1:i8
Optimizing: mul space$0xf78630, 0x400000000000:i8, __temp_362$0xf7b790
Optimizing: beq iter$0xcfc020, 0x0:i8, __temp_366$0xf7b790
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x7:msq, 0x200001010:msq"
Optimizing: lda __temp_370$0xf81720, iter$0xcfc020
Optimizing: mov __temp_371$0xf81720, 0x8:i
Optimizing: sti 0x200001018:i, __temp_370$0xf81720
Optimizing: sti 0x200001020:i, __temp_371$0xf81720
Optimizing: lda __temp_372$0xf81720, num_tasks$0xcfc020
Optimizing: mov __temp_373$0xf81720, 0x8:i
Optimizing: sti 0x200001028:i, __temp_372$0xf81720
Optimizing: sti 0x200001030:i, __temp_373$0xf81720
Optimizing: lda __temp_374$0xf81720, vertices_cnt$0xcfc020
Optimizing: mov __temp_375$0xf81720, 0x8:i
Optimizing: sti 0x200001038:i, __temp_374$0xf81720
Optimizing: sti 0x200001040:i, __temp_375$0xf81720
Optimizing: lda __temp_376$0xf81720, vertices$0xcfc020
Optimizing: mov __temp_377$0xf81720, 0x8:i
Optimizing: sti 0x200001048:i, __temp_376$0xf81720
Optimizing: sti 0x200001050:i, __temp_377$0xf81720
Optimizing: lda __temp_378$0xf81720, in_neighbors$0xcfc020
Optimizing: mov __temp_379$0xf81720, 0x8:i
Optimizing: sti 0x200001058:i, __temp_378$0xf81720
Optimizing: sti 0x200001060:i, __temp_379$0xf81720
Optimizing: mul __temp_382$0xf81720, i$0xf78630, 0x200:i8
Optimizing: mul __temp_383$0xf81720, i$0xf78630, 0x200:i8
Optimizing: add __temp_384$0xf81720, __temp_383$0xf81720, 0x1:i8
Optimizing: ldelema __temp_380$0xf81720, task_status$0xcfc020, __temp_382$0xf81720
Optimizing: sub __temp_381$0xf81720, __temp_384$0xf81720, __temp_382$0xf81720
Optimizing: mul __temp_381$0xf81720, 0x8:i, __temp_381$0xf81720
Optimizing: sti 0x200001068:i, __temp_380$0xf81720
Optimizing: sti 0x200001070:i, __temp_381$0xf81720
Optimizing: mul __temp_387$0xf81720, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_385$0xf81720, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_386$0xf81720, __temp_387$0xf81720, 0x0:i8
Optimizing: mul __temp_386$0xf81720, 0x8:i, __temp_386$0xf81720
Optimizing: sti 0x200001078:i, __temp_385$0xf81720
Optimizing: sti 0x200001080:i, __temp_386$0xf81720
Optimizing: asm "mov $0x0:msq, 0x200001088:msq"
Optimizing: asm "mov $__newr0:msq, 0x200001090:msq"
Optimizing: mov __temp_388$0xf81720, space$0xf78630
Optimizing: sti 0x200001098:i, __temp_388$0xf81720
Optimizing: asm "mov $0x200001000:msq, 0x2000010a0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010a8:msq"
Optimizing: asm "mov $0x200001088:msq, 0x2000010b0:msq"
Optimizing: asm "mov $0x200001090:msq, 0x2000010b8:msq"
Optimizing: asm "mov $0x200001098:msq, 0x2000010c0:msq"
Optimizing: asm "spawnx 0x2000010a0, 0x2000010a8, 0x2000010b0, 0x2000010b8, 0x2000010c0"
Optimizing: ldi __temp_367$0xf81720, 0x100000400:i
Optimizing: ldi __temp_368$0xf81720, 0x100000408:i
Optimizing: add __temp_369$0xf81720, __temp_367$0xf81720, __temp_368$0xf81720
Optimizing: lda __temp_389$0xf81720, calc_task$0xcfc020
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, __temp_389$0xf81720
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, 0x8:i8
Optimizing: sub __temp_369$0xf81720, __temp_369$0xf81720, 0x8:i8
Optimizing: sti __temp_369$0xf81720, i$0xf78630
Optimizing: br __temp_364$0xf7b790
Optimizing: __temp_366$0xf7b790:
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x9:msq, 0x200001010:msq"
Optimizing: lda __temp_393$0xf7d5e0, iter$0xcfc020
Optimizing: mov __temp_394$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001018:i, __temp_393$0xf7d5e0
Optimizing: sti 0x200001020:i, __temp_394$0xf7d5e0
Optimizing: lda __temp_395$0xf7d5e0, num_tasks$0xcfc020
Optimizing: mov __temp_396$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001028:i, __temp_395$0xf7d5e0
Optimizing: sti 0x200001030:i, __temp_396$0xf7d5e0
Optimizing: lda __temp_397$0xf7d5e0, vertices_cnt$0xcfc020
Optimizing: mov __temp_398$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001038:i, __temp_397$0xf7d5e0
Optimizing: sti 0x200001040:i, __temp_398$0xf7d5e0
Optimizing: lda __temp_399$0xf7d5e0, vertices$0xcfc020
Optimizing: mov __temp_400$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001048:i, __temp_399$0xf7d5e0
Optimizing: sti 0x200001050:i, __temp_400$0xf7d5e0
Optimizing: lda __temp_401$0xf7d5e0, in_neighbors$0xcfc020
Optimizing: mov __temp_402$0xf7d5e0, 0x8:i
Optimizing: sti 0x200001058:i, __temp_401$0xf7d5e0
Optimizing: sti 0x200001060:i, __temp_402$0xf7d5e0
Optimizing: mul __temp_405$0xf7d5e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_406$0xf7d5e0, __temp_405$0xf7d5e0, 0x46:i8
Optimizing: mul __temp_407$0xf7d5e0, __temp_406$0xf7d5e0, 0x2:i8
Optimizing: div __temp_408$0xf7d5e0, __temp_407$0xf7d5e0, 0x2:i8
Optimizing: add __temp_409$0xf7d5e0, __temp_408$0xf7d5e0, 0x1:i8
Optimizing: ldelema __temp_403$0xf7d5e0, in_neighbors$0xcfc020, 0x0:i8
Optimizing: sub __temp_404$0xf7d5e0, __temp_409$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_404$0xf7d5e0, 0x8:i, __temp_404$0xf7d5e0
Optimizing: sti 0x200001068:i, __temp_403$0xf7d5e0
Optimizing: sti 0x200001070:i, __temp_404$0xf7d5e0
Optimizing: mul __temp_412$0xf7d5e0, 0x400:i8, 0x400:i8
Optimizing: mul __temp_413$0xf7d5e0, __temp_412$0xf7d5e0, 0x5:i8
Optimizing: mul __temp_414$0xf7d5e0, __temp_413$0xf7d5e0, 0x3:i8
Optimizing: ldelema __temp_410$0xf7d5e0, vertices$0xcfc020, 0x0:i8
Optimizing: sub __temp_411$0xf7d5e0, __temp_414$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_411$0xf7d5e0, 0x8:i, __temp_411$0xf7d5e0
Optimizing: sti 0x200001078:i, __temp_410$0xf7d5e0
Optimizing: sti 0x200001080:i, __temp_411$0xf7d5e0
Optimizing: mul __temp_417$0xf7d5e0, i$0xf78630, 0x200:i8
Optimizing: mul __temp_418$0xf7d5e0, i$0xf78630, 0x200:i8
Optimizing: add __temp_419$0xf7d5e0, __temp_418$0xf7d5e0, 0x1:i8
Optimizing: ldelema __temp_415$0xf7d5e0, task_status$0xcfc020, __temp_417$0xf7d5e0
Optimizing: sub __temp_416$0xf7d5e0, __temp_419$0xf7d5e0, __temp_417$0xf7d5e0
Optimizing: mul __temp_416$0xf7d5e0, 0x8:i, __temp_416$0xf7d5e0
Optimizing: sti 0x200001088:i, __temp_415$0xf7d5e0
Optimizing: sti 0x200001090:i, __temp_416$0xf7d5e0
Optimizing: mul __temp_422$0xf7d5e0, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_420$0xf7d5e0, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_421$0xf7d5e0, __temp_422$0xf7d5e0, 0x0:i8
Optimizing: mul __temp_421$0xf7d5e0, 0x8:i, __temp_421$0xf7d5e0
Optimizing: sti 0x200001098:i, __temp_420$0xf7d5e0
Optimizing: sti 0x2000010A0:i, __temp_421$0xf7d5e0
Optimizing: asm "mov $0x0:msq, 0x2000010a8:msq"
Optimizing: asm "mov $__newr0:msq, 0x2000010b0:msq"
Optimizing: mov __temp_423$0xf7d5e0, space$0xf78630
Optimizing: sti 0x2000010B8:i, __temp_423$0xf7d5e0
Optimizing: asm "mov $0x200001000:msq, 0x2000010c0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010c8:msq"
Optimizing: asm "mov $0x2000010a8:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x2000010b0:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e0:msq"
Optimizing: asm "spawnx 0x2000010c0, 0x2000010c8, 0x2000010d0, 0x2000010d8, 0x2000010e0"
Optimizing: ldi __temp_390$0xf7d5e0, 0x100000400:i
Optimizing: ldi __temp_391$0xf7d5e0, 0x100000408:i
Optimizing: add __temp_392$0xf7d5e0, __temp_390$0xf7d5e0, __temp_391$0xf7d5e0
Optimizing: lda __temp_424$0xf7d5e0, calc_task$0xcfc020
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, __temp_424$0xf7d5e0
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sub __temp_392$0xf7d5e0, __temp_392$0xf7d5e0, 0x8:i8
Optimizing: sti __temp_392$0xf7d5e0, i$0xf78630
Optimizing: __temp_364$0xf7b790:
Optimizing: mul __temp_425$0xf7b790, i$0xf78630, 0x200:i8
Optimizing: stelem task_status$0xcfc020, __temp_425$0xf7b790, 0x0:i8
Optimizing: __temp_355$0xf78630:
Optimizing: add i$0xf78630, i$0xf78630, 0x1:i8
Optimizing: br __temp_354$0xf78630
Optimizing: __temp_356$0xf78630:
Optimizing: mov space$0xf78630, 0x0:i8
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0x7:msq, 0x200001010:msq"
Optimizing: lda __temp_430$0xf78630, iter$0xcfc020
Optimizing: mov __temp_431$0xf78630, 0x8:i
Optimizing: sti 0x200001018:i, __temp_430$0xf78630
Optimizing: sti 0x200001020:i, __temp_431$0xf78630
Optimizing: lda __temp_432$0xf78630, num_tasks$0xcfc020
Optimizing: mov __temp_433$0xf78630, 0x8:i
Optimizing: sti 0x200001028:i, __temp_432$0xf78630
Optimizing: sti 0x200001030:i, __temp_433$0xf78630
Optimizing: lda __temp_434$0xf78630, vertices_cnt$0xcfc020
Optimizing: mov __temp_435$0xf78630, 0x8:i
Optimizing: sti 0x200001038:i, __temp_434$0xf78630
Optimizing: sti 0x200001040:i, __temp_435$0xf78630
Optimizing: lda __temp_436$0xf78630, vertices$0xcfc020
Optimizing: mov __temp_437$0xf78630, 0x8:i
Optimizing: sti 0x200001048:i, __temp_436$0xf78630
Optimizing: sti 0x200001050:i, __temp_437$0xf78630
Optimizing: lda __temp_438$0xf78630, in_neighbors$0xcfc020
Optimizing: mov __temp_439$0xf78630, 0x8:i
Optimizing: sti 0x200001058:i, __temp_438$0xf78630
Optimizing: sti 0x200001060:i, __temp_439$0xf78630
Optimizing: lda __temp_440$0xf78630, begin_time_sec$0xcfc020
Optimizing: mov __temp_441$0xf78630, 0x8:i
Optimizing: sti 0x200001068:i, __temp_440$0xf78630
Optimizing: sti 0x200001070:i, __temp_441$0xf78630
Optimizing: lda __temp_442$0xf78630, begin_time_nsec$0xcfc020
Optimizing: mov __temp_443$0xf78630, 0x8:i
Optimizing: sti 0x200001078:i, __temp_442$0xf78630
Optimizing: sti 0x200001080:i, __temp_443$0xf78630
Optimizing: asm "mov $0x1:msq, 0x200001088:msq"
Optimizing: mul __temp_446$0xf78630, num_tasks$0xcfc020, 0x200:i8
Optimizing: ldelema __temp_444$0xf78630, task_status$0xcfc020, 0x0:i8
Optimizing: sub __temp_445$0xf78630, __temp_446$0xf78630, 0x0:i8
Optimizing: mul __temp_445$0xf78630, 0x8:i, __temp_445$0xf78630
Optimizing: sti 0x200001090:i, __temp_444$0xf78630
Optimizing: sti 0x200001098:i, __temp_445$0xf78630
Optimizing: asm "mov $__newr0:msq, 0x2000010a0:msq"
Optimizing: mov __temp_447$0xf78630, space$0xf78630
Optimizing: sti 0x2000010A8:i, __temp_447$0xf78630
Optimizing: asm "mov $0x200001000:msq, 0x2000010b0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010b8:msq"
Optimizing: asm "mov $0x200001088:msq, 0x2000010c0:msq"
Optimizing: asm "mov $0x2000010a0:msq, 0x2000010c8:msq"
Optimizing: asm "mov $0x2000010a8:msq, 0x2000010d0:msq"
Optimizing: asm "spawnx 0x2000010b0, 0x2000010b8, 0x2000010c0, 0x2000010c8, 0x2000010d0"
Optimizing: ldi __temp_427$0xf78630, 0x100000400:i
Optimizing: ldi __temp_428$0xf78630, 0x100000408:i
Optimizing: add __temp_429$0xf78630, __temp_427$0xf78630, __temp_428$0xf78630
Optimizing: lda __temp_448$0xf78630, barrier_task$0xcfc020
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, __temp_448$0xf78630
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, 0x8:i8
Optimizing: sub __temp_429$0xf78630, __temp_429$0xf78630, 0x8:i8
Optimizing: sti __temp_429$0xf78630, iter$0xcfc020
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: lda __temp_451$0xfb0f30, begin_time_nsec$0xcfc020
Optimizing: call gettime$0xcfc020, __temp_449$0xfb0f30, __temp_450$0xfb0f30, __temp_451$0xfb0f30
Optimizing: mov i$0xfb0f30, __temp_449$0xfb0f30
Optimizing: ldi __temp_452$0xfb0f30, 0x40846000000:i
Optimizing: mov vertices_cnt$0xcfc020, __temp_452$0xfb0f30
Ah ha! I got you! mov after conv instructions -->Good to optimize.
Optimized: ldi vertices_cnt$0xcfc020, 0x40846000000:i
Optimized: nop
Optimizing: call output_char$0xcfc020, <missing>, 0x76:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x5F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, vertices_cnt$0xcfc020
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: mov vertices$0xcfc020, 0x40846000008:i
Optimizing: mov in_neighbors$0xcfc020, 0x4084D800000:i
Optimizing: mov iter$0xcfc020, 0x0:i8
Optimizing: mov num_tasks$0xcfc020, 0x1E:i8
Optimizing: call build_partitions$0xcfc020, <missing>
Optimizing: call create_new_iter_task$0xcfc020, <missing>
Optimized: Deleted 1 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: lda __temp_451$0xfb0f30, begin_time_nsec$0xcfc020
Optimizing: call gettime$0xcfc020, __temp_449$0xfb0f30, __temp_450$0xfb0f30, __temp_451$0xfb0f30
Optimizing: mov i$0xfb0f30, __temp_449$0xfb0f30
Optimizing: ldi vertices_cnt$0xcfc020, 0x40846000000:i
Optimizing: call output_char$0xcfc020, <missing>, 0x76:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x72:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x69:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x65:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x73:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x5F:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x63:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x6E:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x74:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x3A:i1
Optimizing: call output_char$0xcfc020, <missing>, 0x20:i1
Optimizing: call output_q$0xcfc020, <missing>, vertices_cnt$0xcfc020
Optimizing: call output_char$0xcfc020, <missing>, 0xA:i8
Optimizing: mov vertices$0xcfc020, 0x40846000008:i
Optimizing: mov in_neighbors$0xcfc020, 0x4084D800000:i
Optimizing: mov iter$0xcfc020, 0x0:i8
Optimizing: mov num_tasks$0xcfc020, 0x1E:i8
Optimizing: call build_partitions$0xcfc020, <missing>
Optimizing: call create_new_iter_task$0xcfc020, <missing>
Optimized: Deleted 0 Nops.
Optimizing: function END
Optimizing: function START
Optimizing: asm "mov $0x0:msq, 0x200001000:msq"
Optimizing: asm "mov $0x0:msq, 0x200001008:msq"
Optimizing: asm "mov $0xa:msq, 0x200001010:msq"
Optimizing: lda __temp_456$0xfdbc90, iter$0xcfc020
Optimizing: mov __temp_457$0xfdbc90, 0x8:i
Optimizing: sti 0x200001018:i, __temp_456$0xfdbc90
Optimizing: sti 0x200001020:i, __temp_457$0xfdbc90
Optimizing: lda __temp_458$0xfdbc90, num_tasks$0xcfc020
Optimizing: mov __temp_459$0xfdbc90, 0x8:i
Optimizing: sti 0x200001028:i, __temp_458$0xfdbc90
Optimizing: sti 0x200001030:i, __temp_459$0xfdbc90
Optimizing: lda __temp_460$0xfdbc90, vertices_cnt$0xcfc020
Optimizing: mov __temp_461$0xfdbc90, 0x8:i
Optimizing: sti 0x200001038:i, __temp_460$0xfdbc90
Optimizing: sti 0x200001040:i, __temp_461$0xfdbc90
Optimizing: lda __temp_462$0xfdbc90, vertices$0xcfc020
Optimizing: mov __temp_463$0xfdbc90, 0x8:i
Optimizing: sti 0x200001048:i, __temp_462$0xfdbc90
Optimizing: sti 0x200001050:i, __temp_463$0xfdbc90
Optimizing: lda __temp_464$0xfdbc90, in_neighbors$0xcfc020
Optimizing: mov __temp_465$0xfdbc90, 0x8:i
Optimizing: sti 0x200001058:i, __temp_464$0xfdbc90
Optimizing: sti 0x200001060:i, __temp_465$0xfdbc90
Optimizing: lda __temp_466$0xfdbc90, begin_time_sec$0xcfc020
Optimizing: mov __temp_467$0xfdbc90, 0x8:i
Optimizing: sti 0x200001068:i, __temp_466$0xfdbc90
Optimizing: sti 0x200001070:i, __temp_467$0xfdbc90
Optimizing: lda __temp_468$0xfdbc90, begin_time_nsec$0xcfc020
Optimizing: mov __temp_469$0xfdbc90, 0x8:i
Optimizing: sti 0x200001078:i, __temp_468$0xfdbc90
Optimizing: sti 0x200001080:i, __temp_469$0xfdbc90
Optimizing: add __temp_472$0xfdbc90, 0x800000000:i8, 0x20000000000:i8
Optimizing: sub __temp_473$0xfdbc90, __temp_472$0xfdbc90, 0x1:i8
Optimizing: add __temp_474$0xfdbc90, __temp_473$0xfdbc90, 0x1:i8
Optimizing: add __temp_475$0xfdbc90, __temp_474$0xfdbc90, 0x20000000000:i8
Optimizing: sub __temp_476$0xfdbc90, __temp_475$0xfdbc90, 0x1:i8
Optimizing: add __temp_477$0xfdbc90, __temp_476$0xfdbc90, 0x1:i8
Optimizing: mul __temp_478$0xfdbc90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_479$0xfdbc90, __temp_478$0xfdbc90, 0x46:i8
Optimizing: mul __temp_480$0xfdbc90, __temp_479$0xfdbc90, 0x2:i8
Optimizing: mul __temp_481$0xfdbc90, __temp_480$0xfdbc90, 0x8:i8
Optimizing: add __temp_482$0xfdbc90, __temp_477$0xfdbc90, __temp_481$0xfdbc90
Optimizing: conv __temp_483$0xfdbc90, __temp_482$0xfdbc90
Optimizing: mul __temp_484$0xfdbc90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_485$0xfdbc90, __temp_484$0xfdbc90, 0x5:i8
Optimizing: mul __temp_486$0xfdbc90, __temp_485$0xfdbc90, 0x3:i8
Optimizing: ldelema __temp_470$0xfdbc90, __temp_483$0xfdbc90, 0x0:i8
Optimizing: sub __temp_471$0xfdbc90, __temp_486$0xfdbc90, 0x0:i8
Optimizing: mul __temp_471$0xfdbc90, 0x8:i, __temp_471$0xfdbc90
Optimizing: sti 0x200001088:i, __temp_470$0xfdbc90
Optimizing: sti 0x200001090:i, __temp_471$0xfdbc90
Optimizing: add __temp_489$0xfdbc90, 0x800000000:i8, 0x20000000000:i8
Optimizing: sub __temp_490$0xfdbc90, __temp_489$0xfdbc90, 0x1:i8
Optimizing: add __temp_491$0xfdbc90, __temp_490$0xfdbc90, 0x1:i8
Optimizing: add __temp_492$0xfdbc90, __temp_491$0xfdbc90, 0x20000000000:i8
Optimizing: sub __temp_493$0xfdbc90, __temp_492$0xfdbc90, 0x1:i8
Optimizing: add __temp_494$0xfdbc90, __temp_493$0xfdbc90, 0x1:i8
Optimizing: mul __temp_495$0xfdbc90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_496$0xfdbc90, __temp_495$0xfdbc90, 0x46:i8
Optimizing: mul __temp_497$0xfdbc90, __temp_496$0xfdbc90, 0x2:i8
Optimizing: mul __temp_498$0xfdbc90, __temp_497$0xfdbc90, 0x8:i8
Optimizing: add __temp_499$0xfdbc90, __temp_494$0xfdbc90, __temp_498$0xfdbc90
Optimizing: mul __temp_500$0xfdbc90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_501$0xfdbc90, __temp_500$0xfdbc90, 0x5:i8
Optimizing: mul __temp_502$0xfdbc90, __temp_501$0xfdbc90, 0x3:i8
Optimizing: mul __temp_503$0xfdbc90, __temp_502$0xfdbc90, 0x8:i8
Optimizing: add __temp_504$0xfdbc90, __temp_499$0xfdbc90, __temp_503$0xfdbc90
Optimizing: conv __temp_505$0xfdbc90, __temp_504$0xfdbc90
Optimizing: mul __temp_506$0xfdbc90, 0x400:i8, 0x400:i8
Optimizing: mul __temp_507$0xfdbc90, __temp_506$0xfdbc90, 0x46:i8
Optimizing: mul __temp_508$0xfdbc90, __temp_507$0xfdbc90, 0x2:i8
Optimizing: div __temp_509$0xfdbc90, __temp_508$0xfdbc90, 0x2:i8
Optimizing: add __temp_510$0xfdbc90, __temp_509$0xfdbc90, 0x1:i8
Optimizing: ldelema __temp_487$0xfdbc90, __temp_505$0xfdbc90, 0x0:i8
Optimizing: sub __temp_488$0xfdbc90, __temp_510$0xfdbc90, 0x0:i8
Optimizing: mul __temp_488$0xfdbc90, 0x8:i, __temp_488$0xfdbc90
Optimizing: sti 0x200001098:i, __temp_487$0xfdbc90
Optimizing: sti 0x2000010A0:i, __temp_488$0xfdbc90
Optimizing: mul __temp_513$0xfdbc90, 0x40:i8, 0x4:i8
Optimizing: ldelema __temp_511$0xfdbc90, partitions$0xcfc020, 0x0:i8
Optimizing: sub __temp_512$0xfdbc90, __temp_513$0xfdbc90, 0x0:i8
Optimizing: mul __temp_512$0xfdbc90, 0x8:i, __temp_512$0xfdbc90
Optimizing: sti 0x2000010A8:i, __temp_511$0xfdbc90
Optimizing: sti 0x2000010B0:i, __temp_512$0xfdbc90
Optimizing: asm "mov $0x0:msq, 0x2000010b8:msq"
Optimizing: asm "mov $__newr0:msq, 0x2000010c0:msq"
Optimizing: mov __temp_514$0xfdbc90, space$0xfdbc90
Optimizing: sti 0x2000010C8:i, __temp_514$0xfdbc90
Optimizing: asm "mov $0x200001000:msq, 0x2000010d0:msq"
Optimizing: asm "mov $0x200001010:msq, 0x2000010d8:msq"
Optimizing: asm "mov $0x2000010b8:msq, 0x2000010e0:msq"
Optimizing: asm "mov $0x2000010c0:msq, 0x2000010e8:msq"
Optimizing: asm "mov $0x2000010c8:msq, 0x2000010f0:msq"
Optimizing: asm "spawnx 0x2000010d0, 0x2000010d8, 0x2000010e0, 0x2000010e8, 0x2000010f0"
Optimizing: ldi __temp_453$0xfdbc90, 0x100000400:i
Optimizing: ldi __temp_454$0xfdbc90, 0x100000408:i
Optimizing: add __temp_455$0xfdbc90, __temp_453$0xfdbc90, __temp_454$0xfdbc90
Optimizing: lda __temp_515$0xfdbc90, init_task$0xcfc020
Optimizing: sub __temp_455$0xfdbc90, __temp_455$0xfdbc90, 0x8:i8
Optimizing: sti __temp_455$0xfdbc90, __temp_515$0xfdbc90
Optimizing: sub __temp_455$0xfdbc90, __temp_455$0xfdbc90, 0x8:i8
Optimizing: sti __temp_455$0xfdbc90, 0x0:i8
Optimized: Deleted 0 Nops.
Optimizing: function END
invoking "ld0 -lcrt -o pagerank-frompmem-sim-graphx.c0.bin strsplitted-pagerank-frompmem.o -g"
ld0 search paths:
/home/progman/workspace/d-thinker/libi0/libi0
----------
__memcmp_se with symbol == 0xffc770 on scope 0xee4458
__memcmp_se with symbol == 0x11416f0 on scope 0xee2538
__memcmp_se already inserted
----------
_get_from_sar_array with symbol == 0xffcbc0 on scope 0xee4458
_get_from_sar_array with symbol == 0x10a6b60 on scope 0xee2538
_get_from_sar_array already inserted
----------
_get_in_neighbors_range with symbol == 0xf3cac0 on scope 0xee4458
_get_in_neighbors_range already inserted
----------
_get_new_pa with symbol == 0xffce50 on scope 0xee4458
_get_new_pa with symbol == 0x10ba090 on scope 0xee2538
_get_new_pa already inserted
----------
_get_new_sar with symbol == 0xffd040 on scope 0xee4458
_get_new_sar with symbol == 0x1092f50 on scope 0xee2538
_get_new_sar already inserted
----------
_get_new_sar_ext with symbol == 0xffd370 on scope 0xee4458
_get_new_sar_ext with symbol == 0x1098ce0 on scope 0xee2538
_get_new_sar_ext already inserted
----------
_output_debug with symbol == 0xffd670 on scope 0xee4458
_output_debug with symbol == 0x107d9a0 on scope 0xee2538
_output_debug already inserted
----------
_syscall_malloc with symbol == 0xffd870 on scope 0xee4458
_syscall_malloc with symbol == 0x1078a50 on scope 0xee2538
_syscall_malloc already inserted
----------
_syscall_malloc_ext with symbol == 0xffdb10 on scope 0xee4458
_syscall_malloc_ext with symbol == 0x10829c0 on scope 0xee2538
_syscall_malloc_ext already inserted
----------
barrier_task with symbol == 0xf8eac0 on scope 0xee4458
barrier_task already inserted
----------
begin_time_nsec with symbol == 0xf82110 on scope 0xee4458
----------
begin_time_sec with symbol == 0xf81ba0 on scope 0xee4458
----------
build_partitions with symbol == 0xf67b40 on scope 0xee4458
build_partitions already inserted
----------
calc_task with symbol == 0xfbcbe0 on scope 0xee4458
calc_task already inserted
----------
create_new_iter_task with symbol == 0xf6d4c0 on scope 0xee4458
create_new_iter_task already inserted
----------
exp with symbol == 0xffe070 on scope 0xee4458
exp with symbol == 0x10de950 on scope 0xee2538
exp already inserted
----------
exp_remez13_05_05 with symbol == 0x12555d0 on scope 0xee2538
exp_remez13_05_05 already inserted
----------
get_in_neighbors_range with symbol == 0xf36440 on scope 0xee4458
get_in_neighbors_range already inserted
----------
get_my_task_id with symbol == 0xffe2e0 on scope 0xee4458
get_my_task_id with symbol == 0x1101510 on scope 0xee2538
get_my_task_id already inserted
----------
get_new_task_id with symbol == 0xffe410 on scope 0xee4458
get_new_task_id with symbol == 0x11023e0 on scope 0xee2538
get_new_task_id already inserted
----------
get_time_diff_and_update with symbol == 0xffe5e0 on scope 0xee4458
get_time_diff_and_update with symbol == 0x1253440 on scope 0xee2538
get_time_diff_and_update already inserted
----------
get_vertices_range with symbol == 0xf32460 on scope 0xee4458
get_vertices_range already inserted
----------
gettime with symbol == 0xfdd330 on scope 0xee4458
gettime with symbol == 0x114d780 on scope 0xee2538
gettime already inserted
----------
in_neighbors with symbol == 0xf6c000 on scope 0xee4458
----------
init_PR_var with symbol == 0xffe9d0 on scope 0xee4458
init_PR_var with symbol == 0x107fca0 on scope 0xee2538
init_PR_var already inserted
----------
init_task with symbol == 0xfe7a60 on scope 0xee4458
init_task already inserted
----------
input_char with symbol == 0xffeb90 on scope 0xee4458
input_char with symbol == 0x114fe20 on scope 0xee2538
input_char already inserted
----------
input_double with symbol == 0xffecf0 on scope 0xee4458
input_double with symbol == 0x11d6cd0 on scope 0xee2538
input_double already inserted
----------
input_double_after_dot with symbol == 0x11cffb0 on scope 0xee2538
----------
input_double_exit with symbol == 0x11d1880 on scope 0xee2538
----------
input_line with symbol == 0xffef10 on scope 0xee4458
input_line with symbol == 0x116f4f0 on scope 0xee2538
input_line already inserted
----------
input_line_exit with symbol == 0x116df20 on scope 0xee2538
----------
input_long with symbol == 0xfff280 on scope 0xee4458
input_long with symbol == 0x11872e0 on scope 0xee2538
input_long already inserted
----------
input_long_exit with symbol == 0x1185a40 on scope 0xee2538
----------
input_q with symbol == 0xfff4b0 on scope 0xee4458
input_q with symbol == 0x1165cc0 on scope 0xee2538
input_q already inserted
----------
input_q_exit with symbol == 0x1164c70 on scope 0xee2538
----------
ipow with symbol == 0xfff610 on scope 0xee4458
ipow with symbol == 0x10a2be0 on scope 0xee2538
ipow already inserted
----------
iter with symbol == 0xf6a5e0 on scope 0xee4458
----------
main with symbol == 0xffc630 on scope 0xee4458
main already inserted
----------
memcmp with symbol == 0xfff990 on scope 0xee4458
memcmp with symbol == 0x11466b0 on scope 0xee2538
memcmp already inserted
----------
memcpy with symbol == 0xf906d0 on scope 0xee4458
memcpy with symbol == 0x113ecb0 on scope 0xee2538
memcpy already inserted
----------
memset0 with symbol == 0xfffd70 on scope 0xee4458
memset0 with symbol == 0x1149f40 on scope 0xee2538
memset0 already inserted
----------
new_iter_task with symbol == 0xfdb5c0 on scope 0xee4458
new_iter_task already inserted
----------
num_tasks with symbol == 0xf66da0 on scope 0xee4458
----------
output_char with symbol == 0xf06a60 on scope 0xee4458
output_char with symbol == 0x1104ee0 on scope 0xee2538
output_char already inserted
----------
output_char_str with symbol == 0x1000130 on scope 0xee4458
output_char_str with symbol == 0x10d7590 on scope 0xee2538
output_char_str already inserted
----------
output_double with symbol == 0xf09fb0 on scope 0xee4458
output_double with symbol == 0x11a76f0 on scope 0xee2538
output_double already inserted
----------
output_double_binary with symbol == 0x1000350 on scope 0xee4458
output_double_binary with symbol == 0x119a840 on scope 0xee2538
output_double_binary already inserted
----------
output_id with symbol == 0x1000630 on scope 0xee4458
output_id with symbol == 0x10d3b80 on scope 0xee2538
output_id already inserted
----------
output_q with symbol == 0xf08a90 on scope 0xee4458
output_q with symbol == 0x11145e0 on scope 0xee2538
output_q already inserted
----------
output_q_digits with symbol == 0x10007d0 on scope 0xee4458
output_q_digits with symbol == 0x11264a0 on scope 0xee2538
output_q_digits already inserted
----------
output_q_hex with symbol == 0x1000aa0 on scope 0xee4458
output_q_hex with symbol == 0x10d24a0 on scope 0xee2538
output_q_hex already inserted
----------
output_q_hex_j1 with symbol == 0x112caf0 on scope 0xee2538
----------
output_q_hex_j2 with symbol == 0x10ce4c0 on scope 0xee2538
----------
output_q_j1 with symbol == 0x110ac20 on scope 0xee2538
----------
output_q_j2 with symbol == 0x110fa10 on scope 0xee2538
----------
output_str with symbol == 0x1000c30 on scope 0xee4458
output_str with symbol == 0x10dbb70 on scope 0xee2538
output_str already inserted
----------
output_str_j1 with symbol == 0x10da630 on scope 0xee2538
----------
p_align_to with symbol == 0x1000e60 on scope 0xee4458
p_align_to with symbol == 0x10b5470 on scope 0xee2538
p_align_to already inserted
----------
partitions with symbol == 0xf2fac0 on scope 0xee4458
----------
pc_get with symbol == 0xf13c90 on scope 0xee4458
pc_get with symbol == 0x10e7ae0 on scope 0xee2538
pc_get already inserted
----------
pc_sync with symbol == 0xf12bf0 on scope 0xee4458
pc_sync with symbol == 0x10ee3c0 on scope 0xee2538
pc_sync already inserted
----------
pc_write with symbol == 0xfb7b80 on scope 0xee4458
pc_write with symbol == 0x10ebc10 on scope 0xee2538
pc_write already inserted
----------
pralloc with symbol == 0xf0fc00 on scope 0xee4458
pralloc with symbol == 0x10bf3b0 on scope 0xee2538
pralloc already inserted
----------
print_time_diff_and_update with symbol == 0xf815e0 on scope 0xee4458
print_time_diff_and_update with symbol == 0x124ae20 on scope 0xee2538
print_time_diff_and_update already inserted
----------
reg1 with symbol == 0x10013a0 on scope 0xee4458
reg1 with symbol == 0x10a3c50 on scope 0xee2538
----------
reg2 with symbol == 0x1001540 on scope 0xee4458
reg2 with symbol == 0x10a4160 on scope 0xee2538
----------
reg3 with symbol == 0x1001650 on scope 0xee4458
reg3 with symbol == 0x1140840 on scope 0xee2538
----------
reg4 with symbol == 0x1001760 on scope 0xee4458
reg4 with symbol == 0x11411e0 on scope 0xee2538
----------
s_align_to with symbol == 0x10017d0 on scope 0xee4458
s_align_to with symbol == 0x10890b0 on scope 0xee2538
s_align_to already inserted
----------
s_align_to_ext with symbol == 0x1001a00 on scope 0xee4458
s_align_to_ext with symbol == 0x108b330 on scope 0xee2538
s_align_to_ext already inserted
----------
s_align_to_page with symbol == 0x1001bc0 on scope 0xee4458
s_align_to_page with symbol == 0x108d5b0 on scope 0xee2538
s_align_to_page already inserted
----------
select_topk with symbol == 0xefea70 on scope 0xee4458
select_topk already inserted
----------
shalloc with symbol == 0x1001ed0 on scope 0xee4458
shalloc with symbol == 0x10b2fe0 on scope 0xee2538
shalloc already inserted
----------
shalloc_ext with symbol == 0x10020a0 on scope 0xee4458
shalloc_ext with symbol == 0x10cb6f0 on scope 0xee2538
shalloc_ext already inserted
----------
shalloced_replicas with symbol == 0x1002360 on scope 0xee4458
shalloced_replicas with symbol == 0x109d9a0 on scope 0xee2538
shalloced_replicas already inserted
----------
slisten with symbol == 0x1100660 on scope 0xee2538
slisten already inserted
----------
sort with symbol == 0xf200a0 on scope 0xee4458
sort already inserted
----------
sqrt with symbol == 0x1002750 on scope 0xee4458
sqrt with symbol == 0x10e30a0 on scope 0xee2538
sqrt already inserted
----------
sread with symbol == 0x10f5c60 on scope 0xee2538
sread already inserted
----------
str_to_long with symbol == 0x112f760 on scope 0xee2538
str_to_long already inserted
----------
str_to_long_exit with symbol == 0x11f3470 on scope 0xee2538
----------
strncmp with symbol == 0x1002930 on scope 0xee4458
strncmp with symbol == 0x1134e60 on scope 0xee2538
strncmp already inserted
----------
strncmp_e with symbol == 0x1134020 on scope 0xee2538
----------
strncmp_g with symbol == 0x1133210 on scope 0xee2538
----------
strncmp_l with symbol == 0x1133870 on scope 0xee2538
----------
strncmp_ne with symbol == 0x1132cb0 on scope 0xee2538
----------
strncmp_while with symbol == 0x11322c0 on scope 0xee2538
----------
swrite with symbol == 0x10fde90 on scope 0xee2538
swrite already inserted
----------
task_id_to_ec_range with symbol == 0x1002bf0 on scope 0xee4458
task_id_to_ec_range with symbol == 0x1103c90 on scope 0xee2538
task_id_to_ec_range already inserted
----------
task_status with symbol == 0xf6ad70 on scope 0xee4458
----------
time_add with symbol == 0x1003100 on scope 0xee4458
time_add with symbol == 0x12400f0 on scope 0xee2538
time_add already inserted
----------
time_subtract with symbol == 0x1003470 on scope 0xee4458
time_subtract with symbol == 0x1239af0 on scope 0xee2538
time_subtract already inserted
----------
topk with symbol == 0xf2d4f0 on scope 0xee4458
topk already inserted
----------
topk_task with symbol == 0xf2e3c0 on scope 0xee4458
topk_task already inserted
----------
usleep with symbol == 0x1254f30 on scope 0xee2538
usleep already inserted
----------
vertices with symbol == 0xf05350 on scope 0xee4458
----------
vertices_cnt with symbol == 0xef1e70 on scope 0xee4458
----------
new global symbols:
├─__memcmp_se
├─_get_from_sar_array
├─_get_in_neighbors_range
├─_get_new_pa
├─_get_new_sar
├─_get_new_sar_ext
├─_output_debug
├─_syscall_malloc
├─_syscall_malloc_ext
├─barrier_task
├─begin_time_nsec
├─begin_time_sec
├─build_partitions
├─calc_task
├─create_new_iter_task
├─exp
├─exp_remez13_05_05
├─get_in_neighbors_range
├─get_my_task_id
├─get_new_task_id
├─get_time_diff_and_update
├─get_vertices_range
├─gettime
├─in_neighbors
├─init_PR_var
├─init_task
├─input_char
├─input_double
├─input_double_after_dot
├─input_double_exit
├─input_line
├─input_line_exit
├─input_long
├─input_long_exit
├─input_q
├─input_q_exit
├─ipow
├─iter
├─main
├─memcmp
├─memcpy
├─memset0
├─new_iter_task
├─num_tasks
├─output_char
├─output_char_str
├─output_double
├─output_double_binary
├─output_id
├─output_q
├─output_q_digits
├─output_q_hex
├─output_q_hex_j1
├─output_q_hex_j2
├─output_q_j1
├─output_q_j2
├─output_str
├─output_str_j1
├─p_align_to
├─partitions
├─pc_get
├─pc_sync
├─pc_write
├─pralloc
├─print_time_diff_and_update
├─reg1
├─reg2
├─reg3
├─reg4
├─s_align_to
├─s_align_to_ext
├─s_align_to_page
├─select_topk
├─shalloc
├─shalloc_ext
├─shalloced_replicas
├─slisten
├─sort
├─sqrt
├─sread
├─str_to_long
├─str_to_long_exit
├─strncmp
├─strncmp_e
├─strncmp_g
├─strncmp_l
├─strncmp_ne
├─strncmp_while
├─swrite
├─task_id_to_ec_range
├─task_status
├─time_add
├─time_subtract
├─topk
├─topk_task
├─usleep
├─vertices
└─vertices_cnt
[LINK]: relinked symbol pralloc in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol output_char in function sort
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol pralloc in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol pc_sync in function topk
[LINK]: relinked symbol pc_get in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol vertices in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol select_topk in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol sort in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_q in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_q in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol vertices_cnt in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_q in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_double in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol output_char in function topk
[LINK]: relinked symbol topk in function topk_task
[LINK]: relinked symbol partitions in function get_vertices_range
[LINK]: relinked symbol partitions in function get_vertices_range
[LINK]: relinked symbol partitions in function get_in_neighbors_range
[LINK]: relinked symbol partitions in function get_in_neighbors_range
[LINK]: relinked symbol vertices in function _get_in_neighbors_range
[LINK]: relinked symbol vertices in function _get_in_neighbors_range
[LINK]: relinked symbol vertices in function _get_in_neighbors_range
[LINK]: relinked symbol num_tasks in function build_partitions
[LINK]: relinked symbol vertices_cnt in function build_partitions
[LINK]: relinked symbol vertices_cnt in function build_partitions
[LINK]: relinked symbol _get_in_neighbors_range in function build_partitions
[LINK]: relinked symbol partitions in function build_partitions
[LINK]: relinked symbol partitions in function build_partitions
[LINK]: relinked symbol partitions in function build_partitions
[LINK]: relinked symbol partitions in function build_partitions
[LINK]: relinked symbol iter in function create_new_iter_task
[LINK]: relinked symbol num_tasks in function create_new_iter_task
[LINK]: relinked symbol num_tasks in function create_new_iter_task
[LINK]: relinked symbol task_status in function create_new_iter_task
[LINK]: relinked symbol vertices_cnt in function create_new_iter_task
[LINK]: relinked symbol vertices in function create_new_iter_task
[LINK]: relinked symbol in_neighbors in function create_new_iter_task
[LINK]: relinked symbol partitions in function create_new_iter_task
[LINK]: relinked symbol new_iter_task in function create_new_iter_task
[LINK]: relinked symbol iter in function barrier_task
[LINK]: relinked symbol num_tasks in function barrier_task
[LINK]: relinked symbol task_status in function barrier_task
[LINK]: relinked symbol iter in function barrier_task
[LINK]: relinked symbol iter in function barrier_task
[LINK]: relinked symbol iter in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_q in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol begin_time_sec in function barrier_task
[LINK]: relinked symbol begin_time_nsec in function barrier_task
[LINK]: relinked symbol print_time_diff_and_update in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol output_char in function barrier_task
[LINK]: relinked symbol vertices_cnt in function barrier_task
[LINK]: relinked symbol vertices in function barrier_task
[LINK]: relinked symbol vertices in function barrier_task
[LINK]: relinked symbol topk_task in function barrier_task
[LINK]: relinked symbol iter in function barrier_task
[LINK]: relinked symbol create_new_iter_task in function barrier_task
[LINK]: relinked symbol get_vertices_range in function calc_task
[LINK]: relinked symbol get_in_neighbors_range in function calc_task
[LINK]: relinked symbol pc_get in function calc_task
[LINK]: relinked symbol iter in function calc_task
[LINK]: relinked symbol pc_get in function calc_task
[LINK]: relinked symbol iter in function calc_task
[LINK]: relinked symbol vertices in function calc_task
[LINK]: relinked symbol memcpy in function calc_task
[LINK]: relinked symbol in_neighbors in function calc_task
[LINK]: relinked symbol memcpy in function calc_task
[LINK]: relinked symbol iter in function calc_task
[LINK]: relinked symbol iter in function calc_task
[LINK]: relinked symbol pc_write in function calc_task
[LINK]: relinked symbol iter in function calc_task
[LINK]: relinked symbol pc_write in function calc_task
[LINK]: relinked symbol task_status in function calc_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol pc_sync in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol num_tasks in function new_iter_task
[LINK]: relinked symbol get_vertices_range in function new_iter_task
[LINK]: relinked symbol get_in_neighbors_range in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol num_tasks in function new_iter_task
[LINK]: relinked symbol vertices_cnt in function new_iter_task
[LINK]: relinked symbol vertices in function new_iter_task
[LINK]: relinked symbol in_neighbors in function new_iter_task
[LINK]: relinked symbol task_status in function new_iter_task
[LINK]: relinked symbol partitions in function new_iter_task
[LINK]: relinked symbol calc_task in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol num_tasks in function new_iter_task
[LINK]: relinked symbol vertices_cnt in function new_iter_task
[LINK]: relinked symbol vertices in function new_iter_task
[LINK]: relinked symbol in_neighbors in function new_iter_task
[LINK]: relinked symbol in_neighbors in function new_iter_task
[LINK]: relinked symbol vertices in function new_iter_task
[LINK]: relinked symbol task_status in function new_iter_task
[LINK]: relinked symbol partitions in function new_iter_task
[LINK]: relinked symbol calc_task in function new_iter_task
[LINK]: relinked symbol task_status in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol num_tasks in function new_iter_task
[LINK]: relinked symbol vertices_cnt in function new_iter_task
[LINK]: relinked symbol vertices in function new_iter_task
[LINK]: relinked symbol in_neighbors in function new_iter_task
[LINK]: relinked symbol begin_time_sec in function new_iter_task
[LINK]: relinked symbol begin_time_nsec in function new_iter_task
[LINK]: relinked symbol num_tasks in function new_iter_task
[LINK]: relinked symbol task_status in function new_iter_task
[LINK]: relinked symbol barrier_task in function new_iter_task
[LINK]: relinked symbol iter in function new_iter_task
[LINK]: relinked symbol begin_time_sec in function init_task
[LINK]: relinked symbol begin_time_nsec in function init_task
[LINK]: relinked symbol gettime in function init_task
[LINK]: relinked symbol vertices_cnt in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol output_q in function init_task
[LINK]: relinked symbol vertices_cnt in function init_task
[LINK]: relinked symbol output_char in function init_task
[LINK]: relinked symbol vertices in function init_task
[LINK]: relinked symbol in_neighbors in function init_task
[LINK]: relinked symbol iter in function init_task
[LINK]: relinked symbol num_tasks in function init_task
[LINK]: relinked symbol build_partitions in function init_task
[LINK]: relinked symbol create_new_iter_task in function init_task
[LINK]: relinked symbol iter in function main
[LINK]: relinked symbol num_tasks in function main
[LINK]: relinked symbol vertices_cnt in function main
[LINK]: relinked symbol vertices in function main
[LINK]: relinked symbol in_neighbors in function main
[LINK]: relinked symbol begin_time_sec in function main
[LINK]: relinked symbol begin_time_nsec in function main
[LINK]: relinked symbol partitions in function main
[LINK]: relinked symbol init_task in function main
[LINK]: relinked symbol ipow in function exp_remez13_05_05
[LINK]: relinked symbol _syscall_malloc in function _get_new_sar
[LINK]: relinked symbol _syscall_malloc_ext in function _get_new_sar_ext
[LINK]: relinked symbol s_align_to_page in function shalloc
[LINK]: relinked symbol s_align_to in function shalloc
[LINK]: relinked symbol _get_from_sar_array in function shalloc
[LINK]: relinked symbol _get_new_sar in function shalloc
[LINK]: relinked symbol init_PR_var in function shalloc
[LINK]: relinked symbol _get_new_sar in function shalloc
[LINK]: relinked symbol p_align_to in function pralloc
[LINK]: relinked symbol init_PR_var in function pralloc
[LINK]: relinked symbol _get_new_pa in function pralloc
[LINK]: relinked symbol s_align_to_page in function shalloc_ext
[LINK]: relinked symbol s_align_to_ext in function shalloc_ext
[LINK]: relinked symbol _get_new_sar_ext in function shalloc_ext
[LINK]: relinked symbol init_PR_var in function shalloc_ext
[LINK]: relinked symbol _get_new_sar_ext in function shalloc_ext
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol reg1 in function exp
[LINK]: relinked symbol reg2 in function exp
[LINK]: relinked symbol output_char in function output_q
[LINK]: relinked symbol output_q_j1 in function output_q
[LINK]: relinked symbol output_q_j2 in function output_q
[LINK]: relinked symbol output_char in function output_q
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_digits
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_q_hex_j1 in function output_q_hex
[LINK]: relinked symbol output_q_hex_j2 in function output_q_hex
[LINK]: relinked symbol output_char in function output_q_hex
[LINK]: relinked symbol output_q_hex in function output_id
[LINK]: relinked symbol output_char in function output_char_str
[LINK]: relinked symbol output_str_j1 in function output_str
[LINK]: relinked symbol output_char in function output_str
[LINK]: relinked symbol input_q_exit in function input_q
[LINK]: relinked symbol input_line_exit in function input_line
[LINK]: relinked symbol input_long_exit in function input_long
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_q in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_char in function output_double_binary
[LINK]: relinked symbol output_q in function output_double_binary
[LINK]: relinked symbol output_char in function output_double
[LINK]: relinked symbol output_double_binary in function output_double
[LINK]: relinked symbol output_double_binary in function output_double
[LINK]: relinked symbol output_q in function output_double
[LINK]: relinked symbol output_char in function output_double
[LINK]: relinked symbol output_q in function output_double
[LINK]: relinked symbol input_double_after_dot in function input_double
[LINK]: relinked symbol input_double_exit in function input_double
[LINK]: relinked symbol input_long in function input_double
[LINK]: relinked symbol input_long in function input_double
[LINK]: relinked symbol ipow in function input_double
[LINK]: relinked symbol ipow in function input_double
[LINK]: relinked symbol str_to_long_exit in function str_to_long
[LINK]: relinked symbol strncmp_while in function strncmp
[LINK]: relinked symbol strncmp_ne in function strncmp
[LINK]: relinked symbol strncmp_g in function strncmp
[LINK]: relinked symbol strncmp_l in function strncmp
[LINK]: relinked symbol strncmp_e in function strncmp
[LINK]: relinked symbol reg1 in function __memcmp_se
[LINK]: relinked symbol reg2 in function __memcmp_se
[LINK]: relinked symbol reg3 in function __memcmp_se
[LINK]: relinked symbol reg4 in function __memcmp_se
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol reg1 in function memcmp
[LINK]: relinked symbol reg2 in function memcmp
[LINK]: relinked symbol reg3 in function memcmp
[LINK]: relinked symbol reg4 in function memcmp
[LINK]: relinked symbol gettime in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol time_subtract in function print_time_diff_and_update
[LINK]: relinked symbol output_q in function print_time_diff_and_update
[LINK]: relinked symbol output_char in function print_time_diff_and_update
[LINK]: relinked symbol output_q_digits in function print_time_diff_and_update
[LINK]: relinked symbol gettime in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol output_char in function get_time_diff_and_update
[LINK]: relinked symbol time_subtract in function get_time_diff_and_update
[LINK]: fixed __memcmp_se
[LINK]: fixed _get_from_sar_array
[LINK]: fixed _get_in_neighbors_range
[LINK]: fixed _get_new_pa
[LINK]: fixed _get_new_sar
[LINK]: fixed _get_new_sar_ext
[LINK]: fixed _output_debug
[LINK]: fixed _syscall_malloc
[LINK]: fixed _syscall_malloc_ext
[LINK]: fixed barrier_task
[LINK]: fixed begin_time_nsec
[LINK]: fixed begin_time_sec
[LINK]: fixed build_partitions
[LINK]: fixed calc_task
[LINK]: fixed create_new_iter_task
[LINK]: fixed exp
[LINK]: fixed exp_remez13_05_05
[LINK]: fixed get_in_neighbors_range
[LINK]: fixed get_my_task_id
[LINK]: fixed get_new_task_id
[LINK]: fixed get_time_diff_and_update
[LINK]: fixed get_vertices_range
[LINK]: fixed gettime
[LINK]: fixed in_neighbors
[LINK]: fixed init_PR_var
[LINK]: fixed init_task
[LINK]: fixed input_char
[LINK]: fixed input_double
[LINK]: fixed input_double_after_dot
[LINK]: fixed input_double_exit
[LINK]: fixed input_line
[LINK]: fixed input_line_exit
[LINK]: fixed input_long
[LINK]: fixed input_long_exit
[LINK]: fixed input_q
[LINK]: fixed input_q_exit
[LINK]: fixed ipow
[LINK]: fixed iter
[LINK]: fixed main
[LINK]: fixed memcmp
[LINK]: fixed memcpy
[LINK]: fixed memset0
[LINK]: fixed new_iter_task
[LINK]: fixed num_tasks
[LINK]: fixed output_char
[LINK]: fixed output_char_str
[LINK]: fixed output_double
[LINK]: fixed output_double_binary
[LINK]: fixed output_id
[LINK]: fixed output_q
[LINK]: fixed output_q_digits
[LINK]: fixed output_q_hex
[LINK]: fixed output_q_hex_j1
[LINK]: fixed output_q_hex_j2
[LINK]: fixed output_q_j1
[LINK]: fixed output_q_j2
[LINK]: fixed output_str
[LINK]: fixed output_str_j1
[LINK]: fixed p_align_to
[LINK]: fixed partitions
[LINK]: fixed pc_get
[LINK]: fixed pc_sync
[LINK]: fixed pc_write
[LINK]: fixed pralloc
[LINK]: fixed print_time_diff_and_update
[LINK]: fixed reg1
[LINK]: fixed reg2
[LINK]: fixed reg3
[LINK]: fixed reg4
[LINK]: fixed s_align_to
[LINK]: fixed s_align_to_ext
[LINK]: fixed s_align_to_page
[LINK]: fixed select_topk
[LINK]: fixed shalloc
[LINK]: fixed shalloc_ext
[LINK]: fixed shalloced_replicas
[LINK]: fixed slisten
[LINK]: fixed sort
[LINK]: fixed sqrt
[LINK]: fixed sread
[LINK]: fixed str_to_long
[LINK]: fixed str_to_long_exit
[LINK]: fixed strncmp
[LINK]: fixed strncmp_e
[LINK]: fixed strncmp_g
[LINK]: fixed strncmp_l
[LINK]: fixed strncmp_ne
[LINK]: fixed strncmp_while
[LINK]: fixed swrite
[LINK]: fixed task_id_to_ec_range
[LINK]: fixed task_status
[LINK]: fixed time_add
[LINK]: fixed time_subtract
[LINK]: fixed topk
[LINK]: fixed topk_task
[LINK]: fixed usleep
[LINK]: fixed vertices
[LINK]: fixed vertices_cnt
[LINK]: Dep: main
[LINK]: Dep: init_task
[LINK]: Dep: gettime
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_char
[LINK]: Dep: output_q
[LINK]: Dep: output_char
[LINK]: Dep: build_partitions
[LINK]: Dep: create_new_iter_task
[LINK]: Dep: _get_in_neighbors_range
[LINK]: Dep: new_iter_task
[LINK]: Dep: pc_sync
[LINK]: Dep: get_vertices_range
[LINK]: Dep: get_in_neighbors_range
[LINK]: Dep: calc_task
[LINK]: Dep: calc_task
[LINK]: Dep: barrier_task
[LINK]: Dep: pc_get
[LINK]: Dep: pc_get
[LINK]: Dep: memcpy
[LINK]: Dep: memcpy
[LINK]: Dep: pc_write
[LINK]: Dep: pc_write
[LINK]: Dep: print_time_diff_and_update
[LINK]: Dep: topk_task
[LINK]: Dep: time_subtract
[LINK]: Dep: output_q_digits
[LINK]: Dep: topk
[LINK]: Dep: pralloc
[LINK]: Dep: select_topk
[LINK]: Dep: sort
[LINK]: Dep: output_double
[LINK]: Dep: p_align_to
[LINK]: Dep: init_PR_var
[LINK]: Dep: _get_new_pa
[LINK]: Dep: output_double_binary
[LINK]: Dep: output_double_binary
[LINK]: purged sym: __memcmp_se
[LINK]: purged sym: _get_from_sar_array
[LINK]: purged sym: _get_new_sar
[LINK]: purged sym: _get_new_sar_ext
[LINK]: purged sym: _output_debug
[LINK]: purged sym: _syscall_malloc
[LINK]: purged sym: _syscall_malloc_ext
[LINK]: purged sym: exp
[LINK]: purged sym: exp_remez13_05_05
[LINK]: purged sym: get_my_task_id
[LINK]: purged sym: get_new_task_id
[LINK]: purged sym: get_time_diff_and_update
[LINK]: purged sym: input_char
[LINK]: purged sym: input_double
[LINK]: purged sym: input_double_after_dot
[LINK]: purged sym: input_double_exit
[LINK]: purged sym: input_line
[LINK]: purged sym: input_line_exit
[LINK]: purged sym: input_long
[LINK]: purged sym: input_long_exit
[LINK]: purged sym: input_q
[LINK]: purged sym: input_q_exit
[LINK]: purged sym: ipow
[LINK]: purged sym: memcmp
[LINK]: purged sym: memset0
[LINK]: purged sym: output_char_str
[LINK]: purged sym: output_id
[LINK]: purged sym: output_q_hex
[LINK]: purged sym: output_q_hex_j1
[LINK]: purged sym: output_q_hex_j2
[LINK]: purged sym: output_str
[LINK]: purged sym: output_str_j1
[LINK]: purged sym: reg1
[LINK]: purged sym: reg2
[LINK]: purged sym: reg3
[LINK]: purged sym: reg4
[LINK]: purged sym: s_align_to
[LINK]: purged sym: s_align_to_ext
[LINK]: purged sym: s_align_to_page
[LINK]: purged sym: shalloc
[LINK]: purged sym: shalloc_ext
[LINK]: purged sym: shalloced_replicas
[LINK]: purged sym: slisten
[LINK]: purged sym: sqrt
[LINK]: purged sym: sread
[LINK]: purged sym: str_to_long
[LINK]: purged sym: str_to_long_exit
[LINK]: purged sym: strncmp
[LINK]: purged sym: strncmp_e
[LINK]: purged sym: strncmp_g
[LINK]: purged sym: strncmp_l
[LINK]: purged sym: strncmp_ne
[LINK]: purged sym: strncmp_while
[LINK]: purged sym: swrite
[LINK]: purged sym: task_id_to_ec_range
[LINK]: purged sym: time_add
[LINK]: purged sym: usleep
====================================================
Global scope: SIZE: 0x46000 {
    NAME: _get_in_neighbors_range 	TYPE: FUNCTION (v_begin:int64, v_end:int64, n_begin:int64*, n_end:int64*) =>void
    NAME: _get_new_pa 	TYPE: FUNCTION (size:int64) =>void*
    NAME: barrier_task 	TYPE: FUNCTION (cur_iter:int64) =>void
    NAME: begin_time_nsec 	TYPE: int64 	OFFSET: +0x20800000008
    NAME: begin_time_sec 	TYPE: int64 	OFFSET: +0x20800000010
    NAME: build_partitions 	TYPE: FUNCTION () =>void
    NAME: calc_task 	TYPE: FUNCTION (id:int64) =>void
    NAME: create_new_iter_task 	TYPE: FUNCTION () =>void
    NAME: get_in_neighbors_range 	TYPE: FUNCTION (id:int64, n_begin:int64*, n_end:int64*) =>void
    NAME: get_vertices_range 	TYPE: FUNCTION (id:int64, v_begin:int64*, v_end:int64*) =>void
    NAME: gettime 	TYPE: FUNCTION (tv_sec:int64*, tv_nsec:int64*) =>int64
    NAME: in_neighbors 	TYPE: int64* 	OFFSET: +0x20800001000
    NAME: init_PR_var 	TYPE: FUNCTION () =>void
    NAME: init_task 	TYPE: FUNCTION () =>void
    NAME: iter 	TYPE: int64 	OFFSET: +0x20800002000
    NAME: main 	TYPE: FUNCTION () =>void
    NAME: memcpy 	TYPE: FUNCTION (src:int8*, len:int64, dst:int8*) =>void
    NAME: new_iter_task 	TYPE: FUNCTION () =>void
    NAME: num_tasks 	TYPE: int64 	OFFSET: +0x20800002008
    NAME: output_char 	TYPE: FUNCTION (c:int64) =>void
    NAME: output_double 	TYPE: FUNCTION (d:double) =>void
    NAME: output_double_binary 	TYPE: FUNCTION (d:double) =>void
    NAME: output_q 	TYPE: FUNCTION (n:int64) =>void
    NAME: output_q_digits 	TYPE: FUNCTION (n:int64, d:int64) =>void
    NAME: output_q_j1 	TYPE: LABEL
    NAME: output_q_j2 	TYPE: LABEL
    NAME: p_align_to 	TYPE: FUNCTION (size:int64) =>int64
    NAME: partitions 	TYPE: int64[256] 	OFFSET: +0x20800003000
    NAME: pc_get 	TYPE: FUNCTION (phase_no:int64, addr:void*, len:int64, dst:void*) =>int64
    NAME: pc_sync 	TYPE: FUNCTION (phase_no:int64) =>bool
    NAME: pc_write 	TYPE: FUNCTION (phase_no:int64, addr:void*, len:int64) =>int64
    NAME: pralloc 	TYPE: FUNCTION (size:int64) =>void*
    NAME: print_time_diff_and_update 	TYPE: FUNCTION (base_sec:int64*, base_nsec:int64*) =>int64
    NAME: select_topk 	TYPE: FUNCTION (idx:int64*, start:int64, end:int64, value:double*, k:int64) =>void
    NAME: sort 	TYPE: FUNCTION (idx:int64*, start:int64, end:int64, value:double*) =>void
    NAME: task_status 	TYPE: int64[32768] 	OFFSET: +0x20800004000
    NAME: time_subtract 	TYPE: FUNCTION (tv_sec_from:int64*, tv_nsec_from:int64*, tv_sec:int64, tv_nsec:int64) =>void
    NAME: topk 	TYPE: FUNCTION (iter:int64) =>void
    NAME: topk_task 	TYPE: FUNCTION (iter:int64) =>void
    NAME: vertices 	TYPE: int64* 	OFFSET: +0x20800044000
    NAME: vertices_cnt 	TYPE: int64 	OFFSET: +0x20800045000
    Function scope: SIZE: 0x200 {
        Local scope: SIZE: 0x200 {
            NAME: __temp_453 	TYPE: void* 	OFFSET: -0x8
            NAME: __temp_454 	TYPE: void* 	OFFSET: -0x10
            NAME: __temp_455 	TYPE: void* 	OFFSET: -0x18
            NAME: __temp_456 	TYPE: void* 	OFFSET: -0x20
            NAME: __temp_457 	TYPE: void* 	OFFSET: -0x28
            NAME: __temp_458 	TYPE: void* 	OFFSET: -0x30
            NAME: __temp_459 	TYPE: void* 	OFFSET: -0x38
            NAME: __temp_460 	TYPE: void* 	OFFSET: -0x40
            NAME: __temp_461 	TYPE: void* 	OFFSET: -0x48
            NAME: __temp_462 	TYPE: void* 	OFFSET: -0x50
            NAME: __temp_463 	TYPE: void* 	OFFSET: -0x58
            NAME: __temp_464 	TYPE: void* 	OFFSET: -0x60
            NAME: __temp_465 	TYPE: void* 	OFFSET: -0x68
            NAME: __temp_466 	TYPE: void* 	OFFSET: -0x70
            NAME: __temp_467 	TYPE: void* 	OFFSET: -0x78
            NAME: __temp_468 	TYPE: void* 	OFFSET: -0x80
            NAME: __temp_469 	TYPE: void* 	OFFSET: -0x88
            NAME: __temp_470 	TYPE: void* 	OFFSET: -0x90
            NAME: __temp_471 	TYPE: void* 	OFFSET: -0x98
            NAME: __temp_472 	TYPE: int64 	OFFSET: -0xA0
            NAME: __temp_473 	TYPE: int64 	OFFSET: -0xA8
            NAME: __temp_474 	TYPE: int64 	OFFSET: -0xB0
            NAME: __temp_475 	TYPE: int64 	OFFSET: -0xB8
            NAME: __temp_476 	TYPE: int64 	OFFSET: -0xC0
            NAME: __temp_477 	TYPE: int64 	OFFSET: -0xC8
            NAME: __temp_478 	TYPE: int64 	OFFSET: -0xD0
            NAME: __temp_479 	TYPE: int64 	OFFSET: -0xD8
            NAME: __temp_480 	TYPE: int64 	OFFSET: -0xE0
            NAME: __temp_481 	TYPE: int64 	OFFSET: -0xE8
            NAME: __temp_482 	TYPE: int64 	OFFSET: -0xF0
            NAME: __temp_483 	TYPE: int64* 	OFFSET: -0xF8
            NAME: __temp_484 	TYPE: int64 	OFFSET: -0x100
            NAME: __temp_485 	TYPE: int64 	OFFSET: -0x108
            NAME: __temp_486 	TYPE: int64 	OFFSET: -0x110
            NAME: __temp_487 	TYPE: void* 	OFFSET: -0x118
            NAME: __temp_488 	TYPE: void* 	OFFSET: -0x120
            NAME: __temp_489 	TYPE: int64 	OFFSET: -0x128
            NAME: __temp_490 	TYPE: int64 	OFFSET: -0x130
            NAME: __temp_491 	TYPE: int64 	OFFSET: -0x138
            NAME: __temp_492 	TYPE: int64 	OFFSET: -0x140
            NAME: __temp_493 	TYPE: int64 	OFFSET: -0x148
            NAME: __temp_494 	TYPE: int64 	OFFSET: -0x150
            NAME: __temp_495 	TYPE: int64 	OFFSET: -0x158
            NAME: __temp_496 	TYPE: int64 	OFFSET: -0x160
            NAME: __temp_497 	TYPE: int64 	OFFSET: -0x168
            NAME: __temp_498 	TYPE: int64 	OFFSET: -0x170
            NAME: __temp_499 	TYPE: int64 	OFFSET: -0x178
            NAME: __temp_500 	TYPE: int64 	OFFSET: -0x180
            NAME: __temp_501 	TYPE: int64 	OFFSET: -0x188
            NAME: __temp_502 	TYPE: int64 	OFFSET: -0x190
            NAME: __temp_503 	TYPE: int64 	OFFSET: -0x198
            NAME: __temp_504 	TYPE: int64 	OFFSET: -0x1A0
            NAME: __temp_505 	TYPE: int64* 	OFFSET: -0x1A8
            NAME: __temp_506 	TYPE: int64 	OFFSET: -0x1B0
            NAME: __temp_507 	TYPE: int64 	OFFSET: -0x1B8
            NAME: __temp_508 	TYPE: int64 	OFFSET: -0x1C0
            NAME: __temp_509 	TYPE: int64 	OFFSET: -0x1C8
            NAME: __temp_510 	TYPE: int64 	OFFSET: -0x1D0
            NAME: __temp_511 	TYPE: void* 	OFFSET: -0x1D8
            NAME: __temp_512 	TYPE: void* 	OFFSET: -0x1E0
            NAME: __temp_513 	TYPE: int64 	OFFSET: -0x1E8
            NAME: __temp_514 	TYPE: void* 	OFFSET: -0x1F0
            NAME: __temp_515 	TYPE: void* 	OFFSET: -0x1F8
            NAME: space 	TYPE: int64 	OFFSET: -0x200
        }
    }
    Function scope: SIZE: 0x28 {
        Local scope: SIZE: 0x28 {
            NAME: __temp_449 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_450 	TYPE: int64* 	OFFSET: -0x10
            NAME: __temp_451 	TYPE: int64* 	OFFSET: -0x18
            NAME: __temp_452 	TYPE: int64 	OFFSET: -0x20
            NAME: i 	TYPE: int64 	OFFSET: -0x28
            Local scope: SIZE: 0x0 {
            }
        }
    }
    Function scope: SIZE: 0x20 {
        NAME: tv_nsec 	TYPE: int64* 	OFFSET: +0x20
        NAME: tv_sec 	TYPE: int64* 	OFFSET: +0x18
        Local scope: SIZE: 0x20 {
            NAME: __temp_694 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_695 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_696 	TYPE: int64 	OFFSET: -0x18
            NAME: ret 	TYPE: int64 	OFFSET: -0x20
        }
    }
    Function scope: SIZE: 0x0 {
        NAME: c 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x0 {
        }
    }
    Function scope: SIZE: 0xB0 {
        NAME: n 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0xB0 {
            NAME: __temp_249 	TYPE: LABEL
            NAME: __temp_250 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_251 	TYPE: LABEL
            NAME: __temp_254 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_255 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_256 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_257 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_258 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_259 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_260 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_261 	TYPE: LABEL
            NAME: __temp_262 	TYPE: bool 	OFFSET: -0x48
            NAME: __temp_263 	TYPE: LABEL
            NAME: __temp_264 	TYPE: int64 	OFFSET: -0x50
            NAME: __temp_265 	TYPE: int64 	OFFSET: -0x58
            NAME: __temp_266 	TYPE: int64 	OFFSET: -0x60
            NAME: __temp_267 	TYPE: int64 	OFFSET: -0x68
            NAME: __temp_268 	TYPE: int64 	OFFSET: -0x70
            NAME: __temp_269 	TYPE: int64 	OFFSET: -0x78
            NAME: __temp_270 	TYPE: LABEL
            NAME: __temp_271 	TYPE: bool 	OFFSET: -0x80
            NAME: __temp_272 	TYPE: LABEL
            NAME: c 	TYPE: int64 	OFFSET: -0x88
            NAME: count 	TYPE: int64 	OFFSET: -0x90
            NAME: num 	TYPE: int64 	OFFSET: -0x98
            NAME: num2 	TYPE: int64 	OFFSET: -0xA0
            Local scope: SIZE: 0x10 {
                NAME: __temp_252 	TYPE: int64 	OFFSET: -0xA8
                NAME: __temp_253 	TYPE: int64 	OFFSET: -0xB0
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x0 {
            }
        }
    }
    Function scope: SIZE: 0x2B0 {
        Local scope: SIZE: 0x2B0 {
            NAME: __temp_161 	TYPE: LABEL
            NAME: __temp_162 	TYPE: LABEL
            NAME: __temp_163 	TYPE: LABEL
            NAME: __temp_164 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_180 	TYPE: int64 	OFFSET: -0x10
            NAME: cnt 	TYPE: int64[65] 	OFFSET: -0x218
            NAME: cur 	TYPE: int64 	OFFSET: -0x220
            NAME: i 	TYPE: int64 	OFFSET: -0x228
            NAME: n_begin 	TYPE: int64 	OFFSET: -0x230
            NAME: n_end 	TYPE: int64 	OFFSET: -0x238
            NAME: v_begin 	TYPE: int64 	OFFSET: -0x240
            NAME: v_end 	TYPE: int64 	OFFSET: -0x248
            Local scope: SIZE: 0x68 {
                NAME: __temp_165 	TYPE: int64 	OFFSET: -0x250
                NAME: __temp_166 	TYPE: int64 	OFFSET: -0x258
                NAME: __temp_167 	TYPE: LABEL
                NAME: __temp_168 	TYPE: bool 	OFFSET: -0x260
                NAME: __temp_169 	TYPE: LABEL
                NAME: __temp_170 	TYPE: int64* 	OFFSET: -0x268
                NAME: __temp_171 	TYPE: int64* 	OFFSET: -0x270
                NAME: __temp_172 	TYPE: int64 	OFFSET: -0x278
                NAME: __temp_173 	TYPE: int64 	OFFSET: -0x280
                NAME: __temp_174 	TYPE: int64 	OFFSET: -0x288
                NAME: __temp_175 	TYPE: int64 	OFFSET: -0x290
                NAME: __temp_176 	TYPE: int64 	OFFSET: -0x298
                NAME: __temp_177 	TYPE: int64 	OFFSET: -0x2A0
                NAME: __temp_178 	TYPE: int64 	OFFSET: -0x2A8
                NAME: __temp_179 	TYPE: int64 	OFFSET: -0x2B0
                Local scope: SIZE: 0x0 {
                }
            }
        }
    }
    Function scope: SIZE: 0xB0 {
        Local scope: SIZE: 0xB0 {
            NAME: __temp_181 	TYPE: void* 	OFFSET: -0x8
            NAME: __temp_182 	TYPE: void* 	OFFSET: -0x10
            NAME: __temp_183 	TYPE: void* 	OFFSET: -0x18
            NAME: __temp_184 	TYPE: void* 	OFFSET: -0x20
            NAME: __temp_185 	TYPE: void* 	OFFSET: -0x28
            NAME: __temp_186 	TYPE: void* 	OFFSET: -0x30
            NAME: __temp_187 	TYPE: void* 	OFFSET: -0x38
            NAME: __temp_188 	TYPE: void* 	OFFSET: -0x40
            NAME: __temp_189 	TYPE: void* 	OFFSET: -0x48
            NAME: __temp_190 	TYPE: int64 	OFFSET: -0x50
            NAME: __temp_191 	TYPE: void* 	OFFSET: -0x58
            NAME: __temp_192 	TYPE: void* 	OFFSET: -0x60
            NAME: __temp_193 	TYPE: void* 	OFFSET: -0x68
            NAME: __temp_194 	TYPE: void* 	OFFSET: -0x70
            NAME: __temp_195 	TYPE: void* 	OFFSET: -0x78
            NAME: __temp_196 	TYPE: void* 	OFFSET: -0x80
            NAME: __temp_197 	TYPE: void* 	OFFSET: -0x88
            NAME: __temp_198 	TYPE: void* 	OFFSET: -0x90
            NAME: __temp_199 	TYPE: int64 	OFFSET: -0x98
            NAME: __temp_200 	TYPE: void* 	OFFSET: -0xA0
            NAME: __temp_201 	TYPE: void* 	OFFSET: -0xA8
            NAME: space 	TYPE: int64 	OFFSET: -0xB0
        }
    }
    Function scope: SIZE: 0x60 {
        NAME: n_begin 	TYPE: int64* 	OFFSET: +0x20
        NAME: n_end 	TYPE: int64* 	OFFSET: +0x28
        NAME: v_begin 	TYPE: int64 	OFFSET: +0x10
        NAME: v_end 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x60 {
            NAME: __temp_150 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_151 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_152 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_153 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_154 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_155 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_156 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_157 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_158 	TYPE: int64 	OFFSET: -0x48
            NAME: __temp_159 	TYPE: int64 	OFFSET: -0x50
            NAME: __temp_160 	TYPE: int64 	OFFSET: -0x58
            NAME: v_last 	TYPE: int64 	OFFSET: -0x60
        }
    }
    Function scope: SIZE: 0x250 {
        Local scope: SIZE: 0x250 {
            NAME: __temp_350 	TYPE: LABEL
            NAME: __temp_351 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_352 	TYPE: LABEL
            NAME: __temp_354 	TYPE: LABEL
            NAME: __temp_355 	TYPE: LABEL
            NAME: __temp_356 	TYPE: LABEL
            NAME: __temp_357 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_426 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_427 	TYPE: void* 	OFFSET: -0x20
            NAME: __temp_428 	TYPE: void* 	OFFSET: -0x28
            NAME: __temp_429 	TYPE: void* 	OFFSET: -0x30
            NAME: __temp_430 	TYPE: void* 	OFFSET: -0x38
            NAME: __temp_431 	TYPE: void* 	OFFSET: -0x40
            NAME: __temp_432 	TYPE: void* 	OFFSET: -0x48
            NAME: __temp_433 	TYPE: void* 	OFFSET: -0x50
            NAME: __temp_434 	TYPE: void* 	OFFSET: -0x58
            NAME: __temp_435 	TYPE: void* 	OFFSET: -0x60
            NAME: __temp_436 	TYPE: void* 	OFFSET: -0x68
            NAME: __temp_437 	TYPE: void* 	OFFSET: -0x70
            NAME: __temp_438 	TYPE: void* 	OFFSET: -0x78
            NAME: __temp_439 	TYPE: void* 	OFFSET: -0x80
            NAME: __temp_440 	TYPE: void* 	OFFSET: -0x88
            NAME: __temp_441 	TYPE: void* 	OFFSET: -0x90
            NAME: __temp_442 	TYPE: void* 	OFFSET: -0x98
            NAME: __temp_443 	TYPE: void* 	OFFSET: -0xA0
            NAME: __temp_444 	TYPE: void* 	OFFSET: -0xA8
            NAME: __temp_445 	TYPE: void* 	OFFSET: -0xB0
            NAME: __temp_446 	TYPE: int64 	OFFSET: -0xB8
            NAME: __temp_447 	TYPE: void* 	OFFSET: -0xC0
            NAME: __temp_448 	TYPE: void* 	OFFSET: -0xC8
            NAME: i 	TYPE: int64 	OFFSET: -0xD0
            NAME: n_begin 	TYPE: int64 	OFFSET: -0xD8
            NAME: n_end 	TYPE: int64 	OFFSET: -0xE0
            NAME: space 	TYPE: int64 	OFFSET: -0xE8
            NAME: v_begin 	TYPE: int64 	OFFSET: -0xF0
            NAME: v_end 	TYPE: int64 	OFFSET: -0xF8
            Local scope: SIZE: 0x8 {
                NAME: __temp_353 	TYPE: bool 	OFFSET: -0x100
            }
            Local scope: SIZE: 0x158 {
                NAME: __temp_358 	TYPE: int64* 	OFFSET: -0x100
                NAME: __temp_359 	TYPE: int64* 	OFFSET: -0x108
                NAME: __temp_360 	TYPE: int64* 	OFFSET: -0x110
                NAME: __temp_361 	TYPE: int64* 	OFFSET: -0x118
                NAME: __temp_362 	TYPE: int64 	OFFSET: -0x120
                NAME: __temp_363 	TYPE: int64 	OFFSET: -0x128
                NAME: __temp_364 	TYPE: LABEL
                NAME: __temp_365 	TYPE: bool 	OFFSET: -0x130
                NAME: __temp_366 	TYPE: LABEL
                NAME: __temp_425 	TYPE: int64 	OFFSET: -0x138
                Local scope: SIZE: 0x118 {
                    NAME: __temp_390 	TYPE: void* 	OFFSET: -0x140
                    NAME: __temp_391 	TYPE: void* 	OFFSET: -0x148
                    NAME: __temp_392 	TYPE: void* 	OFFSET: -0x150
                    NAME: __temp_393 	TYPE: void* 	OFFSET: -0x158
                    NAME: __temp_394 	TYPE: void* 	OFFSET: -0x160
                    NAME: __temp_395 	TYPE: void* 	OFFSET: -0x168
                    NAME: __temp_396 	TYPE: void* 	OFFSET: -0x170
                    NAME: __temp_397 	TYPE: void* 	OFFSET: -0x178
                    NAME: __temp_398 	TYPE: void* 	OFFSET: -0x180
                    NAME: __temp_399 	TYPE: void* 	OFFSET: -0x188
                    NAME: __temp_400 	TYPE: void* 	OFFSET: -0x190
                    NAME: __temp_401 	TYPE: void* 	OFFSET: -0x198
                    NAME: __temp_402 	TYPE: void* 	OFFSET: -0x1A0
                    NAME: __temp_403 	TYPE: void* 	OFFSET: -0x1A8
                    NAME: __temp_404 	TYPE: void* 	OFFSET: -0x1B0
                    NAME: __temp_405 	TYPE: int64 	OFFSET: -0x1B8
                    NAME: __temp_406 	TYPE: int64 	OFFSET: -0x1C0
                    NAME: __temp_407 	TYPE: int64 	OFFSET: -0x1C8
                    NAME: __temp_408 	TYPE: int64 	OFFSET: -0x1D0
                    NAME: __temp_409 	TYPE: int64 	OFFSET: -0x1D8
                    NAME: __temp_410 	TYPE: void* 	OFFSET: -0x1E0
                    NAME: __temp_411 	TYPE: void* 	OFFSET: -0x1E8
                    NAME: __temp_412 	TYPE: int64 	OFFSET: -0x1F0
                    NAME: __temp_413 	TYPE: int64 	OFFSET: -0x1F8
                    NAME: __temp_414 	TYPE: int64 	OFFSET: -0x200
                    NAME: __temp_415 	TYPE: void* 	OFFSET: -0x208
                    NAME: __temp_416 	TYPE: void* 	OFFSET: -0x210
                    NAME: __temp_417 	TYPE: int64 	OFFSET: -0x218
                    NAME: __temp_418 	TYPE: int64 	OFFSET: -0x220
                    NAME: __temp_419 	TYPE: int64 	OFFSET: -0x228
                    NAME: __temp_420 	TYPE: void* 	OFFSET: -0x230
                    NAME: __temp_421 	TYPE: void* 	OFFSET: -0x238
                    NAME: __temp_422 	TYPE: int64 	OFFSET: -0x240
                    NAME: __temp_423 	TYPE: void* 	OFFSET: -0x248
                    NAME: __temp_424 	TYPE: void* 	OFFSET: -0x250
                }
                Local scope: SIZE: 0xB8 {
                    NAME: __temp_367 	TYPE: void* 	OFFSET: -0x140
                    NAME: __temp_368 	TYPE: void* 	OFFSET: -0x148
                    NAME: __temp_369 	TYPE: void* 	OFFSET: -0x150
                    NAME: __temp_370 	TYPE: void* 	OFFSET: -0x158
                    NAME: __temp_371 	TYPE: void* 	OFFSET: -0x160
                    NAME: __temp_372 	TYPE: void* 	OFFSET: -0x168
                    NAME: __temp_373 	TYPE: void* 	OFFSET: -0x170
                    NAME: __temp_374 	TYPE: void* 	OFFSET: -0x178
                    NAME: __temp_375 	TYPE: void* 	OFFSET: -0x180
                    NAME: __temp_376 	TYPE: void* 	OFFSET: -0x188
                    NAME: __temp_377 	TYPE: void* 	OFFSET: -0x190
                    NAME: __temp_378 	TYPE: void* 	OFFSET: -0x198
                    NAME: __temp_379 	TYPE: void* 	OFFSET: -0x1A0
                    NAME: __temp_380 	TYPE: void* 	OFFSET: -0x1A8
                    NAME: __temp_381 	TYPE: void* 	OFFSET: -0x1B0
                    NAME: __temp_382 	TYPE: int64 	OFFSET: -0x1B8
                    NAME: __temp_383 	TYPE: int64 	OFFSET: -0x1C0
                    NAME: __temp_384 	TYPE: int64 	OFFSET: -0x1C8
                    NAME: __temp_385 	TYPE: void* 	OFFSET: -0x1D0
                    NAME: __temp_386 	TYPE: void* 	OFFSET: -0x1D8
                    NAME: __temp_387 	TYPE: int64 	OFFSET: -0x1E0
                    NAME: __temp_388 	TYPE: void* 	OFFSET: -0x1E8
                    NAME: __temp_389 	TYPE: void* 	OFFSET: -0x1F0
                }
            }
        }
    }
    Function scope: SIZE: 0x8 {
        NAME: phase_no 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x8 {
            NAME: __temp_226 	TYPE: int64 	OFFSET: -0x8
        }
    }
    Function scope: SIZE: 0x30 {
        NAME: id 	TYPE: int64 	OFFSET: +0x10
        NAME: v_begin 	TYPE: int64* 	OFFSET: +0x18
        NAME: v_end 	TYPE: int64* 	OFFSET: +0x20
        Local scope: SIZE: 0x30 {
            NAME: __temp_138 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_139 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_140 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_141 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_142 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_143 	TYPE: int64 	OFFSET: -0x30
        }
    }
    Function scope: SIZE: 0x30 {
        NAME: id 	TYPE: int64 	OFFSET: +0x10
        NAME: n_begin 	TYPE: int64* 	OFFSET: +0x18
        NAME: n_end 	TYPE: int64* 	OFFSET: +0x20
        Local scope: SIZE: 0x30 {
            NAME: __temp_144 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_145 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_146 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_147 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_148 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_149 	TYPE: int64 	OFFSET: -0x30
        }
    }
    Function scope: SIZE: 0x2A8 {
        NAME: id 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x2A8 {
            NAME: __temp_236 	TYPE: int64* 	OFFSET: -0x8
            NAME: __temp_237 	TYPE: int64* 	OFFSET: -0x10
            NAME: __temp_238 	TYPE: int64* 	OFFSET: -0x18
            NAME: __temp_239 	TYPE: int64* 	OFFSET: -0x20
            NAME: __temp_240 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_241 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_242 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_243 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_244 	TYPE: int64 	OFFSET: -0x48
            NAME: __temp_245 	TYPE: int64 	OFFSET: -0x50
            NAME: __temp_246 	TYPE: int64 	OFFSET: -0x58
            NAME: __temp_247 	TYPE: int64 	OFFSET: -0x60
            NAME: __temp_248 	TYPE: int64 	OFFSET: -0x68
            NAME: __temp_249 	TYPE: int64 	OFFSET: -0x70
            NAME: __temp_250 	TYPE: int64 	OFFSET: -0x78
            NAME: __temp_251 	TYPE: int64 	OFFSET: -0x80
            NAME: __temp_252 	TYPE: int64 	OFFSET: -0x88
            NAME: __temp_253 	TYPE: int64 	OFFSET: -0x90
            NAME: __temp_254 	TYPE: int64 	OFFSET: -0x98
            NAME: __temp_255 	TYPE: int64 	OFFSET: -0xA0
            NAME: __temp_256 	TYPE: int64 	OFFSET: -0xA8
            NAME: __temp_257 	TYPE: int64 	OFFSET: -0xB0
            NAME: __temp_258 	TYPE: int64 	OFFSET: -0xB8
            NAME: __temp_259 	TYPE: int64 	OFFSET: -0xC0
            NAME: __temp_260 	TYPE: int64 	OFFSET: -0xC8
            NAME: __temp_261 	TYPE: int64 	OFFSET: -0xD0
            NAME: __temp_262 	TYPE: int64 	OFFSET: -0xD8
            NAME: __temp_263 	TYPE: int64 	OFFSET: -0xE0
            NAME: __temp_264 	TYPE: int64 	OFFSET: -0xE8
            NAME: __temp_265 	TYPE: int64 	OFFSET: -0xF0
            NAME: __temp_266 	TYPE: int64 	OFFSET: -0xF8
            NAME: __temp_267 	TYPE: int64 	OFFSET: -0x100
            NAME: __temp_268 	TYPE: int64 	OFFSET: -0x108
            NAME: __temp_269 	TYPE: int64 	OFFSET: -0x110
            NAME: __temp_270 	TYPE: int64 	OFFSET: -0x118
            NAME: __temp_271 	TYPE: int64 	OFFSET: -0x120
            NAME: __temp_272 	TYPE: LABEL
            NAME: __temp_273 	TYPE: int64 	OFFSET: -0x128
            NAME: __temp_274 	TYPE: bool 	OFFSET: -0x130
            NAME: __temp_275 	TYPE: LABEL
            NAME: __temp_289 	TYPE: LABEL
            NAME: __temp_290 	TYPE: bool 	OFFSET: -0x138
            NAME: __temp_291 	TYPE: LABEL
            NAME: __temp_339 	TYPE: int64 	OFFSET: -0x140
            NAME: __temp_340 	TYPE: int64 	OFFSET: -0x148
            NAME: __temp_341 	TYPE: int8* 	OFFSET: -0x150
            NAME: __temp_342 	TYPE: int64 	OFFSET: -0x158
            NAME: __temp_343 	TYPE: int64 	OFFSET: -0x160
            NAME: __temp_344 	TYPE: int64 	OFFSET: -0x168
            NAME: __temp_345 	TYPE: int64 	OFFSET: -0x170
            NAME: __temp_346 	TYPE: int64* 	OFFSET: -0x178
            NAME: __temp_347 	TYPE: int64 	OFFSET: -0x180
            NAME: __temp_348 	TYPE: int64 	OFFSET: -0x188
            NAME: __temp_349 	TYPE: int64 	OFFSET: -0x190
            NAME: changed 	TYPE: int8 	OFFSET: -0x198
            NAME: cur_changed 	TYPE: int8* 	OFFSET: -0x1A0
            NAME: cur_pr 	TYPE: int64* 	OFFSET: -0x1A8
            NAME: i 	TYPE: int64 	OFFSET: -0x1B0
            NAME: j 	TYPE: int64 	OFFSET: -0x1B8
            NAME: n 	TYPE: int64* 	OFFSET: -0x1C0
            NAME: n_begin 	TYPE: int64 	OFFSET: -0x1C8
            NAME: n_end 	TYPE: int64 	OFFSET: -0x1D0
            NAME: nbr 	TYPE: int64 	OFFSET: -0x1D8
            NAME: new_pr 	TYPE: double 	OFFSET: -0x1E0
            NAME: pre_changed 	TYPE: int8* 	OFFSET: -0x1E8
            NAME: pre_pr 	TYPE: int64* 	OFFSET: -0x1F0
            NAME: v 	TYPE: int64* 	OFFSET: -0x1F8
            NAME: v_begin 	TYPE: int64 	OFFSET: -0x200
            NAME: v_end 	TYPE: int64 	OFFSET: -0x208
            Local scope: SIZE: 0x68 {
                NAME: __temp_276 	TYPE: int64* 	OFFSET: -0x210
                NAME: __temp_277 	TYPE: int64 	OFFSET: -0x218
                NAME: __temp_278 	TYPE: int64 	OFFSET: -0x220
                NAME: __temp_279 	TYPE: int64 	OFFSET: -0x228
                NAME: __temp_280 	TYPE: int64 	OFFSET: -0x230
                NAME: __temp_281 	TYPE: int64 	OFFSET: -0x238
                NAME: __temp_282 	TYPE: int64* 	OFFSET: -0x240
                NAME: __temp_283 	TYPE: int64 	OFFSET: -0x248
                NAME: __temp_284 	TYPE: int64* 	OFFSET: -0x250
                NAME: __temp_285 	TYPE: int64 	OFFSET: -0x258
                NAME: __temp_286 	TYPE: int64 	OFFSET: -0x260
                NAME: __temp_287 	TYPE: int64 	OFFSET: -0x268
                NAME: __temp_288 	TYPE: int64* 	OFFSET: -0x270
            }
            Local scope: SIZE: 0x40 {
                NAME: __temp_328 	TYPE: LABEL
                NAME: __temp_329 	TYPE: LABEL
                NAME: __temp_330 	TYPE: LABEL
                NAME: __temp_331 	TYPE: bool 	OFFSET: -0x210
                NAME: __temp_338 	TYPE: int64 	OFFSET: -0x218
                Local scope: SIZE: 0x30 {
                    NAME: __temp_332 	TYPE: int64* 	OFFSET: -0x220
                    NAME: __temp_333 	TYPE: int64 	OFFSET: -0x228
                    NAME: __temp_334 	TYPE: int64 	OFFSET: -0x230
                    NAME: __temp_335 	TYPE: double 	OFFSET: -0x238
                    NAME: __temp_336 	TYPE: double 	OFFSET: -0x240
                    NAME: __temp_337 	TYPE: int64* 	OFFSET: -0x248
                }
            }
            Local scope: SIZE: 0xA0 {
                NAME: __temp_292 	TYPE: LABEL
                NAME: __temp_293 	TYPE: LABEL
                NAME: __temp_294 	TYPE: LABEL
                NAME: __temp_295 	TYPE: bool 	OFFSET: -0x210
                NAME: __temp_327 	TYPE: int64 	OFFSET: -0x218
                Local scope: SIZE: 0x90 {
                    NAME: __temp_296 	TYPE: int64 	OFFSET: -0x220
                    NAME: __temp_297 	TYPE: int64 	OFFSET: -0x228
                    NAME: __temp_298 	TYPE: int64 	OFFSET: -0x230
                    NAME: __temp_299 	TYPE: int64 	OFFSET: -0x238
                    NAME: __temp_300 	TYPE: int64 	OFFSET: -0x240
                    NAME: __temp_301 	TYPE: int64 	OFFSET: -0x248
                    NAME: __temp_302 	TYPE: int64 	OFFSET: -0x250
                    NAME: __temp_303 	TYPE: LABEL
                    NAME: __temp_304 	TYPE: LABEL
                    NAME: __temp_305 	TYPE: LABEL
                    NAME: __temp_306 	TYPE: bool 	OFFSET: -0x258
                    NAME: __temp_315 	TYPE: int64 	OFFSET: -0x260
                    NAME: __temp_316 	TYPE: LABEL
                    NAME: __temp_317 	TYPE: bool 	OFFSET: -0x268
                    NAME: __temp_318 	TYPE: LABEL
                    Local scope: SIZE: 0x30 {
                        NAME: __temp_307 	TYPE: int64 	OFFSET: -0x270
                        NAME: __temp_308 	TYPE: LABEL
                        NAME: __temp_309 	TYPE: int8 	OFFSET: -0x278
                        NAME: __temp_310 	TYPE: bool 	OFFSET: -0x280
                        NAME: __temp_311 	TYPE: LABEL
                        Local scope: SIZE: 0x18 {
                            NAME: __temp_312 	TYPE: int64* 	OFFSET: -0x288
                            NAME: __temp_313 	TYPE: double 	OFFSET: -0x290
                            NAME: __temp_314 	TYPE: double 	OFFSET: -0x298
                        }
                    }
                    Local scope: SIZE: 0x40 {
                        NAME: __temp_319 	TYPE: double 	OFFSET: -0x270
                        NAME: __temp_320 	TYPE: double 	OFFSET: -0x278
                        NAME: __temp_321 	TYPE: int64* 	OFFSET: -0x280
                        NAME: __temp_322 	TYPE: int64 	OFFSET: -0x288
                        NAME: __temp_323 	TYPE: int64 	OFFSET: -0x290
                        NAME: __temp_324 	TYPE: double 	OFFSET: -0x298
                        NAME: __temp_325 	TYPE: double 	OFFSET: -0x2A0
                        NAME: __temp_326 	TYPE: int64* 	OFFSET: -0x2A8
                    }
                }
            }
        }
    }
    Function scope: SIZE: 0xB8 {
        NAME: cur_iter 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0xB8 {
            NAME: __temp_202 	TYPE: LABEL
            NAME: __temp_203 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_204 	TYPE: LABEL
            NAME: __temp_205 	TYPE: LABEL
            NAME: __temp_206 	TYPE: LABEL
            NAME: __temp_207 	TYPE: LABEL
            NAME: __temp_208 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_214 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_215 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_216 	TYPE: LABEL
            NAME: __temp_217 	TYPE: bool 	OFFSET: -0x28
            NAME: __temp_218 	TYPE: LABEL
            NAME: i 	TYPE: int64 	OFFSET: -0x30
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x18 {
                NAME: __temp_209 	TYPE: LABEL
                NAME: __temp_210 	TYPE: int64 	OFFSET: -0x38
                NAME: __temp_211 	TYPE: int64 	OFFSET: -0x40
                NAME: __temp_212 	TYPE: bool 	OFFSET: -0x48
                NAME: __temp_213 	TYPE: LABEL
                Local scope: SIZE: 0x0 {
                }
            }
            Local scope: SIZE: 0x88 {
                NAME: __temp_219 	TYPE: int64 	OFFSET: -0x38
                NAME: __temp_220 	TYPE: int64* 	OFFSET: -0x40
                NAME: __temp_221 	TYPE: int64* 	OFFSET: -0x48
                NAME: __temp_222 	TYPE: void* 	OFFSET: -0x50
                NAME: __temp_223 	TYPE: void* 	OFFSET: -0x58
                NAME: __temp_224 	TYPE: void* 	OFFSET: -0x60
                NAME: __temp_225 	TYPE: void* 	OFFSET: -0x68
                NAME: __temp_226 	TYPE: void* 	OFFSET: -0x70
                NAME: __temp_227 	TYPE: void* 	OFFSET: -0x78
                NAME: __temp_228 	TYPE: void* 	OFFSET: -0x80
                NAME: __temp_229 	TYPE: void* 	OFFSET: -0x88
                NAME: __temp_230 	TYPE: void* 	OFFSET: -0x90
                NAME: __temp_231 	TYPE: int64 	OFFSET: -0x98
                NAME: __temp_232 	TYPE: int64 	OFFSET: -0xA0
                NAME: __temp_233 	TYPE: int64 	OFFSET: -0xA8
                NAME: __temp_234 	TYPE: void* 	OFFSET: -0xB0
                NAME: __temp_235 	TYPE: int64 	OFFSET: -0xB8
                Local scope: SIZE: 0x0 {
                }
                Local scope: SIZE: 0x0 {
                }
            }
            Local scope: SIZE: 0x0 {
            }
        }
    }
    Function scope: SIZE: 0x18 {
        NAME: addr 	TYPE: void* 	OFFSET: +0x20
        NAME: dst 	TYPE: void* 	OFFSET: +0x30
        NAME: len 	TYPE: int64 	OFFSET: +0x28
        NAME: phase_no 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x18 {
            NAME: __temp_221 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_222 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_223 	TYPE: int64 	OFFSET: -0x18
        }
    }
    Function scope: SIZE: 0x58 {
        NAME: dst 	TYPE: int8* 	OFFSET: +0x20
        NAME: len 	TYPE: int64 	OFFSET: +0x18
        NAME: src 	TYPE: int8* 	OFFSET: +0x10
        Local scope: SIZE: 0x58 {
            NAME: __temp_665 	TYPE: LABEL
            NAME: __temp_666 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_667 	TYPE: LABEL
            NAME: __temp_678 	TYPE: LABEL
            NAME: __temp_679 	TYPE: LABEL
            NAME: __temp_680 	TYPE: LABEL
            NAME: __temp_681 	TYPE: bool 	OFFSET: -0x10
            NAME: len8 	TYPE: int64 	OFFSET: -0x18
            NAME: src_n 	TYPE: int64 	OFFSET: -0x20
            Local scope: SIZE: 0x38 {
                NAME: __temp_668 	TYPE: int64 	OFFSET: -0x28
                NAME: __temp_669 	TYPE: int64 	OFFSET: -0x30
                NAME: __temp_670 	TYPE: LABEL
                NAME: __temp_671 	TYPE: LABEL
                NAME: __temp_672 	TYPE: LABEL
                NAME: __temp_673 	TYPE: bool 	OFFSET: -0x38
                Local scope: SIZE: 0x20 {
                    NAME: __temp_674 	TYPE: int8* 	OFFSET: -0x40
                    NAME: __temp_675 	TYPE: int64 	OFFSET: -0x48
                    NAME: __temp_676 	TYPE: int8* 	OFFSET: -0x50
                    NAME: __temp_677 	TYPE: int64 	OFFSET: -0x58
                }
            }
            Local scope: SIZE: 0x10 {
                NAME: __temp_682 	TYPE: int8 	OFFSET: -0x28
                NAME: __temp_683 	TYPE: int64 	OFFSET: -0x30
            }
        }
    }
    Function scope: SIZE: 0x10 {
        NAME: addr 	TYPE: void* 	OFFSET: +0x20
        NAME: len 	TYPE: int64 	OFFSET: +0x28
        NAME: phase_no 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x10 {
            NAME: __temp_224 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_225 	TYPE: int64 	OFFSET: -0x10
        }
    }
    Function scope: SIZE: 0x68 {
        NAME: base_nsec 	TYPE: int64* 	OFFSET: +0x20
        NAME: base_sec 	TYPE: int64* 	OFFSET: +0x18
        Local scope: SIZE: 0x68 {
            NAME: __temp_721 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_722 	TYPE: int64* 	OFFSET: -0x10
            NAME: __temp_723 	TYPE: int64* 	OFFSET: -0x18
            NAME: __temp_724 	TYPE: LABEL
            NAME: __temp_725 	TYPE: bool 	OFFSET: -0x20
            NAME: __temp_726 	TYPE: LABEL
            NAME: nsec 	TYPE: int64 	OFFSET: -0x28
            NAME: rt 	TYPE: int64 	OFFSET: -0x30
            NAME: sec 	TYPE: int64 	OFFSET: -0x38
            NAME: tnsec 	TYPE: int64 	OFFSET: -0x40
            NAME: tsec 	TYPE: int64 	OFFSET: -0x48
            Local scope: SIZE: 0x20 {
                NAME: __temp_727 	TYPE: int64* 	OFFSET: -0x50
                NAME: __temp_728 	TYPE: int64* 	OFFSET: -0x58
                NAME: __temp_729 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_730 	TYPE: int64 	OFFSET: -0x68
            }
            Local scope: SIZE: 0x0 {
                Local scope: SIZE: 0x0 {
                    Local scope: SIZE: 0x0 {
                    }
                    Local scope: SIZE: 0x0 {
                    }
                }
            }
        }
    }
    Function scope: SIZE: 0x0 {
        NAME: iter 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x0 {
        }
    }
    Function scope: SIZE: 0x50 {
        NAME: tv_nsec 	TYPE: int64 	OFFSET: +0x28
        NAME: tv_nsec_from 	TYPE: int64* 	OFFSET: +0x18
        NAME: tv_sec 	TYPE: int64 	OFFSET: +0x20
        NAME: tv_sec_from 	TYPE: int64* 	OFFSET: +0x10
        Local scope: SIZE: 0x50 {
            NAME: __temp_697 	TYPE: LABEL
            NAME: __temp_698 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_699 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_700 	TYPE: LABEL
            NAME: __temp_705 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_706 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_707 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_708 	TYPE: int64 	OFFSET: -0x30
            Local scope: SIZE: 0x20 {
                NAME: __temp_701 	TYPE: int64 	OFFSET: -0x38
                NAME: __temp_702 	TYPE: int64 	OFFSET: -0x40
                NAME: __temp_703 	TYPE: int64 	OFFSET: -0x48
                NAME: __temp_704 	TYPE: int64 	OFFSET: -0x50
            }
        }
    }
    Function scope: SIZE: 0x80 {
        NAME: d 	TYPE: int64 	OFFSET: +0x18
        NAME: n 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x80 {
            NAME: __temp_273 	TYPE: LABEL
            NAME: __temp_274 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_275 	TYPE: LABEL
            NAME: __temp_278 	TYPE: LABEL
            NAME: __temp_279 	TYPE: LABEL
            NAME: __temp_280 	TYPE: LABEL
            NAME: __temp_281 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_289 	TYPE: LABEL
            NAME: __temp_290 	TYPE: LABEL
            NAME: __temp_291 	TYPE: LABEL
            NAME: __temp_292 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_293 	TYPE: bool 	OFFSET: -0x20
            NAME: __temp_295 	TYPE: LABEL
            NAME: __temp_296 	TYPE: LABEL
            NAME: __temp_297 	TYPE: LABEL
            NAME: __temp_298 	TYPE: bool 	OFFSET: -0x28
            NAME: c 	TYPE: int64 	OFFSET: -0x30
            NAME: count 	TYPE: int64 	OFFSET: -0x38
            NAME: num 	TYPE: int64 	OFFSET: -0x40
            NAME: num2 	TYPE: int64 	OFFSET: -0x48
            Local scope: SIZE: 0x10 {
                NAME: __temp_276 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_277 	TYPE: int64 	OFFSET: -0x58
            }
            Local scope: SIZE: 0x38 {
                NAME: __temp_282 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_283 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_284 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_285 	TYPE: int64 	OFFSET: -0x68
                NAME: __temp_286 	TYPE: int64 	OFFSET: -0x70
                NAME: __temp_287 	TYPE: int64 	OFFSET: -0x78
                NAME: __temp_288 	TYPE: int64 	OFFSET: -0x80
            }
            Local scope: SIZE: 0x8 {
                NAME: __temp_294 	TYPE: int64 	OFFSET: -0x50
            }
            Local scope: SIZE: 0x30 {
                NAME: __temp_299 	TYPE: int64 	OFFSET: -0x50
                NAME: __temp_300 	TYPE: int64 	OFFSET: -0x58
                NAME: __temp_301 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_302 	TYPE: int64 	OFFSET: -0x68
                NAME: __temp_303 	TYPE: int64 	OFFSET: -0x70
                NAME: __temp_304 	TYPE: int64 	OFFSET: -0x78
            }
        }
    }
    Function scope: SIZE: 0x140 {
        NAME: iter 	TYPE: int64 	OFFSET: +0x10
        Local scope: SIZE: 0x140 {
            NAME: __temp_100 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_101 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_102 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_103 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_104 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_105 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_106 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_107 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_108 	TYPE: int64 	OFFSET: -0x48
            NAME: __temp_109 	TYPE: int64 	OFFSET: -0x50
            NAME: __temp_110 	TYPE: int64 	OFFSET: -0x58
            NAME: __temp_111 	TYPE: int64 	OFFSET: -0x60
            NAME: __temp_112 	TYPE: int64 	OFFSET: -0x68
            NAME: __temp_113 	TYPE: LABEL
            NAME: __temp_114 	TYPE: LABEL
            NAME: __temp_115 	TYPE: LABEL
            NAME: __temp_116 	TYPE: bool 	OFFSET: -0x70
            NAME: __temp_123 	TYPE: int64 	OFFSET: -0x78
            NAME: __temp_124 	TYPE: int64 	OFFSET: -0x80
            NAME: __temp_125 	TYPE: int64 	OFFSET: -0x88
            NAME: __temp_126 	TYPE: int64 	OFFSET: -0x90
            NAME: __temp_127 	TYPE: LABEL
            NAME: __temp_128 	TYPE: LABEL
            NAME: __temp_129 	TYPE: LABEL
            NAME: __temp_130 	TYPE: int64 	OFFSET: -0x98
            NAME: __temp_131 	TYPE: int64 	OFFSET: -0xA0
            NAME: __temp_132 	TYPE: int64 	OFFSET: -0xA8
            NAME: __temp_133 	TYPE: bool 	OFFSET: -0xB0
            NAME: __temp_137 	TYPE: int64 	OFFSET: -0xB8
            NAME: __temp_88 	TYPE: LABEL
            NAME: __temp_89 	TYPE: bool 	OFFSET: -0xC0
            NAME: __temp_90 	TYPE: LABEL
            NAME: __temp_91 	TYPE: void* 	OFFSET: -0xC8
            NAME: __temp_92 	TYPE: int64 	OFFSET: -0xD0
            NAME: __temp_93 	TYPE: LABEL
            NAME: __temp_94 	TYPE: LABEL
            NAME: __temp_95 	TYPE: LABEL
            NAME: __temp_96 	TYPE: bool 	OFFSET: -0xD8
            NAME: __temp_97 	TYPE: int64 	OFFSET: -0xE0
            NAME: __temp_98 	TYPE: bool 	OFFSET: -0xE8
            NAME: __temp_99 	TYPE: int64 	OFFSET: -0xF0
            NAME: i 	TYPE: int64 	OFFSET: -0xF8
            NAME: idx 	TYPE: int64* 	OFFSET: -0x100
            NAME: topk_k 	TYPE: int64 	OFFSET: -0x108
            NAME: value 	TYPE: double* 	OFFSET: -0x110
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x30 {
                NAME: __temp_117 	TYPE: double 	OFFSET: -0x118
                NAME: __temp_118 	TYPE: int64* 	OFFSET: -0x120
                NAME: __temp_119 	TYPE: int64 	OFFSET: -0x128
                NAME: __temp_120 	TYPE: int64 	OFFSET: -0x130
                NAME: __temp_121 	TYPE: double 	OFFSET: -0x138
                NAME: __temp_122 	TYPE: double 	OFFSET: -0x140
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x18 {
                NAME: __temp_134 	TYPE: int64 	OFFSET: -0x118
                NAME: __temp_135 	TYPE: int64 	OFFSET: -0x120
                NAME: __temp_136 	TYPE: double 	OFFSET: -0x128
                Local scope: SIZE: 0x0 {
                }
            }
        }
    }
    Function scope: SIZE: 0x40 {
        NAME: size 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x40 {
            NAME: __temp_166 	TYPE: LABEL
            NAME: __temp_167 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_168 	TYPE: LABEL
            NAME: __temp_169 	TYPE: void* 	OFFSET: -0x10
            NAME: __temp_170 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_171 	TYPE: LABEL
            NAME: __temp_172 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_173 	TYPE: bool 	OFFSET: -0x28
            NAME: __temp_174 	TYPE: LABEL
            NAME: __temp_175 	TYPE: void* 	OFFSET: -0x30
            NAME: align_size 	TYPE: int64 	OFFSET: -0x38
            NAME: ret 	TYPE: void* 	OFFSET: -0x40
            Local scope: SIZE: 0x0 {
            }
        }
    }
    Function scope: SIZE: 0xB8 {
        NAME: end 	TYPE: int64 	OFFSET: +0x20
        NAME: idx 	TYPE: int64* 	OFFSET: +0x10
        NAME: k 	TYPE: int64 	OFFSET: +0x30
        NAME: start 	TYPE: int64 	OFFSET: +0x18
        NAME: value 	TYPE: double* 	OFFSET: +0x28
        Local scope: SIZE: 0xB8 {
            NAME: __temp_42 	TYPE: LABEL
            NAME: __temp_43 	TYPE: LABEL
            NAME: __temp_44 	TYPE: LABEL
            NAME: i 	TYPE: int64 	OFFSET: -0x8
            NAME: p 	TYPE: int64 	OFFSET: -0x10
            NAME: pivot 	TYPE: double 	OFFSET: -0x18
            NAME: tmp 	TYPE: int64 	OFFSET: -0x20
            Local scope: SIZE: 0x98 {
                NAME: __temp_45 	TYPE: int64 	OFFSET: -0x28
                NAME: __temp_46 	TYPE: int64 	OFFSET: -0x30
                NAME: __temp_47 	TYPE: LABEL
                NAME: __temp_48 	TYPE: bool 	OFFSET: -0x38
                NAME: __temp_49 	TYPE: LABEL
                Local scope: SIZE: 0x80 {
                    NAME: __temp_50 	TYPE: int64 	OFFSET: -0x40
                    NAME: __temp_51 	TYPE: double 	OFFSET: -0x48
                    NAME: __temp_52 	TYPE: LABEL
                    NAME: __temp_53 	TYPE: LABEL
                    NAME: __temp_54 	TYPE: LABEL
                    NAME: __temp_55 	TYPE: bool 	OFFSET: -0x50
                    NAME: __temp_64 	TYPE: int64 	OFFSET: -0x58
                    NAME: __temp_65 	TYPE: int64 	OFFSET: -0x60
                    NAME: __temp_66 	TYPE: int64 	OFFSET: -0x68
                    NAME: __temp_67 	TYPE: int64 	OFFSET: -0x70
                    NAME: __temp_68 	TYPE: int64 	OFFSET: -0x78
                    NAME: __temp_69 	TYPE: LABEL
                    NAME: __temp_70 	TYPE: bool 	OFFSET: -0x80
                    NAME: __temp_71 	TYPE: LABEL
                    Local scope: SIZE: 0x30 {
                        NAME: __temp_56 	TYPE: LABEL
                        NAME: __temp_57 	TYPE: int64 	OFFSET: -0x88
                        NAME: __temp_58 	TYPE: double 	OFFSET: -0x90
                        NAME: __temp_59 	TYPE: bool 	OFFSET: -0x98
                        NAME: __temp_60 	TYPE: LABEL
                        Local scope: SIZE: 0x18 {
                            NAME: __temp_61 	TYPE: int64 	OFFSET: -0xA0
                            NAME: __temp_62 	TYPE: int64 	OFFSET: -0xA8
                            NAME: __temp_63 	TYPE: int64 	OFFSET: -0xB0
                        }
                    }
                    Local scope: SIZE: 0x0 {
                    }
                    Local scope: SIZE: 0x38 {
                        NAME: __temp_72 	TYPE: LABEL
                        NAME: __temp_73 	TYPE: bool 	OFFSET: -0x88
                        NAME: __temp_74 	TYPE: LABEL
                        Local scope: SIZE: 0x10 {
                            NAME: __temp_86 	TYPE: int64 	OFFSET: -0x90
                            NAME: __temp_87 	TYPE: int64 	OFFSET: -0x98
                        }
                        Local scope: SIZE: 0x30 {
                            NAME: __temp_75 	TYPE: int64 	OFFSET: -0x90
                            NAME: __temp_76 	TYPE: LABEL
                            NAME: __temp_77 	TYPE: LABEL
                            NAME: __temp_78 	TYPE: LABEL
                            NAME: __temp_79 	TYPE: int64 	OFFSET: -0x98
                            NAME: __temp_80 	TYPE: double 	OFFSET: -0xA0
                            NAME: __temp_81 	TYPE: bool 	OFFSET: -0xA8
                            Local scope: SIZE: 0x10 {
                                NAME: __temp_82 	TYPE: int64 	OFFSET: -0xB0
                                NAME: __temp_83 	TYPE: LABEL
                                NAME: __temp_84 	TYPE: bool 	OFFSET: -0xB8
                                NAME: __temp_85 	TYPE: LABEL
                            }
                        }
                    }
                }
                Local scope: SIZE: 0x0 {
                }
            }
        }
    }
    Function scope: SIZE: 0x120 {
        NAME: end 	TYPE: int64 	OFFSET: +0x20
        NAME: idx 	TYPE: int64* 	OFFSET: +0x10
        NAME: start 	TYPE: int64 	OFFSET: +0x18
        NAME: value 	TYPE: double* 	OFFSET: +0x28
        Local scope: SIZE: 0x120 {
            NAME: __temp_0 	TYPE: void* 	OFFSET: -0x8
            NAME: __temp_1 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_2 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_3 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_4 	TYPE: LABEL
            NAME: __temp_5 	TYPE: LABEL
            NAME: __temp_6 	TYPE: LABEL
            NAME: __temp_7 	TYPE: bool 	OFFSET: -0x28
            NAME: i 	TYPE: int64 	OFFSET: -0x30
            NAME: p 	TYPE: int64 	OFFSET: -0x38
            NAME: pivot 	TYPE: double 	OFFSET: -0x40
            NAME: stack 	TYPE: int64* 	OFFSET: -0x48
            NAME: stop 	TYPE: int64 	OFFSET: -0x50
            NAME: tmp 	TYPE: int64 	OFFSET: -0x58
            Local scope: SIZE: 0xC8 {
                NAME: __temp_10 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_11 	TYPE: int64 	OFFSET: -0x68
                NAME: __temp_12 	TYPE: int64 	OFFSET: -0x70
                NAME: __temp_13 	TYPE: LABEL
                NAME: __temp_14 	TYPE: bool 	OFFSET: -0x78
                NAME: __temp_15 	TYPE: LABEL
                NAME: __temp_8 	TYPE: int64 	OFFSET: -0x80
                NAME: __temp_9 	TYPE: int64 	OFFSET: -0x88
                Local scope: SIZE: 0x98 {
                    NAME: __temp_16 	TYPE: int64 	OFFSET: -0x90
                    NAME: __temp_17 	TYPE: double 	OFFSET: -0x98
                    NAME: __temp_18 	TYPE: LABEL
                    NAME: __temp_19 	TYPE: LABEL
                    NAME: __temp_20 	TYPE: LABEL
                    NAME: __temp_21 	TYPE: bool 	OFFSET: -0xA0
                    NAME: __temp_30 	TYPE: int64 	OFFSET: -0xA8
                    NAME: __temp_31 	TYPE: int64 	OFFSET: -0xB0
                    NAME: __temp_32 	TYPE: int64 	OFFSET: -0xB8
                    NAME: __temp_33 	TYPE: int64 	OFFSET: -0xC0
                    NAME: __temp_34 	TYPE: int64 	OFFSET: -0xC8
                    NAME: __temp_35 	TYPE: int64 	OFFSET: -0xD0
                    NAME: __temp_36 	TYPE: int64 	OFFSET: -0xD8
                    NAME: __temp_37 	TYPE: int64 	OFFSET: -0xE0
                    NAME: __temp_38 	TYPE: int64 	OFFSET: -0xE8
                    NAME: __temp_39 	TYPE: LABEL
                    NAME: __temp_40 	TYPE: bool 	OFFSET: -0xF0
                    NAME: __temp_41 	TYPE: LABEL
                    Local scope: SIZE: 0x30 {
                        NAME: __temp_22 	TYPE: LABEL
                        NAME: __temp_23 	TYPE: int64 	OFFSET: -0xF8
                        NAME: __temp_24 	TYPE: double 	OFFSET: -0x100
                        NAME: __temp_25 	TYPE: bool 	OFFSET: -0x108
                        NAME: __temp_26 	TYPE: LABEL
                        Local scope: SIZE: 0x18 {
                            NAME: __temp_27 	TYPE: int64 	OFFSET: -0x110
                            NAME: __temp_28 	TYPE: int64 	OFFSET: -0x118
                            NAME: __temp_29 	TYPE: int64 	OFFSET: -0x120
                        }
                    }
                    Local scope: SIZE: 0x0 {
                        Local scope: SIZE: 0x0 {
                        }
                    }
                }
            }
        }
    }
    Function scope: SIZE: 0x70 {
        NAME: d 	TYPE: double 	OFFSET: +0x10
        Local scope: SIZE: 0x70 {
            NAME: __temp_479 	TYPE: LABEL
            NAME: __temp_480 	TYPE: bool 	OFFSET: -0x8
            NAME: __temp_481 	TYPE: LABEL
            NAME: __temp_483 	TYPE: LABEL
            NAME: __temp_484 	TYPE: bool 	OFFSET: -0x10
            NAME: __temp_485 	TYPE: LABEL
            NAME: __temp_486 	TYPE: LABEL
            NAME: __temp_487 	TYPE: bool 	OFFSET: -0x18
            NAME: __temp_488 	TYPE: LABEL
            NAME: __temp_489 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_490 	TYPE: double 	OFFSET: -0x28
            NAME: __temp_491 	TYPE: double 	OFFSET: -0x30
            NAME: __temp_492 	TYPE: LABEL
            NAME: __temp_493 	TYPE: LABEL
            NAME: __temp_494 	TYPE: LABEL
            NAME: __temp_495 	TYPE: bool 	OFFSET: -0x38
            NAME: __temp_500 	TYPE: int64 	OFFSET: -0x40
            NAME: i 	TYPE: int64 	OFFSET: -0x48
            NAME: n 	TYPE: int64 	OFFSET: -0x50
            Local scope: SIZE: 0x8 {
                NAME: __temp_482 	TYPE: double 	OFFSET: -0x58
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x0 {
            }
            Local scope: SIZE: 0x20 {
                NAME: __temp_496 	TYPE: double 	OFFSET: -0x58
                NAME: __temp_497 	TYPE: int64 	OFFSET: -0x60
                NAME: __temp_498 	TYPE: double 	OFFSET: -0x68
                NAME: __temp_499 	TYPE: double 	OFFSET: -0x70
            }
        }
    }
    Function scope: SIZE: 0x20 {
        NAME: size 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x20 {
            NAME: __temp_153 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_154 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_155 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_156 	TYPE: int64 	OFFSET: -0x20
        }
    }
    Function scope: SIZE: 0x0 {
        Local scope: SIZE: 0x0 {
        }
    }
    Function scope: SIZE: 0x40 {
        NAME: size 	TYPE: int64 	OFFSET: +0x18
        Local scope: SIZE: 0x40 {
            NAME: __temp_157 	TYPE: LABEL
            NAME: __temp_158 	TYPE: int64 	OFFSET: -0x8
            NAME: __temp_159 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_160 	TYPE: bool 	OFFSET: -0x18
            NAME: __temp_161 	TYPE: LABEL
            NAME: __temp_165 	TYPE: void* 	OFFSET: -0x20
            NAME: ret 	TYPE: int64 	OFFSET: -0x28
            Local scope: SIZE: 0x18 {
                NAME: __temp_162 	TYPE: int64 	OFFSET: -0x30
                NAME: __temp_163 	TYPE: int64 	OFFSET: -0x38
                NAME: __temp_164 	TYPE: int64 	OFFSET: -0x40
            }
        }
    }
    Function scope: SIZE: 0x98 {
        NAME: d 	TYPE: double 	OFFSET: +0x10
        Local scope: SIZE: 0x98 {
            NAME: __temp_455 	TYPE: double* 	OFFSET: -0x8
            NAME: __temp_456 	TYPE: int64 	OFFSET: -0x10
            NAME: __temp_457 	TYPE: int64 	OFFSET: -0x18
            NAME: __temp_458 	TYPE: int64 	OFFSET: -0x20
            NAME: __temp_459 	TYPE: int64 	OFFSET: -0x28
            NAME: __temp_460 	TYPE: int64 	OFFSET: -0x30
            NAME: __temp_461 	TYPE: int64 	OFFSET: -0x38
            NAME: __temp_462 	TYPE: int64 	OFFSET: -0x40
            NAME: __temp_463 	TYPE: int64 	OFFSET: -0x48
            NAME: __temp_464 	TYPE: LABEL
            NAME: __temp_465 	TYPE: bool 	OFFSET: -0x50
            NAME: __temp_466 	TYPE: LABEL
            NAME: __temp_470 	TYPE: LABEL
            NAME: __temp_471 	TYPE: bool 	OFFSET: -0x58
            NAME: __temp_472 	TYPE: LABEL
            NAME: __temp_476 	TYPE: LABEL
            NAME: __temp_477 	TYPE: bool 	OFFSET: -0x60
            NAME: __temp_478 	TYPE: LABEL
            NAME: exp 	TYPE: int64 	OFFSET: -0x68
            NAME: exp_raw 	TYPE: int64 	OFFSET: -0x70
            NAME: frac 	TYPE: int64 	OFFSET: -0x78
            NAME: frac_raw 	TYPE: int64 	OFFSET: -0x80
            NAME: lv 	TYPE: int64 	OFFSET: -0x88
            NAME: sign 	TYPE: int64 	OFFSET: -0x90
            Local scope: SIZE: 0x8 {
                NAME: __temp_467 	TYPE: LABEL
                NAME: __temp_468 	TYPE: bool 	OFFSET: -0x98
                NAME: __temp_469 	TYPE: LABEL
                Local scope: SIZE: 0x0 {
                }
            }
            Local scope: SIZE: 0x8 {
                NAME: __temp_473 	TYPE: LABEL
                NAME: __temp_474 	TYPE: bool 	OFFSET: -0x98
                NAME: __temp_475 	TYPE: LABEL
                Local scope: SIZE: 0x0 {
                }
                Local scope: SIZE: 0x0 {
                }
            }
            Local scope: SIZE: 0x0 {
            }
        }
    }
}
====================================================
Resolving symbol 'main' -> 0x8000000DB
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'begin_time_sec' -> 0x20800000010
Resolving symbol 'begin_time_nsec' -> 0x20800000008
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'init_task' -> 0x800000D44
Resolving symbol 'begin_time_sec' -> 0x20800000010
Resolving symbol 'begin_time_nsec' -> 0x20800000008
Resolving symbol 'gettime' -> 0x80000163E
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'build_partitions' -> 0x800001CEE
Resolving symbol 'create_new_iter_task' -> 0x800002E51
Resolving symbol '__temp_251' -> 0x8000018FD
Resolving symbol '__temp_249' -> 0x8000019A5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_263' -> 0x800001AFC
Resolving symbol '__temp_261' -> 0x800001B06
Resolving symbol 'output_q_j1' -> 0x8000019D5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_272' -> 0x800001C96
Resolving symbol '__temp_270' -> 0x800001CA0
Resolving symbol 'output_q_j2' -> 0x800001B1E
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol '__temp_163' -> 0x800002E03
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '__temp_169' -> 0x800002A3C
Resolving symbol '__temp_167' -> 0x800002A54
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '_get_in_neighbors_range' -> 0x8000034BC
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol '__temp_161' -> 0x800002942
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'new_iter_task' -> 0x8000037CA
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol '__temp_352' -> 0x80000388F
Resolving symbol '__temp_350' -> 0x80000391B
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'pc_sync' -> 0x80000516A
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol '__temp_356' -> 0x800004B59
Resolving symbol 'get_vertices_range' -> 0x800005269
Resolving symbol 'get_in_neighbors_range' -> 0x800005495
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol '__temp_366' -> 0x8000041EF
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'calc_task' -> 0x8000056C1
Resolving symbol '__temp_364' -> 0x800004ABB
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'calc_task' -> 0x8000056C1
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol '__temp_354' -> 0x800003933
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'begin_time_sec' -> 0x20800000010
Resolving symbol 'begin_time_nsec' -> 0x20800000008
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'barrier_task' -> 0x800006EE5
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'partitions' -> 0x20800003000
Resolving symbol 'get_vertices_range' -> 0x800005269
Resolving symbol 'get_in_neighbors_range' -> 0x800005495
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'pc_get' -> 0x800008760
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'pc_get' -> 0x800008760
Resolving symbol '__temp_275' -> 0x800005F77
Resolving symbol '__temp_272' -> 0x800006326
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'memcpy' -> 0x8000088DF
Resolving symbol 'in_neighbors' -> 0x20800001000
Resolving symbol 'memcpy' -> 0x8000088DF
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol '__temp_291' -> 0x800006987
Resolving symbol '__temp_294' -> 0x80000697D
Resolving symbol '__temp_305' -> 0x800006718
Resolving symbol '__temp_311' -> 0x800006641
Resolving symbol '__temp_308' -> 0x8000066EB
Resolving symbol '__temp_303' -> 0x800006526
Resolving symbol '__temp_318' -> 0x800006763
Resolving symbol '__temp_316' -> 0x8000068FA
Resolving symbol '__temp_292' -> 0x80000635E
Resolving symbol '__temp_289' -> 0x800006B8C
Resolving symbol '__temp_330' -> 0x800006B8C
Resolving symbol '__temp_328' -> 0x8000069A3
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'pc_write' -> 0x800008C35
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'pc_write' -> 0x800008C35
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol '__temp_204' -> 0x800006FAE
Resolving symbol '__temp_202' -> 0x800006FB0
Resolving symbol 'num_tasks' -> 0x20800002008
Resolving symbol '__temp_207' -> 0x8000070B6
Resolving symbol 'task_status' -> 0x20800004000
Resolving symbol '__temp_213' -> 0x800007087
Resolving symbol '__temp_209' -> 0x800007089
Resolving symbol '__temp_205' -> 0x800006FC8
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol '__temp_218' -> 0x8000070F7
Resolving symbol '__temp_216' -> 0x800008706
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'begin_time_sec' -> 0x20800000010
Resolving symbol 'begin_time_nsec' -> 0x20800000008
Resolving symbol 'print_time_diff_and_update' -> 0x800008D80
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol '__newr0' -> 0x800000039
Resolving symbol 'topk_task' -> 0x8000094E0
Resolving symbol 'iter' -> 0x20800002000
Resolving symbol 'create_new_iter_task' -> 0x800002E51
Resolving symbol '__temp_667' -> 0x80000896F
Resolving symbol '__temp_665' -> 0x800008AEA
Resolving symbol '__temp_672' -> 0x800008AEA
Resolving symbol '__temp_670' -> 0x8000089B5
Resolving symbol '__temp_680' -> 0x800008BE7
Resolving symbol '__temp_678' -> 0x800008AEA
Resolving symbol 'gettime' -> 0x80000163E
Resolving symbol '__temp_726' -> 0x80000914B
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_724' -> 0x80000947A
Resolving symbol 'time_subtract' -> 0x8000095A4
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q_digits' -> 0x8000098B2
Resolving symbol 'topk' -> 0x800009E1C
Resolving symbol '__temp_700' -> 0x800009650
Resolving symbol '__temp_697' -> 0x800009756
Resolving symbol '__temp_275' -> 0x800009946
Resolving symbol '__temp_273' -> 0x8000099EE
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_280' -> 0x800009B45
Resolving symbol '__temp_278' -> 0x800009A1E
Resolving symbol '__temp_291' -> 0x800009C3E
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_289' -> 0x800009B5D
Resolving symbol '__temp_297' -> 0x800009DCE
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_295' -> 0x800009C56
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '__temp_90' -> 0x800009EF9
Resolving symbol '__temp_88' -> 0x800009F11
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'pralloc' -> 0x80000B4BD
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '__temp_95' -> 0x80000A097
Resolving symbol '__temp_93' -> 0x800009FF4
Resolving symbol 'pc_sync' -> 0x80000516A
Resolving symbol 'pc_get' -> 0x800008760
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '__temp_115' -> 0x80000A5CA
Resolving symbol 'vertices' -> 0x20800044000
Resolving symbol '__temp_113' -> 0x80000A3F6
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'select_topk' -> 0x80000B864
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'sort' -> 0x80000C15B
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol 'vertices_cnt' -> 0x20800045000
Resolving symbol '__temp_129' -> 0x80000B46F
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_double' -> 0x80000D4AC
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_127' -> 0x80000B043
Resolving symbol '__temp_168' -> 0x80000B586
Resolving symbol '__temp_166' -> 0x80000B608
Resolving symbol 'p_align_to' -> 0x80000DABE
Resolving symbol '__temp_174' -> 0x80000B6F6
Resolving symbol '__temp_171' -> 0x80000B74E
Resolving symbol 'init_PR_var' -> 0x80000DC02
Resolving symbol '_get_new_pa' -> 0x80000DCDA
Resolving symbol '__temp_44' -> 0x80000C10D
Resolving symbol '__temp_49' -> 0x80000B98B
Resolving symbol '__temp_47' -> 0x80000C103
Resolving symbol '__temp_54' -> 0x80000BD15
Resolving symbol '__temp_60' -> 0x80000BB6D
Resolving symbol '__temp_56' -> 0x80000BCE8
Resolving symbol '__temp_52' -> 0x80000BA6F
Resolving symbol '__temp_71' -> 0x80000C0B5
Resolving symbol '__temp_74' -> 0x80000C061
Resolving symbol '__temp_78' -> 0x80000C057
Resolving symbol '__temp_85' -> 0x80000C043
Resolving symbol '__temp_83' -> 0x80000C04D
Resolving symbol '__temp_78' -> 0x80000C057
Resolving symbol '__temp_76' -> 0x80000BF22
Resolving symbol '__temp_72' -> 0x80000C0AB
Resolving symbol '__temp_69' -> 0x80000C103
Resolving symbol '__temp_42' -> 0x80000B8B2
Resolving symbol 'pralloc' -> 0x80000B4BD
Resolving symbol '__temp_6' -> 0x80000D45E
Resolving symbol '__temp_15' -> 0x80000C4E1
Resolving symbol '__temp_13' -> 0x80000D454
Resolving symbol '__temp_20' -> 0x80000C86B
Resolving symbol '__temp_26' -> 0x80000C6C3
Resolving symbol '__temp_22' -> 0x80000C83E
Resolving symbol '__temp_18' -> 0x80000C5C5
Resolving symbol '__temp_41' -> 0x80000CC17
Resolving symbol '__temp_39' -> 0x80000D454
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_4' -> 0x80000C37E
Resolving symbol '__temp_481' -> 0x80000D575
Resolving symbol '__temp_479' -> 0x80000D601
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_485' -> 0x80000D62B
Resolving symbol '__temp_483' -> 0x80000D6ED
Resolving symbol 'output_double_binary' -> 0x80000DE9E
Resolving symbol '__temp_488' -> 0x80000D717
Resolving symbol '__temp_486' -> 0x80000D7D9
Resolving symbol 'output_double_binary' -> 0x80000DE9E
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_494' -> 0x80000DA70
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol '__temp_492' -> 0x80000D92D
Resolving symbol '__temp_161' -> 0x80000DDA9
Resolving symbol '__temp_157' -> 0x80000DE18
Resolving symbol '__temp_466' -> 0x80000E05A
Resolving symbol '__temp_464' -> 0x80000E13B
Resolving symbol '__temp_469' -> 0x80000E084
Resolving symbol '__temp_467' -> 0x80000E13B
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_472' -> 0x80000E165
Resolving symbol '__temp_470' -> 0x80000E50A
Resolving symbol '__temp_475' -> 0x80000E381
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_473' -> 0x80000E50A
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol '__temp_478' -> 0x80000E534
Resolving symbol '__temp_476' -> 0x80000E59D
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_char' -> 0x8000017B5
Resolving symbol 'output_q' -> 0x800001869
Maximum stack frame size: 0x2B0
